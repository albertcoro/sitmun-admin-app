{"version":3,"sources":["ng://@sitmun/frontend-gui/data-grid/data-grid.component.ts","ng://@sitmun/frontend-gui/btn-edit-rendered/btn-edit-rendered.component.ts","ng://@sitmun/frontend-gui/dialog-grid/dialog-grid.component.ts","ng://@sitmun/frontend-gui/sitmun-frontend-gui.module.ts"],"sourcesContent":["import { AgGridModule } from '@ag-grid-community/angular';\r\nimport { Component, OnInit, NgModule, Input, Output, EventEmitter } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { AllCommunityModules, ColumnApi, Module } from '@ag-grid-community/all-modules';\r\nimport {TranslateService} from '@ngx-translate/core';\r\n\r\n@Component({\r\n  selector: 'app-data-grid',\r\n  template: `    <div id=grup1 class=\"editDivBtns\">\r\n        <span *ngIf=\"title\"  [translate]=\"title\"> </span>\r\n        <button  mat-mini-fab class=\"editBtn\"  *ngIf=\"discardChangesButton\"  id=\"deleteChangesButton\" type=\"button\"  (click)=\"deleteChanges()\" [disabled]=\"changeCounter <= 0\">\r\n            <mat-icon  fontSet=\"material-icons-round\" > close </mat-icon>\r\n        </button>\r\n        <button mat-mini-fab class=\"editBtn\" *ngIf=\"undoButton\"  id=\"undo\"  (click)=\"undo()\" [disabled]=\"changeCounter <= 0\" >\r\n            <mat-icon fontSet=\"material-icons-round\" > undo </mat-icon>\r\n        </button>\r\n        <button mat-mini-fab class=\"editBtn\" *ngIf=\"redoButton\"  id=\"redo\"  (click)=\"redo()\" [disabled]=\"redoCounter <= 0\">\r\n            <mat-icon fontSet=\"material-icons-round\" > redo </mat-icon>\r\n        </button>\r\n        <button mat-mini-fab class=\"editBtn\" *ngIf=\"applyChangesButton\"  id=\"applyChangesButton\"  (click)=\"applyChanges()\" [disabled]=\"changeCounter <= 0\" >\r\n            <mat-icon fontSet=\"material-icons-round\" > check </mat-icon>\r\n        </button>\r\n    </div>\r\n\r\n    <div id=grup2 class=\"actionsDivBtns\" >\r\n        <label *ngIf=\"globalSearch\" [translate]=\"'Search'\"> </label>\r\n        <input *ngIf=\"globalSearch\"type=\"text\" class=\"searchGenericInput\" placeholder=\"\" (keyup)=\"quickSearch()\" [(ngModel)]=\"searchValue\" ml-2 >\r\n        <button *ngIf=\"deleteButton\"  mat-stroked-button id=\"deleteButton\"  (click)=\"removeData()\">\r\n            <mat-icon fontSet=\"material-icons-round\" > delete </mat-icon>\r\n            <span  [translate]=\"'Remove'\"> </span>\r\n            \r\n        </button>\r\n\r\n        \r\n        <button *ngIf=\"actionButton\"  mat-stroked-button [matMenuTriggerFor]=\"menu\" id=\"actionButton\">\r\n            <span  [translate]=\"'Actions'\"> </span>    \r\n            <mat-icon fontSet=\"material-icons-round\" > keyboard_arrow_down </mat-icon>     \r\n        </button>\r\n        <mat-menu #menu=\"matMenu\">\r\n            <button mat-menu-item (click)=\"exportData()\" > {{\"Export\" | translate}} </button>\r\n            <button mat-menu-item (click)=\"emitSelectedRows()\"> {{\"Duplicate\" | translate}}</button>\r\n            <button mat-menu-item> {{\"Search/Replace\" | translate}}</button>\r\n        </mat-menu>  \r\n            \r\n\r\n        <button  *ngIf=\"newButton\" mat-stroked-button id=\"newButton\"  (click)=\"newData()\">\r\n            <mat-icon fontSet=\"material-icons-round\"> add_circle_outline </mat-icon>      \r\n            <span  [translate]=\"'New'\"> </span>           \r\n        </button>\r\n\r\n        <button  *ngIf=\"addButton\" mat-stroked-button id=\"newButton\"  (click)=\"newData()\">\r\n            <mat-icon fontSet=\"material-icons-round\"> add_circle_outline </mat-icon>      \r\n            <span  [translate]=\"'Add'\"> </span>           \r\n        </button>\r\n        \r\n\r\n        \r\n    </div>\r\n\r\n\r\n\r\n    <div class=\"row\" style=\" height: 100%\">\r\n        <div id=\"myGrid\" style=\" width:100%; height: 100%\" >\r\n            <ag-grid-angular\r\n            style=\" width: 100%; height: 100%;\"\r\n            [class]=\"themeGrid\"\r\n            [floatingFilter]=\"true\"\r\n            [rowData]=\"rowData\"\r\n            [columnDefs]=\"columnDefs\"\r\n            [gridOptions]=\"gridOptions\"\r\n            [animateRows]=\"true\"\r\n            [pagination]=\"false\"\r\n            [modules]=\"modules\"     \r\n            [undoRedoCellEditing]=\"true\"    \r\n            [undoRedoCellEditingLimit]= 200\r\n            [suppressRowClickSelection]=true\r\n            [enableCellChangeFlash]=true\r\n            [frameworkComponents]=\"frameworkComponents\"\r\n            rowSelection=\"multiple\"\r\n            (filterModified)=\"onFilterModified()\"\r\n            (cellEditingStopped) =\"onCellEditingStopped($event)\"\r\n            (cellValueChanged)=\"onCellValueChanged($event)\"\r\n            (gridReady)=\"onGridReady($event)\">\r\n            \r\n            </ag-grid-angular>\r\n        </div>\r\n    </div>\r\n\r\n\r\n`,\r\n  styles: [`input,label{display:inline-block;margin:5px 5px 5px 10px}#newButton{color:#fff;background:no-repeat padding-box #68a225;margin-left:3px}#deleteButton{background:no-repeat padding-box #fff;margin-left:3px}#actionButton{background:no-repeat padding-box #fff;margin-left:3px;text-align:center!important}#applyChangesButton{color:#fff!important;background:no-repeat padding-box #68a225;margin-left:3px}#applyChangesButton[disabled]{background:no-repeat padding-box #83976c}#redo,#undo{color:#fff!important;background:#ff9300;margin-left:3px}#redo[disabled],#undo[disabled]{background:#ffc97f;margin-left:3px}#deleteChangesButton{color:#fff!important;background:#df3133}#deleteChangesButton[disabled]{color:#fff!important;background:#da8c8e}.editDivBtns{margin-left:10px;text-align:start;width:130px;height:30px!important;line-height:30px!important}.actionsDivBtns{text-align:end;width:calc(100% - 140px);height:60px}.actionsDivBtns,.editDivBtns{display:inline-block!important}.actionsDivBtns .mat-stroked-button{padding:5px 20px!important}.editDivBtns .mat-mini-fab .mat-button-wrapper{padding:inherit!important;display:inherit!important}.editDivBtns .mat-icon{height:30px!important;bottom:5px;position:relative}.editDivBtns .mat-mini-fab{width:30px;height:30px}.actionsDivBtns .searchGenericInput{height:45px!important;width:45%!important}.ag-body-viewport.ag-layout-normal ::-webkit-scrollbar-thumb{background:#eee}â .ag-body-viewport.ag-layout-normal ::-webkit-scrollbar{width:2em;height:2em}.ag-body-viewport.ag-layout-normal ::-webkit-scrollbar-button{background:#ccc}.ag-body-viewport.ag-layout-normal::-webkit-scrollbar-track-piece{background:#888}`]\r\n})\r\nexport class DataGridComponent implements OnInit {\r\n \r\n  private _eventRefreshSubscription: any;\r\n  private _eventGetSelectedRowsSubscription: any;\r\n  modules: Module[] = AllCommunityModules;\r\n  searchValue: string;\r\n  private gridApi;\r\n  private gridColumnApi;\r\n  statusColumn = false;\r\n  changesMap: Map<number, Map<string, number>> = new Map<number, Map<string, number>>();\r\n   // We will save the id of edited cells and the number of editions done.\r\n  private params; // Last parameters of the grid (in case we do apply changes we will need it) \r\n  rowData: any[];\r\n  changeCounter: number; // Number of editions done above any cell \r\n  previousChangeCounter: number; // Number of ditions done after the last modification(changeCounter)\r\n  redoCounter: number; // Number of redo we can do\r\n  modificationChange = false;\r\n  undoNoChanges = false; // Boolean that indicates if an undo hasn't modifications\r\n  gridOptions;\r\n\r\n  @Input() eventRefreshSubscription: Observable <boolean> ;\r\n  @Input() eventGetSelectedRowsSubscription: Observable <boolean> ;\r\n  @Input() frameworkComponents: any;\r\n  @Input() columnDefs: any[];\r\n  @Input() getAll: () => Observable<any>;\r\n  @Input() discardChangesButton: boolean;\r\n  @Input() undoButton: boolean;\r\n  @Input() redoButton: boolean;\r\n  @Input() applyChangesButton: boolean;\r\n  @Input() deleteButton: boolean;\r\n  @Input() newButton: boolean;\r\n  @Input() actionButton: boolean;\r\n  @Input() addButton: boolean;\r\n  @Input() globalSearch: boolean;\r\n  @Input() themeGrid: any;\r\n  @Input() singleSelection: boolean;\r\n  @Input() nonEditable: boolean;\r\n  @Input() title: string;\r\n\r\n\r\n  @Output() remove: EventEmitter<any[]>;\r\n  @Output() new: EventEmitter<number>;\r\n  @Output() sendChanges: EventEmitter<any[]>;\r\n  @Output() getSelectedRows: EventEmitter<any[]>;\r\n\r\n\r\n  constructor(public translate: TranslateService) {\r\n    this.translate = translate;\r\n\r\n    this.remove = new EventEmitter();\r\n    this.new = new EventEmitter();\r\n    this.sendChanges = new EventEmitter();\r\n    this.getSelectedRows = new EventEmitter();\r\n    this.changeCounter = 0;\r\n    this.previousChangeCounter = 0;\r\n    this.redoCounter = 0;\r\n    this.gridOptions = {\r\n      defaultColDef: {\r\n        sortable: true,\r\n        flex: 1,\r\n        filter: true,\r\n        editable: true,\r\n        cellStyle: {backgroundColor: '#FFFFFF'},\r\n      },\r\n      columnTypes: {\r\n        dateColumn: {\r\n            filter: 'agDateColumnFilter',\r\n            filterParams: {\r\n              comparator(filterLocalDateAtMidnight, cellValue) {\r\n                const dateCellValue = new Date(cellValue);\r\n                const dateFilter = new Date(filterLocalDateAtMidnight);\r\n\r\n                if (dateCellValue.getTime() < dateFilter.getTime()) {\r\n                  return -1;\r\n                } else if (dateCellValue.getTime()  > dateFilter.getTime()) {\r\n                  return 1;\r\n                } else {\r\n                  return 0;\r\n                }\r\n              },\r\n            },\r\n            suppressMenu: true\r\n        }\r\n    },\r\n      rowSelection: 'multiple',\r\n      singleClickEdit: true,\r\n      // suppressHorizontalScroll: true,\r\n      localeTextFunc: (key: string, defaultValue: string) => {\r\n        const data = this.translate.instant(key);\r\n        return data === key ? defaultValue : data;\r\n    }\r\n    };\r\n\r\n  }\r\n\r\n\r\n  ngOnInit(){\r\n\r\n    if (this.eventRefreshSubscription) {\r\n      this._eventRefreshSubscription = this.eventRefreshSubscription.subscribe(() => {\r\n        this.getElements();\r\n      });\r\n    }\r\n    if (this.eventGetSelectedRowsSubscription) {\r\n      this._eventGetSelectedRowsSubscription = this.eventGetSelectedRowsSubscription.subscribe(() => {\r\n        this.emitSelectedRows();\r\n      });\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n  onGridReady(params): void{\r\n    if (this.singleSelection) {this.gridOptions.rowSelection = 'single'}\r\n    if (this.nonEditable) {this.gridOptions.editable = 'false'}\r\n    this.params = params;\r\n    this.gridApi = params.api;\r\n    this.gridColumnApi = params.columnApi;\r\n    this.getElements();\r\n    this.gridApi.sizeColumnsToFit();\r\n    for (const col of this.columnDefs) {\r\n      if (col.field === 'estat') {\r\n        this.statusColumn = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  \r\n  emitSelectedRows(): void{\r\n    const selectedNodes = this.gridApi.getSelectedNodes();\r\n    const selectedData = selectedNodes.map(node => node.data);\r\n    this.getSelectedRows.emit(selectedData);\r\n  }\r\n\r\n  getColumnKeysAndHeaders(columnkeys: Array<any>): String{    \r\n    let header:Array<any> = [];\r\n    if (this.columnDefs.length == 0) {return ''};\r\n\r\n    let allColumnKeys=this.gridOptions.columnApi.getAllDisplayedColumns();\r\n    console.log(allColumnKeys);\r\n    allColumnKeys.forEach(element => {\r\n        if (element.userProvidedColDef.headerName !== '')\r\n        {\r\n          columnkeys.push(element.userProvidedColDef.field);\r\n          header.push(element.userProvidedColDef.headerName);\r\n        }\r\n  \r\n      \r\n    });\r\n    \r\n    return header.join(\",\");\r\n  }\r\n\r\n\r\n  exportData(): void{\r\n    let columnkeys:Array<any> = [];\r\n    let customHeader:String = '';\r\n    customHeader = this.getColumnKeysAndHeaders(columnkeys)\r\n    console.log(this.gridApi);\r\n    let params = {\r\n        onlySelected: true,\r\n        columnKeys: columnkeys,\r\n        customHeader: customHeader,\r\n        skipHeader: true\r\n    };\r\n    this.gridApi.exportDataAsCsv(params);\r\n  }\r\n\r\n  quickSearch(): void{\r\n    this.gridApi.setQuickFilter(this.searchValue);\r\n}\r\n\r\n  getElements(): void\r\n  {\r\n    this.getAll()\r\n    .subscribe((items) => {\r\n        this.rowData = items;\r\n        setTimeout(()=>{this.gridApi.sizeColumnsToFit()}, 30);\r\n        this.gridApi.setRowData(this.rowData);\r\n        console.log(this.rowData);\r\n    });\r\n  }\r\n\r\n  removeData(): void {\r\n    this.gridApi.stopEditing(false);\r\n    const selectedNodes = this.gridApi.getSelectedNodes();\r\n    const selectedData = selectedNodes.map(node => node.data);\r\n    this.remove.emit(selectedData);\r\n\r\n    if(this.statusColumn)\r\n    {\r\n      const selectedRows = selectedNodes.map(node => node.rowIndex);\r\n\r\n      for (const id of selectedRows){\r\n          this.gridApi.getRowNode(id).data.estat ='Eliminat';\r\n        }\r\n      this.gridOptions.api.refreshCells();\r\n    }\r\n    this.gridOptions.api.deselectAll();\r\n  }\r\n\r\n  newData(): void\r\n  {\r\n    this.gridApi.stopEditing(false);\r\n    this.new.emit(-1);\r\n  }\r\n\r\n\r\n  applyChanges(): void\r\n  {\r\n    const itemsChanged: any[] = [];\r\n    this.gridApi.stopEditing(false);\r\n    for (const key of this.changesMap.keys())\r\n    {\r\n      itemsChanged.push(this.gridApi.getRowNode(key).data);\r\n    }\r\n    this.sendChanges.emit(itemsChanged);\r\n    this.changesMap.clear();\r\n    this.changeCounter = 0;\r\n    this.previousChangeCounter = 0;\r\n    this.redoCounter = 0;\r\n    this.params.colDef.cellStyle =  {backgroundColor: '#FFFFFF'};\r\n    this.gridApi.redrawRows();\r\n  }\r\n\r\n\r\n\r\n  deleteChanges(): void\r\n  {\r\n    for (let i = 0; i < this.changeCounter; i++)\r\n    {\r\n      this.gridApi.undoCellEditing();\r\n    }\r\n    this.changesMap.clear();\r\n    this.previousChangeCounter = 0;\r\n    this.changeCounter = 0;\r\n    this.redoCounter = 0;\r\n    this.params.colDef.cellStyle =  {backgroundColor: '#FFFFFF'};\r\n    this.gridApi.redrawRows();\r\n  }\r\n\r\n\r\n  onFilterModified(): void{\r\n    this.deleteChanges();\r\n  }\r\n\r\n\r\n  undo(): void {\r\n    this.gridApi.stopEditing(false);\r\n    this.gridApi.undoCellEditing();\r\n    this.changeCounter -= 1;\r\n    this.redoCounter += 1;\r\n  }\r\n\r\n  redo(): void {\r\n    this.gridApi.stopEditing(false);\r\n    this.gridApi.redoCellEditing();\r\n    this.changeCounter += 1;\r\n    this.redoCounter -= 1;\r\n  }\r\n\r\n\r\n  onCellEditingStopped(e)\r\n  {\r\n      if (this.modificationChange)\r\n      {\r\n        this.changeCounter++;\r\n        this.redoCounter = 0;\r\n        this.onCellValueChanged(e);\r\n        this.modificationChange = false;\r\n      }\r\n  }\r\n\r\n\r\n  onCellValueChanged(params): void{\r\n\r\n    this.params = params; \r\n    if (this.changeCounter > this.previousChangeCounter)\r\n      // True if we have edited some cell or we have done a redo \r\n      {\r\n\r\n        if (params.oldValue !== params.value && !(params.oldValue == null && params.value === ''))\r\n        {\r\n          \r\n          if (! this.changesMap.has(params.node.id)) // If it's firts edit of a cell, we add it to the map and we paint it\r\n          {\r\n            const addMap: Map<string, number> = new Map<string, number>();\r\n            addMap.set(params.colDef.field, 1)\r\n            this.changesMap.set(params.node.id, addMap);\r\n          }\r\n          else{\r\n            if (! this.changesMap.get(params.node.id).has(params.colDef.field))\r\n            {\r\n\r\n              this.changesMap.get(params.node.id).set(params.colDef.field, 1);\r\n            }\r\n\r\n            else{\r\n              // We already had edited this cell, so we only increment number of changes of it on the map \r\n             const currentChanges = this.changesMap.get(params.node.id).get(params.colDef.field);\r\n             this.changesMap.get(params.node.id).set(params.colDef.field, (currentChanges + 1));\r\n           }\r\n\r\n          }\r\n          this.paintCells(params, this.changesMap); //We paint the row of the edited cell \r\n          this.previousChangeCounter++; //We match the current previousChangeCounter with changeCounter\r\n        }\r\n\r\n      }\r\n    else if (this.changeCounter < this.previousChangeCounter){ // True if we have done an undo\r\n        let currentChanges = -1;\r\n        if (this.changesMap.has(params.node.id)) {currentChanges = this.changesMap.get(params.node.id).get(params.colDef.field);}\r\n        \r\n        if (currentChanges === 1) { //Once the undo it's done, cell is in his initial status\r\n\r\n          this.changesMap.get(params.node.id).delete(params.colDef.field);\r\n          if(this.changesMap.get(params.node.id).size === 0) { // No more modifications in this row\r\n            this.changesMap.delete(params.node.id);\r\n            const row = this.gridApi.getDisplayedRowAtIndex(params.rowIndex);\r\n\r\n            // We paint it white\r\n            this.gridApi.redrawRows({rowNodes: [row]});\r\n\r\n           }\r\n           else\r\n           {\r\n              this.paintCells(params, this.changesMap);\r\n           }\r\n\r\n        }\r\n        else if (currentChanges >1) // The cell isn't in his initial state yet\r\n        {                                 //We can't do else because we can be doing an undo without changes \r\n          this.changesMap.get(params.node.id).set(params.colDef.field, (currentChanges - 1));\r\n\r\n          this.paintCells(params, this.changesMap);//Not initial state -> green background\r\n\r\n        }\r\n        this.previousChangeCounter--;  //We decrement previousChangeCounter because we have done undo\r\n    }\r\n    else{ // Control of modifications without changes\r\n      if(params.oldValue !== params.value && !(params.oldValue == null && params.value === '') ) //Isn't a modification without changes\r\n      {\r\n        this.modificationChange = true;\r\n      }\r\n      else{ \r\n        if ( this.changesMap.has(params.node.id)) //Modification without changes in en edited cell\r\n        {\r\n          if(!this.undoNoChanges)\r\n          {\r\n            this.gridApi.undoCellEditing(); // Undo to delete the change without changes internally \r\n            this.undoNoChanges = true;\r\n            this.paintCells(params, this.changesMap);  //The cell has modifications yet -> green background \r\n          }\r\n          else { this.undoNoChanges = false; }\r\n\r\n\r\n        }\r\n        else {\r\n          //With the internally undo will enter at this function, so we have to control when done the undo or not \r\n          if(!this.undoNoChanges)\r\n          {\r\n            this.gridApi.undoCellEditing(); // Undo to delete the change internally\r\n            this.undoNoChanges = true;\r\n          }\r\n          else { this.undoNoChanges = false; }\r\n        }\r\n\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  getColumnIndexByColId(api: ColumnApi, colId: string): number {\r\n    return api.getAllColumns().findIndex(col => col.getColId() === colId);\r\n  }\r\n  paintCells(params: any,  changesMap: Map<number, Map<string, number>>, )\r\n  {\r\n    const row = this.gridApi.getDisplayedRowAtIndex(params.rowIndex);\r\n\r\n    this.changeCellStyleColumns(params,changesMap,'#E8F1DE');\r\n    this.gridApi.redrawRows({rowNodes: [row]});\r\n    this.changeCellStyleColumns(params,changesMap,'#FFFFFF'); \r\n    // We will define cellStyle white to future modifications (like filter)\r\n  }\r\n\r\n  changeCellStyleColumns(params: any, changesMap: Map<number, Map<string, number>>, color: string){\r\n\r\n    for (const key of changesMap.get(params.node.id).keys())\r\n    {\r\n      const columnNumber = this.getColumnIndexByColId(this.gridColumnApi, key);\r\n      this.gridColumnApi.columnController.gridColumns[columnNumber].colDef.cellStyle = {backgroundColor: color};\r\n    }\r\n\r\n\r\n  }\r\n\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component, OnDestroy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-btn-edit-rendered',\r\n  template: `<button mat-mini-fab class=\"buttonEdit\"  type=\"button\"  (click)=\"btnClickedHandler($event)\" >\r\n  <mat-icon class=\"iconEdit\"   fontSet=\"material-icons-round\" > edit </mat-icon>\r\n</button> `,\r\n  styles: [`.buttonEdit{color:#000;background-color:#ddd;width:20px;margin-top:3px;height:20px;box-shadow:none}.iconEdit{font-size:13px;margin-top:-10px;margin-left:-2px}`]\r\n})\r\nexport class BtnEditRenderedComponent implements ICellRendererAngularComp, OnDestroy {\r\n\r\n  public params: any;\r\n\r\n  agInit(params: any): void {\r\n    this.params = params;\r\n  }\r\n\r\n  refresh(params: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  btnClickedHandler($event) {\r\n    this.params.clicked(this.params.value);\r\n  }\r\n\r\n  getParams(){\r\n    return this.params;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // no need to remove the button click handler \r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter, Inject } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\n\r\nexport interface DialogData {\r\n  _GetAllsTable:  Array<() => Observable<any>>;\r\n  _columnDefsTable: Array<any[]>;\r\n  _singleSelectionTable: Array<boolean>;\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'app-dialog-grid',\r\n  template: `<h2 mat-dialog-title>{{title}}</h2>\r\n<mat-dialog-content >\r\n  <div *ngFor=\"let getAll of getAllsTable; let i = index\" style=\"width: 450px; height: 300px;  margin: 50px;\">\r\n    <app-data-grid \r\n    [columnDefs]=\"columnDefsTable[i]\" [themeGrid]='themeGrid'  [getAll]='getAll' [globalSearch]=true [singleSelection]=\"singleSelectionTable[i]\"\r\n    [title]=\"titlesTable[i]\" [nonEditable]=\"nonEditable\" [eventGetSelectedRowsSubscription]=\"getAllRows.asObservable()\" (getSelectedRows)='joinRowsReceived($event)' >\r\n    </app-data-grid>\r\n  </div>\r\n</mat-dialog-content>\r\n<div mat-dialog-actions align=\"end\">\r\n  <button mat-button  (click)=\"closeDialog()\">{{\"Cancel\" | translate}}</button>\r\n  <button mat-button  (click)=\"getAllSelectedRows()\" cdkFocusInitial>{{\"Add\" | translate}}</button>\r\n</div>\r\n`,\r\n  styles: [``]\r\n})\r\nexport class DialogGridComponent implements OnInit {\r\n\r\n  title: string;\r\n  getAllRows: Subject<boolean> = new Subject <boolean>();\r\n  private _addButtonClickedSubscription: any;\r\n  tablesReceivedCounter: number;\r\n  allRowsReceived: Array<any[]> = [];\r\n\r\n  //Inputs\r\n  themeGrid: any;\r\n  getAllsTable: Array<() => Observable<any>>;\r\n  columnDefsTable: Array<any[]>;\r\n  singleSelectionTable: Array<boolean>;\r\n  titlesTable: Array<string>;\r\n  addButtonClickedSubscription: Observable <boolean> ;\r\n  nonEditable: boolean;\r\n\r\n  //Outputs\r\n  @Output() joinTables : EventEmitter<Array<any[]>>;\r\n\r\n  \r\n\r\n\r\n  constructor(private dialogRef: MatDialogRef<DialogGridComponent>) {\r\n    \r\n    this.joinTables = new EventEmitter();\r\n    this.nonEditable = true;\r\n    this.tablesReceivedCounter = 0;\r\n   }\r\n\r\n  ngOnInit() {\r\n\r\n    if (this.addButtonClickedSubscription) {\r\n      this._addButtonClickedSubscription = this.addButtonClickedSubscription.subscribe(() => {\r\n        this.getAllSelectedRows();\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  getAllSelectedRows() {\r\n    this.getAllRows.next(true);\r\n  }\r\n\r\n  joinRowsReceived(data: any[])\r\n  {\r\n      this.allRowsReceived.push(data);\r\n      this.tablesReceivedCounter++;\r\n      if(this.tablesReceivedCounter === this.getAllsTable.length)\r\n      {\r\n        this.doAdd(this.allRowsReceived);\r\n        console.log(this.allRowsReceived);\r\n      }\r\n  }\r\n\r\n  doAdd(rowsToAdd){\r\n    this.dialogRef.close({event:'Add',data: rowsToAdd});\r\n  }\r\n\r\n  closeDialog(){\r\n    this.dialogRef.close({event:'Cancel'});\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\n\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClientModule, HttpClient, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { BrowserAnimationsModule, NoopAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\n//import * as ol from 'openlayers';\r\nimport { TranslateModule, TranslateLoader, TranslateService } from '@ngx-translate/core';\r\nimport { registerLocaleData } from '@angular/common';\r\nimport { AngularHalModule } from '@sitmun/frontend-core';\r\n\r\n\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport localeCa from '@angular/common/locales/ca';\r\nimport localeEs from '@angular/common/locales/es';\r\nimport { SitmunFrontendCoreModule } from '@sitmun/frontend-core';\r\nimport { DataGridComponent } from './data-grid/data-grid.component';\r\n\r\nimport { AgGridModule } from '@ag-grid-community/angular';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { BtnEditRenderedComponent } from './btn-edit-rendered/btn-edit-rendered.component';\r\n\r\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\r\nimport { DialogGridComponent } from './dialog-grid/dialog-grid.component';\r\n\r\n\r\nregisterLocaleData(localeCa, 'ca');\r\nregisterLocaleData(localeEs, 'es');\r\n\r\n/** Load translation assets */\r\nexport function createTranslateLoader(http: HttpClient) {\r\n  return new TranslateHttpLoader(http, '../assets/i18n/', '.json');\r\n}\r\n\r\n\r\n/** SITMUN plugin core module */\r\n@NgModule({\r\n  imports: [\r\n    RouterModule,\r\n    HttpClientModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    NoopAnimationsModule,\r\n    AngularHalModule,\r\n    ReactiveFormsModule,\r\n    BrowserAnimationsModule,\r\n    AgGridModule.withComponents([]),\r\n    SitmunFrontendCoreModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatMenuModule,\r\n    MatDialogModule,\r\n    TranslateModule.forRoot({\r\n      loader: {\r\n        provide: TranslateLoader,\r\n        useFactory: (createTranslateLoader),\r\n        deps: [HttpClient]\r\n      }\r\n    })\r\n\r\n  ],\r\n  declarations: [\r\n    DataGridComponent,\r\n    BtnEditRenderedComponent,\r\n    DialogGridComponent,\r\n  ],\r\n  entryComponents: [\r\n  ],\r\n  providers: [\r\n  ],\r\n  exports: [\r\n    HttpClientModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    NoopAnimationsModule,\r\n    AngularHalModule,\r\n    TranslateModule,\r\n    ReactiveFormsModule,\r\n    DataGridComponent,\r\n    DialogGridComponent,\r\n    SitmunFrontendCoreModule\r\n  ]\r\n})\r\nexport class SitmunFrontendGuiModule {\r\n}\r\n"],"names":["DataGridComponent","prototype","ngOnInit","_this","this","eventRefreshSubscription","_eventRefreshSubscription","subscribe","getElements","eventGetSelectedRowsSubscription","_eventGetSelectedRowsSubscription","emitSelectedRows","onGridReady","params","singleSelection","gridOptions","rowSelection","nonEditable","editable","gridApi","api","gridColumnApi","columnApi","sizeColumnsToFit","_a","tslib_1.__values","columnDefs","_b","next","done","value","field","statusColumn","selectedData","getSelectedNodes","map","node","data","getSelectedRows","emit","getColumnKeysAndHeaders","columnkeys","header","length","allColumnKeys","getAllDisplayedColumns","console","log","forEach","element","userProvidedColDef","headerName","push","join","exportData","customHeader","onlySelected","columnKeys","skipHeader","exportDataAsCsv","quickSearch","setQuickFilter","searchValue","getAll","items","rowData","setTimeout","setRowData","removeData","stopEditing","selectedNodes","remove","selectedRows","rowIndex","selectedRows_1","selectedRows_1_1","id","getRowNode","estat","refreshCells","deselectAll","newData","new","applyChanges","itemsChanged","changesMap","keys","key","sendChanges","clear","changeCounter","previousChangeCounter","redoCounter","colDef","cellStyle","backgroundColor","redrawRows","deleteChanges","i","undoCellEditing","onFilterModified","undo","redo","redoCellEditing","onCellEditingStopped","e","modificationChange","onCellValueChanged","currentChanges","row","oldValue","has","get","set","addMap","Map","paintCells","delete","size","getDisplayedRowAtIndex","rowNodes","undoNoChanges","getColumnIndexByColId","colId","getAllColumns","findIndex","col","getColId","changeCellStyleColumns","color","columnNumber","columnController","gridColumns","Component","args","selector","template","styles","TranslateService","Input","Output","translate","AllCommunityModules","EventEmitter","defaultColDef","sortable","flex","filter","columnTypes","dateColumn","filterParams","comparator","filterLocalDateAtMidnight","cellValue","dateCellValue","Date","dateFilter","getTime","suppressMenu","singleClickEdit","localeTextFunc","defaultValue","instant","BtnEditRenderedComponent","agInit","refresh","btnClickedHandler","$event","clicked","getParams","ngOnDestroy","DialogGridComponent","addButtonClickedSubscription","_addButtonClickedSubscription","getAllSelectedRows","getAllRows","joinRowsReceived","allRowsReceived","tablesReceivedCounter","getAllsTable","doAdd","rowsToAdd","dialogRef","close","event","closeDialog","MatDialogRef","Subject","joinTables","createTranslateLoader","http","TranslateHttpLoader","registerLocaleData","localeCa","localeEs","NgModule","imports","RouterModule","HttpClientModule","CommonModule","FormsModule","NoopAnimationsModule","AngularHalModule","ReactiveFormsModule","BrowserAnimationsModule","AgGridModule","withComponents","SitmunFrontendCoreModule","MatButtonModule","MatIconModule","MatMenuModule","MatDialogModule","TranslateModule","forRoot","loader","provide","TranslateLoader","useFactory","ɵ0","deps","HttpClient","declarations","entryComponents","providers","exports"],"mappings":"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"}