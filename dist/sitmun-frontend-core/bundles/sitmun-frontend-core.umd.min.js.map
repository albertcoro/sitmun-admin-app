{"version":3,"sources":["ng://@sitmun/frontend-core/angular-hal/src/lib/resource-array.ts","ng://@sitmun/frontend-core/angular-hal/src/lib/resource-helper.ts","ng://@sitmun/frontend-core/angular-hal/src/lib/resource.ts","ng://@sitmun/frontend-core/user/user.model.ts","ng://@sitmun/frontend-core/angular-hal/src/lib/external.service.ts","ng://@sitmun/frontend-core/angular-hal/src/lib/resource.service.ts","ng://@sitmun/frontend-core/angular-hal/src/lib/rest.service.ts","ng://@sitmun/frontend-core/account/account.service.ts","ng://@sitmun/frontend-core/auth/auth.service.ts","ng://@sitmun/frontend-core/auth/auth.interceptor.ts","ng://@sitmun/frontend-core/auth/principal.service.ts","ng://@sitmun/frontend-core/auth/auth-expired.interceptor.ts","ng://@sitmun/frontend-core/auth/login.service.ts","ng://@sitmun/frontend-core/dashboard/dashboard.service.ts","ng://@sitmun/frontend-core/user/user.service.ts","ng://@sitmun/frontend-core/user/user-position.model.ts","ng://@sitmun/frontend-core/user/user-position.service.ts","ng://@sitmun/frontend-core/user/user-configuration.model.ts","ng://@sitmun/frontend-core/user/user-configuration.service.ts","ng://@sitmun/frontend-core/territory/territory.model.ts","ng://@sitmun/frontend-core/territory/territory.service.ts","ng://@sitmun/frontend-core/territory/territory-type.model.ts","ng://@sitmun/frontend-core/territory/territory-type.service.ts","ng://@sitmun/frontend-core/territory/territory-group-type.model.ts","ng://@sitmun/frontend-core/territory/territory-group-type.service.ts","ng://@sitmun/frontend-core/role/role.model.ts","ng://@sitmun/frontend-core/role/role.service.ts","ng://@sitmun/frontend-core/connection/connection.model.ts","ng://@sitmun/frontend-core/connection/connection.service.ts","ng://@sitmun/frontend-core/task/task.model.ts","ng://@sitmun/frontend-core/task/task.service.ts","ng://@sitmun/frontend-core/task/task-type.model.ts","ng://@sitmun/frontend-core/task/task-type.service.ts","ng://@sitmun/frontend-core/task/task-group.model.ts","ng://@sitmun/frontend-core/task/task-group.service.ts","ng://@sitmun/frontend-core/task/task-parameter.model.ts","ng://@sitmun/frontend-core/task/task-parameter.service.ts","ng://@sitmun/frontend-core/task/task-availability.model.ts","ng://@sitmun/frontend-core/task/task-availability.service.ts","ng://@sitmun/frontend-core/task/task-ui.model.ts","ng://@sitmun/frontend-core/task/task-ui.service.ts","ng://@sitmun/frontend-core/translation/translation.model.ts","ng://@sitmun/frontend-core/translation/translation.service.ts","ng://@sitmun/frontend-core/translation/language.model.ts","ng://@sitmun/frontend-core/translation/language.service.ts","ng://@sitmun/frontend-core/service/service.model.ts","ng://@sitmun/frontend-core/service/service.service.ts","ng://@sitmun/frontend-core/service/service-parameter.model.ts","ng://@sitmun/frontend-core/service/service-parameter.service.ts","ng://@sitmun/frontend-core/cartography/cartography.model.ts","ng://@sitmun/frontend-core/cartography/cartography.service.ts","ng://@sitmun/frontend-core/cartography/cartography-group.model.ts","ng://@sitmun/frontend-core/cartography/cartography-group.service.ts","ng://@sitmun/frontend-core/cartography/cartography-availability.model.ts","ng://@sitmun/frontend-core/cartography/cartography-availability.service.ts","ng://@sitmun/frontend-core/cartography/cartography-filter.model.ts","ng://@sitmun/frontend-core/cartography/cartography-filter.service.ts","ng://@sitmun/frontend-core/cartography/cartography-parameter.model.ts","ng://@sitmun/frontend-core/cartography/cartography-parameter.service.ts","ng://@sitmun/frontend-core/cartography/background.model.ts","ng://@sitmun/frontend-core/cartography/background.service.ts","ng://@sitmun/frontend-core/tree/tree.model.ts","ng://@sitmun/frontend-core/tree/tree.service.ts","ng://@sitmun/frontend-core/tree/tree-node.model.ts","ng://@sitmun/frontend-core/tree/tree-node.service.ts","ng://@sitmun/frontend-core/application/application.model.ts","ng://@sitmun/frontend-core/application/application.service.ts","ng://@sitmun/frontend-core/application/application-background.model.ts","ng://@sitmun/frontend-core/application/application-background.service.ts","ng://@sitmun/frontend-core/application/application-parameter.model.ts","ng://@sitmun/frontend-core/application/application-parameter.service.ts","ng://@sitmun/frontend-core/codelist/codelist.model.ts","ng://@sitmun/frontend-core/codelist/codelist.service.ts","ng://@sitmun/frontend-core/map/map-configuration-manager.service.ts","ng://@sitmun/frontend-core/auth/has-any-authority.directive.ts","ng://@sitmun/frontend-core/auth/has-any-authority-on-territory.directive.ts","ng://@sitmun/frontend-core/sitmun-frontend-core.module.ts","ng://@sitmun/frontend-core/angular-hal/src/lib/angular-hal.module.ts"],"sourcesContent":["\r\nimport {throwError as observableThrowError} from 'rxjs';\r\n\r\nimport {catchError, map} from 'rxjs/operators';\r\nimport {Sort} from './sort';\r\nimport {ArrayInterface} from './array-interface';\r\nimport {ResourceHelper} from './resource-helper';\r\nimport {Resource} from './resource';\r\nimport * as url from 'url';\r\nimport {Observable} from 'rxjs';\r\n\r\n/** REST array of resource implementation */\r\nexport class ResourceArray<T extends Resource> implements ArrayInterface<T> {\r\n    /** sorting info */\r\n    public sortInfo: Sort[];\r\n    /** proxy url */\r\n    public proxyUrl: string;\r\n    /** root url */\r\n    public rootUrl: string;\r\n\r\n    /** self url */\r\n    public self_uri: string;\r\n    /** next resource url */\r\n    public next_uri: string;\r\n    /** previous resource url */\r\n    public prev_uri: string;\r\n    /** first resource url */\r\n    public first_uri: string;\r\n    /** last resource url */\r\n    public last_uri: string;\r\n\r\n    /** embedded array list */\r\n    public _embedded;\r\n\r\n    /** total number of elements in this array */\r\n    public totalElements = 0;\r\n    /** total number of pages in the response */\r\n    public totalPages = 1;\r\n    \r\n    /** page number in the response */\r\n    public pageNumber = 1;\r\n    \r\n    /** page size */\r\n    public pageSize: number;\r\n\r\n    /** array components */\r\n    public result: T[] = [];\r\n\r\n    /** push a new resource to the array */\r\n    push = (el: T) => {\r\n        this.result.push(el);\r\n    };\r\n\r\n    /** length of the array */\r\n    length = (): number => {\r\n        return this.result.length;\r\n    };\r\n\r\n    /** load array data from REST request */\r\n    private init = (type: { new(): T }, response: any, sortInfo: Sort[]): ResourceArray<T> => {\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(this._embedded);\r\n        result.sortInfo = sortInfo;\r\n        ResourceHelper.instantiateResourceCollection(type, response, result);\r\n        return result;\r\n    };\r\n\r\n    /** Load next page */\r\n    next = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.next_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.next_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no next defined');\r\n    };\r\n\r\n    /** Load previous page */\r\n    prev = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.prev_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.prev_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no prev defined');\r\n    };\r\n\r\n    /** Load first page */\r\n    first = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.first_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.first_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no first defined');\r\n    };\r\n\r\n    /** Load last page */\r\n    last = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.last_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.last_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no last defined');\r\n    };\r\n\r\n    /** Load page with given pageNumber*/\r\n    page = (type: { new(): T }, pageNumber: number): Observable<ResourceArray<T>> => {\r\n        this.self_uri = this.self_uri.replace('{?page,size,sort}', '');\r\n        this.self_uri = this.self_uri.replace('{&sort}', '');\r\n        let urlParsed = url.parse(ResourceHelper.getProxy(this.self_uri));\r\n        let query: string = ResourceArray.replaceOrAdd(urlParsed.query, 'size', this.pageSize.toString());\r\n        query = ResourceArray.replaceOrAdd(query, 'page', pageNumber.toString());\r\n\r\n\r\n        let uri = urlParsed.query ?\r\n            ResourceHelper.getProxy(this.self_uri).replace(urlParsed.query, query) : ResourceHelper.getProxy(this.self_uri).concat(query);\r\n        uri = this.addSortInfo(uri);\r\n        return ResourceHelper.getHttp().get(uri, {headers: ResourceHelper.headers}).pipe(\r\n            map(response => this.init(type, response, this.sortInfo)),\r\n            catchError(error => observableThrowError(error)),);\r\n    };\r\n\r\n    /** Sort collection based on given sort attribute */\r\n    sortElements = (type: { new(): T }, ...sort: Sort[]): Observable<ResourceArray<T>> => {\r\n        this.self_uri = this.self_uri.replace('{?page,size,sort}', '');\r\n        this.self_uri = this.self_uri.replace('{&sort}', '');\r\n        let uri = ResourceHelper.getProxy(this.self_uri).concat('?', 'size=', this.pageSize.toString(), '&page=', this.pageNumber.toString());\r\n        uri = this.addSortInfo(uri);\r\n        return ResourceHelper.getHttp().get(uri, {headers: ResourceHelper.headers}).pipe(\r\n            map(response => this.init(type, response, sort)),\r\n            catchError(error => observableThrowError(error)),);\r\n    };\r\n\r\n    /** Load page with given size */\r\n    size = (type: { new(): T }, size: number): Observable<ResourceArray<T>> => {\r\n        let uri = ResourceHelper.getProxy(this.self_uri).concat('?', 'size=', size.toString());\r\n        uri = this.addSortInfo(uri);\r\n        return ResourceHelper.getHttp().get(uri, {headers: ResourceHelper.headers}).pipe(\r\n            map(response => this.init(type, response, this.sortInfo)),\r\n            catchError(error => observableThrowError(error)),);\r\n    };\r\n\r\n    /** Add sort info to given URI */\r\n    private addSortInfo(uri: string) {\r\n        if (this.sortInfo) {\r\n            for (const item of this.sortInfo) {\r\n                uri = uri.concat('&sort=', item.path, ',', item.order);\r\n            }\r\n        }\r\n        return uri;\r\n    }\r\n\r\n    /** Add replace or add param value to query string */\r\n    private static replaceOrAdd(query: string, field: string, value: string): string {\r\n        if (query) {\r\n            let idx: number = query.indexOf(field);\r\n            let idxNextAmp: number = query.indexOf('&', idx) == -1 ? query.indexOf('/', idx) : query.indexOf('&', idx);\r\n\r\n            if (idx != -1) {\r\n                let seachValue = query.substring(idx, idxNextAmp);\r\n                query = query.replace(seachValue, field + '=' + value);\r\n            } else {\r\n                query = query.concat(\"&\" + field + '=' + value);\r\n            }\r\n        } else {\r\n            query = \"?\" + field + '=' + value;\r\n        }\r\n        return query;\r\n    }\r\n}\r\n","import {HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';\r\nimport {Resource} from './resource';\r\nimport {ResourceArray} from './resource-array';\r\nimport {HalOptions} from './rest.service';\r\nimport {SubTypeBuilder} from './subtype-builder';\r\nimport {isNullOrUndefined, isPrimitive} from 'util';\r\nimport * as url from 'url';\r\n\r\n/** REST API access helper */\r\nexport class ResourceHelper {\r\n\r\n    /** HttpHeaders */\r\n    public static headers: HttpHeaders = new HttpHeaders();\r\n    /** Proxy URL */\r\n    private static proxy_uri: string = null;\r\n    /** Root URL */\r\n    private static root_uri: string = null;\r\n    /** HttpClient */\r\n    private static http: HttpClient = null;\r\n\r\n    /** get request headers */\r\n    /*public static get headers(): HttpHeaders {\r\n        if (isNullOrUndefined(this._headers))\r\n          ResourceHelper._headers = new HttpHeaders();\r\n        return ResourceHelper._headers;\r\n    }*/\r\n\r\n    /** set request headers */\r\n    /*public static set headers(headers: HttpHeaders) {\r\n      ResourceHelper._headers = headers;\r\n    }*/\r\n\r\n    /** get request option params */\r\n    static optionParams(params: HttpParams, options?: HalOptions): HttpParams {\r\n        if (options) {\r\n\r\n            if (options.params) {\r\n                for (const param of options.params) {\r\n                    params = params.append(param.key, param.value.toString());\r\n                }\r\n            }\r\n\r\n            if (options.size) {\r\n                params = params.append('size', options.size.toString());\r\n            }\r\n\r\n            if (options.sort) {\r\n                for (const s of options.sort) {\r\n                    let sortString = '';\r\n                    sortString = s.path ? sortString.concat(s.path) : sortString;\r\n                    sortString = s.order ? sortString.concat(',').concat(s.order) : sortString;\r\n                    params = params.append('sort', sortString);\r\n                }\r\n            }\r\n\r\n        }\r\n        return params;\r\n    }\r\n\r\n    /** resolve resource relations */\r\n    static resolveRelations(resource: Resource): Object {\r\n        const result: any = {};\r\n        for (const key in resource) {\r\n            if (!isNullOrUndefined(resource[key])) {\r\n                if (ResourceHelper.className(resource[key])\r\n                    .find((className: string) => className == 'Resource')) {\r\n                    if (resource[key]['_links'])\r\n                        result[key] = resource[key]['_links']['self']['href'];\r\n                } else if (Array.isArray(resource[key])) {\r\n                    let array: any[] = resource[key];\r\n                    if (array) {\r\n                        result[key] = new Array();\r\n                        array.forEach((element) => {\r\n                            if (isPrimitive(element)) {\r\n                                result[key].push(element);\r\n                            }\r\n                            else {\r\n                                result[key].push(this.resolveRelations(element));\r\n                            }\r\n                        });\r\n                    }\r\n                } else {\r\n                    result[key] = resource[key];\r\n                }\r\n            }\r\n        }\r\n        return result as Object;\r\n    }\r\n\r\n    /** create an empty resource from embedded data*/\r\n    static createEmptyResult<T extends Resource>(_embedded: string): ResourceArray<T> {\r\n        let resourceArray: ResourceArray<T> = new ResourceArray<T>();\r\n        resourceArray._embedded = _embedded;\r\n        return resourceArray;\r\n    }\r\n\r\n    /** get resource class name*/\r\n    static getClassName(obj: any): string {\r\n        var funcNameRegex = /function (.+?)\\(/;\r\n        var results = (funcNameRegex).exec(obj.constructor.toString());\r\n        return (results && results.length > 1) ? results[1] : '';\r\n    }\r\n\r\n    \r\n    /** get resource class name from a prototype object*/\r\n    static className(objProto: any): string[] {\r\n        let classNames = [];\r\n        let obj = Object.getPrototypeOf(objProto);\r\n        let className: string;\r\n\r\n        while ((className = ResourceHelper.getClassName(obj)) !== 'Object') {\r\n            classNames.push(className);\r\n            obj = Object.getPrototypeOf(obj);\r\n        }\r\n\r\n        return classNames;\r\n    }\r\n\r\n    /** instantiate a ResourceCollection from response embedded data*/\r\n    static instantiateResourceCollection<T extends Resource>(type: { new(): T }, payload: any,\r\n                                                             result: ResourceArray<T>, builder?: SubTypeBuilder,embeddedName?:String): ResourceArray<T> {\r\n        for (const embeddedClassName of Object.keys(payload[result._embedded])) {\r\n            if(!embeddedName || (embeddedName && embeddedClassName==embeddedName)){\r\n                let embedded: any = payload[result._embedded];\r\n                const items = embedded[embeddedClassName];\r\n                for (let item of items) {\r\n                    let instance: T = new type();\r\n                    instance = this.searchSubtypes(builder, embeddedClassName, instance);\r\n\r\n                    this.instantiateResource(instance, item);\r\n                    result.push(instance);\r\n                }\r\n            }\r\n        }\r\n\r\n        result.totalElements = payload.page ? payload.page.totalElements : result.length;\r\n        result.totalPages = payload.page ? payload.page.totalPages : 1;\r\n        result.pageNumber = payload.page ? payload.page.number : 1;\r\n        result.pageSize = payload.page ? payload.page.size : 20;\r\n\r\n        result.self_uri = payload._links && payload._links.self ? payload._links.self.href : undefined;\r\n        result.next_uri = payload._links && payload._links.next ? payload._links.next.href : undefined;\r\n        result.prev_uri = payload._links && payload._links.prev ? payload._links.prev.href : undefined;\r\n        result.first_uri = payload._links && payload._links.first ? payload._links.first.href : undefined;\r\n        result.last_uri = payload._links && payload._links.last ? payload._links.last.href : undefined;\r\n        return result;\r\n    }\r\n\r\n    /** search subtypes*/\r\n    static searchSubtypes<T extends Resource>(builder: SubTypeBuilder, embeddedClassName: string, instance: T) {\r\n        if (builder && builder.subtypes) {\r\n            let keys = builder.subtypes.keys();\r\n            Array.from(keys).forEach((subtypeKey: string) => {\r\n                if (embeddedClassName.toLowerCase().startsWith(subtypeKey.toLowerCase())) {\r\n                    let subtype: { new(): any } = builder.subtypes.get(subtypeKey);\r\n                    instance = new subtype();\r\n                }\r\n            });\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    /** instantiate a Resource from response */\r\n    static instantiateResource<T extends Resource>(entity: T, payload: Object): T {\r\n        for (const p in payload) {\r\n            //TODO array init\r\n            /* if(entity[p].constructor === Array && isNullOrUndefined(payload[p]))\r\n                 entity[p] = [];\r\n             else*/\r\n            entity[p] = payload[p];\r\n        }\r\n        return entity;\r\n    }\r\n\r\n    /** set proxy URL */\r\n    static setProxyUri(proxy_uri: string) {\r\n        ResourceHelper.proxy_uri = proxy_uri;\r\n    }\r\n\r\n    /** set Root URI */\r\n    static setRootUri(root_uri: string) {\r\n        ResourceHelper.root_uri = root_uri;\r\n    }\r\n\r\n    /** get proxy URL */\r\n    public static getURL(): string {\r\n        return ResourceHelper.proxy_uri && ResourceHelper.proxy_uri != '' ?\r\n            ResourceHelper.addSlash(ResourceHelper.proxy_uri) :\r\n            ResourceHelper.addSlash(ResourceHelper.root_uri);\r\n    }\r\n\r\n    /** add slash to URI */\r\n    private static addSlash(uri: string): string {\r\n        let uriParsed = url.parse(uri);\r\n        if (isNullOrUndefined(uriParsed.search) && uri && uri[uri.length - 1] != '/')\r\n            return uri + '/';\r\n        return uri;\r\n    }\r\n\r\n    /** get proxy from URL */\r\n    public static getProxy(url: string): string {\r\n        if (!ResourceHelper.proxy_uri || ResourceHelper.proxy_uri == '')\r\n            return url;\r\n        return ResourceHelper.addSlash(url.replace(ResourceHelper.root_uri, ResourceHelper.proxy_uri));\r\n    }\r\n\r\n    /** set HttpClient*/\r\n    public static setHttp(http: HttpClient) {\r\n        ResourceHelper.http = http;\r\n    }\r\n\r\n    /** get HttpClient*/\r\n    public static getHttp(): HttpClient {\r\n        return ResourceHelper.http;\r\n    }\r\n\r\n    /** get root URI*/\r\n    static getRootUri() {\r\n        return ResourceHelper.root_uri;\r\n    }\r\n}\r\n","\r\nimport {throwError as observableThrowError, of as observableOf} from 'rxjs';\r\n\r\nimport {map} from 'rxjs/operators';\r\n\r\n\r\nimport {HttpParams} from '@angular/common/http';\r\nimport {ResourceHelper} from './resource-helper';\r\nimport {ResourceArray} from './resource-array';\r\nimport {isNullOrUndefined} from 'util';\r\n\r\nimport {HalOptions} from './rest.service';\r\nimport {SubTypeBuilder} from './subtype-builder';\r\nimport {Injectable} from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\n\r\n/** Abstract resource class*/\r\n@Injectable()\r\nexport abstract class Resource {\r\n\r\n    /** proxy URL */\r\n    public proxyUrl: string;\r\n    /** root URL */\r\n    public rootUrl: string;\r\n\r\n    /** links */\r\n    public _links: any;\r\n    /** subtypes */\r\n    public _subtypes: Map<string, any>;\r\n\r\n    \r\n    /** get subtypes */    \r\n    public get subtypes(): Map<string, any> {\r\n        return this._subtypes;\r\n    }\r\n\r\n    /** set subtypes */\r\n    public set subtypes(_subtypes: Map<string, any>) {\r\n        this._subtypes = _subtypes;\r\n    }\r\n\r\n    /** constructor*/\r\n    constructor() {\r\n    }\r\n\r\n    /** Get collection of related resources */\r\n    public getRelationArray<T extends Resource>(type: { new(): T }, relation: string, _embedded?: string, options?: HalOptions, builder?: SubTypeBuilder): Observable<T[]> {\r\n\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(isNullOrUndefined(_embedded) ? \"_embedded\" : _embedded);\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let observable = ResourceHelper.getHttp().get(ResourceHelper.getProxy(this._links[relation].href), {\r\n                headers: ResourceHelper.headers,\r\n                params: params\r\n            });\r\n            return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection<T>(type, response, result, builder)),\r\n                map((array: ResourceArray<T>) => array.result),);\r\n        } else {\r\n            return observableOf([]);\r\n        }\r\n    }\r\n\r\n    /** Get related resource */\r\n    public getRelation<T extends Resource>(type: { new(): T }, relation: string, builder?: SubTypeBuilder): Observable<T> {\r\n        let result: T = new type();\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let observable = ResourceHelper.getHttp().get(ResourceHelper.getProxy(this._links[relation].href), {headers: ResourceHelper.headers});\r\n            return observable.pipe(map((data: any) => {\r\n                if (builder) {\r\n                    for (const embeddedClassName of Object.keys(data['_links'])) {\r\n                        if (embeddedClassName == 'self') {\r\n                            let href: string = data._links[embeddedClassName].href;\r\n                            let idx: number = href.lastIndexOf('/');\r\n                            let realClassName = href.replace(ResourceHelper.getRootUri(), \"\").substring(0, idx);\r\n                            result = ResourceHelper.searchSubtypes(builder, realClassName, result);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                return ResourceHelper.instantiateResource(result, data);\r\n            }));\r\n        } else {\r\n            return observableOf(null);\r\n        }\r\n    }\r\n\r\n    /** Adds the given resource to the bound collection by the relation */\r\n    public addRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().post(ResourceHelper.getProxy(this._links[relation].href), resource._links.self.href, {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n\r\n    /** Bind the given resource to this resource by the given relation*/\r\n    public updateRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().patch(ResourceHelper.getProxy(this._links[relation].href), resource._links.self.href, {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n\r\n    /** Bind the given resource to this resource by the given relation*/\r\n    public substituteRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().put(ResourceHelper.getProxy(this._links[relation].href), resource._links.self.href, {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n    \r\n    \r\n    /** Bind the given resource to this resource by the given relation*/\r\n    public substituteAllRelation<T extends Resource>(relation: string, resources: Resource[]): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().put(ResourceHelper.getProxy(this._links[relation].href), resources.map((resource) => resource._links.self.href), {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /** Unbind the resource with the given relation from this resource*/\r\n    public deleteRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(resource._links)) {\r\n            let link: string = resource._links['self'].href;\r\n            let idx: number = link.lastIndexOf('/') + 1;\r\n\r\n            if (idx == -1)\r\n                return observableThrowError('no relation found');\r\n\r\n            let relationId: string = link.substring(idx);\r\n            return ResourceHelper.getHttp().delete(ResourceHelper.getProxy(this._links[relation].href + '/' + relationId), {headers: ResourceHelper.headers});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n    \r\n    /** Unbind the resource with the given relation from this resource*/\r\n    public deleteAllRelation<T extends Resource>(relation: string): Observable<any> {\r\n        return ResourceHelper.getHttp().delete(ResourceHelper.getProxy(this._links[relation].href ), {headers: ResourceHelper.headers});\r\n        \r\n    }\r\n\r\n}","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { UserConfiguration } from './user-configuration.model';\r\nimport { UserPosition } from './user-position.model';\r\n\r\n/**\r\n * User model\r\n */\r\nexport class User extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** username */\r\n  public username: string;\r\n  /** password */\r\n  public password: string;\r\n  /** first name */\r\n  public firstName: string;\r\n  /** last name */\r\n  public lastName: string;\r\n  /** whether user is blocked */\r\n  public blocked: boolean;\r\n  /** whether user is administrator */\r\n  public administrator: boolean;\r\n  /** Is passwordSet */\r\n  public passwordSet: boolean;\r\n  /** user positions */\r\n  public positions: UserPosition[];\r\n  /** user permissions */\r\n  public permissions: UserConfiguration[];\r\n}\r\n","import {HttpClient} from '@angular/common/http';\r\nimport {Inject, Injectable} from '@angular/core';\r\nimport {ResourceHelper} from './resource-helper';\r\nimport {ExternalConfigurationHandlerInterface} from './external-configuration.handler';\r\nimport {ExternalConfiguration} from './ExternalConfiguration';\r\n\r\n\r\n/** ExternalService */\r\n@Injectable()\r\nexport class ExternalService {\r\n\r\n    /** constructor */\r\n    constructor(@Inject('ExternalConfigurationService') private externalConfigurationService: ExternalConfigurationHandlerInterface) {\r\n        ResourceHelper.setProxyUri(externalConfigurationService.getProxyUri());\r\n        ResourceHelper.setRootUri(externalConfigurationService.getRootUri());\r\n        ResourceHelper.setHttp(externalConfigurationService.getHttp());\r\n    }\r\n\r\n    /** update ExternalConfigurationHandler */\r\n    public updateExternalConfigurationHandlerInterface(externalConfigurationService: ExternalConfigurationHandlerInterface) {\r\n\tthis.externalConfigurationService = externalConfigurationService;\r\n\r\n        ResourceHelper.setProxyUri(externalConfigurationService.getProxyUri());\r\n        ResourceHelper.setRootUri(externalConfigurationService.getRootUri());\r\n        ResourceHelper.setHttp(externalConfigurationService.getHttp());\r\n    }\r\n\r\n    /** get ExternalConfiguration */\r\n    public getExternalConfiguration(): ExternalConfiguration {\r\n        return this.externalConfigurationService.getExternalConfiguration();\r\n    }\r\n\r\n    /** get proxy URL */\r\n    public getProxyUri(): string {\r\n        return this.externalConfigurationService.getProxyUri();\r\n    }\r\n\r\n    /** get Root URI */\r\n    public getRootUri(): string {\r\n        return this.externalConfigurationService.getRootUri();\r\n    }\r\n\r\n    /** get URL */\r\n    public getURL(): string {\r\n        return ResourceHelper.getURL();\r\n    }\r\n\r\n    /** get HttpClient */\r\n    public getHttp(): HttpClient {\r\n        return ResourceHelper.getHttp();\r\n    }\r\n}\r\n","\r\nimport { throwError as observableThrowError } from 'rxjs';\r\n\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { Resource } from './resource';\r\nimport { ResourceHelper } from './resource-helper';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Sort } from './sort';\r\nimport { ResourceArray } from './resource-array';\r\nimport { ExternalService } from './external.service';\r\nimport { HalOptions } from './rest.service';\r\nimport { SubTypeBuilder } from './subtype-builder';\r\nimport { Observable } from 'rxjs';\r\n\r\n/** ResourceService */\r\n@Injectable()\r\nexport class ResourceService {\r\n\r\n\r\n    /** constructor */\r\n    constructor(private externalService: ExternalService) { }\r\n\r\n\r\n    /** get URL */\r\n    private static getURL(): string {\r\n        return ResourceHelper.getURL();\r\n    }\r\n\r\n    /** get all resources from a base URI of a given type */\r\n    public getAll<T extends Resource>(type: { new(): T }, resource: string, _embedded: string, options?: HalOptions, subType?: SubTypeBuilder, embeddedName?:String): Observable<ResourceArray<T>> {\r\n        const uri = this.getResourceUrl(resource).concat('?projection=view');\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        result.sortInfo = options ? options.sort : undefined;\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, params: params });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result, subType,embeddedName)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** get resource from a base URI and a given id */\r\n    public get<T extends Resource>(type: { new(): T }, resource: string, id: any): Observable<T> {\r\n        const uri = this.getResourceUrl(resource).concat('/', id, '?projection=view');\r\n        const result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers });\r\n        return observable.pipe(map(data => ResourceHelper.instantiateResource(result, data)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** get resource from its selflink */\r\n    public getBySelfLink<T extends Resource>(type: { new(): T }, resourceLink: string): Observable<T> {\r\n        const result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(ResourceHelper.getProxy(resourceLink), { headers: ResourceHelper.headers });\r\n        return observable.pipe(map(data => ResourceHelper.instantiateResource(result, data)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** search resources from a given base path, query and options */\r\n    public search<T extends Resource>(type: { new(): T }, query: string, resource: string, _embedded: string, options?: HalOptions): Observable<ResourceArray<T>> {\r\n        const uri = this.getResourceUrl(resource).concat('/search/', query);\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, params: params });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** search a single resource from a given base path, query and options */\r\n    public searchSingle<T extends Resource>(type: { new(): T }, query: string, resource: string, options?: HalOptions): Observable<T> {\r\n        const uri = this.getResourceUrl(resource).concat('/search/', query);\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, params: params });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResource(result, response)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** search resources from a given base path, custom query and options */\r\n    public customQuery<T extends Resource>(type: { new(): T }, query: string, resource: string, _embedded: string, options?: HalOptions): Observable<ResourceArray<T>> {\r\n        const uri = this.getResourceUrl(resource + query);\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, params: params });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** get resource given a relation link */\r\n    public getByRelation<T extends Resource>(type: { new(): T }, resourceLink: string): Observable<T> {\r\n        let result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(resourceLink, { headers: ResourceHelper.headers });\r\n        return observable.pipe(map(data => ResourceHelper.instantiateResource(result, data)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** get resource array given a relation link */\r\n    public getByRelationArray<T extends Resource>(type: { new(): T }, resourceLink: string, _embedded: string, builder?: SubTypeBuilder): Observable<ResourceArray<T>> {\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        let observable = ResourceHelper.getHttp().get(resourceLink, { headers: ResourceHelper.headers });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result, builder)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** count resources given a path */\r\n    public count(resource: string): Observable<number> {\r\n        const uri = this.getResourceUrl(resource).concat('/search/countAll');\r\n\r\n        return ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, observe: 'body' }).pipe(\r\n            map((response: Response) => Number(response.body)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** create resource from self link and entity data*/\r\n    public create<T extends Resource>(selfResource: string, entity: T) {\r\n        const uri = ResourceHelper.getURL() + selfResource;\r\n        const payload = ResourceHelper.resolveRelations(entity);\r\n\r\n        this.setUrlsResource(entity);\r\n        let observable = ResourceHelper.getHttp().post(uri, payload, { headers: ResourceHelper.headers, observe: 'response' });\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return ResourceHelper.instantiateResource(entity, response.body);\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }), catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** update resource from a given entity data*/\r\n    public update<T extends Resource>(entity: T) {\r\n        const uri = ResourceHelper.getProxy(entity._links.self.href);\r\n        const payload = ResourceHelper.resolveRelations(entity);\r\n        this.setUrlsResource(entity);\r\n        let observable = ResourceHelper.getHttp().put(uri, payload, { headers: ResourceHelper.headers, observe: 'response' });\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return ResourceHelper.instantiateResource(entity, response.body);\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }), catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** update resource from a given entity data*/\r\n    public updateCollection<T extends Resource>(resourceArray: ResourceArray<T>, resourceLink: string) {\r\n        const uri = ResourceHelper.getProxy(resourceLink);\r\n        //const payload = ResourceHelper.resolveRelations(entity);\r\n        //this.setUrlsResource(entity);\r\n        var headersReq = ResourceHelper.headers;\r\n        headersReq.set(\"Content-Type\", \"text/uri-list\");\r\n        let observable = ResourceHelper.getHttp().put(uri, resourceArray, { headers: headersReq, observe: 'response' });\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return \"\";\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }), catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** patch resource from a given entity data*/\r\n    public patch<T extends Resource>(entity: T) {\r\n        const uri = ResourceHelper.getProxy(entity._links.self.href);\r\n        const payload = ResourceHelper.resolveRelations(entity);\r\n        this.setUrlsResource(entity);\r\n        let observable = ResourceHelper.getHttp().patch(uri, payload, { headers: ResourceHelper.headers, observe: 'response' });\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return ResourceHelper.instantiateResource(entity, response.body);\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }), catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** delete resource from a given entity data*/\r\n    public delete<T extends Resource>(entity: T): Observable<Object> {\r\n        const uri = ResourceHelper.getProxy(entity._links.self.href);\r\n        return ResourceHelper.getHttp().delete(uri, { headers: ResourceHelper.headers }).pipe(catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** whether a resource array has next page of results*/\r\n    public hasNext<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.next_uri != undefined;\r\n    }\r\n\r\n    /** whether a resource array has previous page of results*/\r\n    public hasPrev<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.prev_uri != undefined;\r\n    }\r\n\r\n    /** whether a resource array has first page of results*/\r\n    public hasFirst<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.first_uri != undefined;\r\n    }\r\n\r\n    /** whether a resource array has last page of results*/\r\n    public hasLast<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.last_uri != undefined;\r\n    }\r\n\r\n    /** get resource array next page of results*/\r\n    public next<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.next(type);\r\n    }\r\n\r\n    /** get resource array previous page of results*/\r\n    public prev<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.prev(type);\r\n    }\r\n\r\n    /** get resource array first page of results*/\r\n    public first<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.first(type);\r\n    }\r\n\r\n    /** get resource array last page of results*/\r\n    public last<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.last(type);\r\n    }\r\n\r\n    /** get resource array page of results given a page number*/\r\n    public page<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }, id: number): Observable<ResourceArray<T>> {\r\n        return resourceArray.page(type, id);\r\n    }\r\n\r\n    /** sort resource array with a given sorting params */\r\n    public sortElements<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }, ...sort: Sort[]): Observable<ResourceArray<T>> {\r\n        return resourceArray.sortElements(type, ...sort);\r\n    }\r\n\r\n    /** get resource array size*/\r\n    public size<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }, size: number): Observable<ResourceArray<T>> {\r\n        return resourceArray.size(type, size);\r\n    }\r\n\r\n    /** get resource URL from a given path*/\r\n    public getResourceUrl(resource?: string): string {\r\n        let url = ResourceService.getURL();\r\n        if (!url.endsWith('/')) {\r\n            url = url.concat('/');\r\n        }\r\n        if (resource) {\r\n            return url.concat(resource);\r\n        }\r\n        return url;\r\n    }\r\n\r\n    /** set proxy and root urls of given resource array */\r\n    private setUrls<T extends Resource>(result: ResourceArray<T>) {\r\n        result.proxyUrl = this.externalService.getProxyUri();\r\n        result.rootUrl = this.externalService.getRootUri();\r\n    }\r\n\r\n    /** set proxy and root urls of given resource */\r\n    private setUrlsResource<T extends Resource>(result: T) {\r\n        result.proxyUrl = this.externalService.getProxyUri();\r\n        result.rootUrl = this.externalService.getRootUri();\r\n    }\r\n}\r\n","import {of as observableOf, throwError as observableThrowError} from 'rxjs';\r\nimport {map, mergeMap} from 'rxjs/operators';\r\nimport {Resource} from './resource';\r\nimport {ResourceArray} from './resource-array';\r\nimport {Sort} from './sort';\r\nimport {ResourceService} from './resource.service';\r\nimport {SubTypeBuilder} from './subtype-builder';\r\nimport {isNullOrUndefined} from 'util';\r\nimport {Observable} from 'rxjs';\r\nimport {Injector} from \"@angular/core\";\r\n\r\n/** HAL param data model */\r\nexport type HalParam = { key: string, value: string | number | boolean };\r\n/** HAL option data model */\r\nexport type HalOptions = { notPaged?: boolean, size?: number, sort?: Sort[], params?: HalParam[] };\r\n\r\n/** REST API access interface */\r\nexport class RestService<T extends Resource> {\r\n    /** resource type */\r\n    private type: any;\r\n    /** resource path */\r\n    private resource: string;\r\n    /** resource array */\r\n    public resourceArray: ResourceArray<T>;\r\n    /** resource service */\r\n    public resourceService: ResourceService;\r\n    /** _embedded field name */\r\n    private _embedded: string = '_embedded';\r\n\r\n    /** constructor */\r\n    constructor(type: { new(): T },\r\n                resource: string,\r\n                private injector: Injector,\r\n                _embedded?: string) {\r\n        this.type = type;\r\n        this.resource = resource;\r\n        this.resourceService = injector.get(ResourceService);\r\n        if (!isNullOrUndefined(_embedded))\r\n            this._embedded = _embedded;\r\n    }\r\n\r\n    /** error handler */\r\n    protected handleError(error: any):Observable<never> {\r\n        return RestService.handleError(error);\r\n    }\r\n\r\n    /** error handler */\r\n    protected static handleError(error: any):Observable<never> {\r\n        return observableThrowError(error);\r\n    }\r\n\r\n    /** get all resources with optional options an subType params */\r\n    public getAll(options?: HalOptions, subType?: SubTypeBuilder, embeddedName?:String): Observable<T[]> {\r\n        return this.resourceService.getAll(this.type, this.resource, this._embedded, options, subType,embeddedName).pipe(\r\n            mergeMap((resourceArray: ResourceArray<T>) => {\r\n                if (options && options.notPaged && !isNullOrUndefined(resourceArray.first_uri)) {\r\n                    options.notPaged = false;\r\n                    options.size = resourceArray.totalElements;\r\n                    return this.getAll(options);\r\n                } else {\r\n                    this.resourceArray = resourceArray;\r\n                    return observableOf(resourceArray.result);\r\n                }\r\n            }));\r\n    }\r\n\r\n    /** get resource from a given id */\r\n    public get(id: any): Observable<T> {\r\n        return this.resourceService.get(this.type, this.resource, id);\r\n    }\r\n\r\n    /** get resource from self link */\r\n    public getBySelfLink(selfLink: string): Observable<T> {\r\n        return this.resourceService.getBySelfLink(this.type, selfLink);\r\n    }\r\n\r\n    /** search resources from a given query string and optional options params */\r\n    public search(query: string, options?: HalOptions): Observable<T[]> {\r\n        return this.resourceService.search(this.type, query, this.resource, this._embedded, options).pipe(\r\n            mergeMap((resourceArray: ResourceArray<T>) => {\r\n                if (options && options.notPaged && !isNullOrUndefined(resourceArray.first_uri)) {\r\n                    options.notPaged = false;\r\n                    options.size = resourceArray.totalElements;\r\n                    return this.search(query, options);\r\n                } else {\r\n                    this.resourceArray = resourceArray;\r\n                    return observableOf(resourceArray.result);\r\n                }\r\n            }));\r\n    }\r\n\r\n    /** search resource from a given query string and optional options params */\r\n    public searchSingle(query: string, options?: HalOptions): Observable<T> {\r\n        return this.resourceService.searchSingle(this.type, query, this.resource, options);\r\n    }\r\n\r\n    /** search resources from a given custom query string and optional options params */\r\n    public customQuery(query: string, options?: HalOptions): Observable<T[]> {\r\n        return this.resourceService.customQuery(this.type, query, this.resource, this._embedded, options).pipe(\r\n            mergeMap((resourceArray: ResourceArray<T>) => {\r\n                if (options && options.notPaged && !isNullOrUndefined(resourceArray.first_uri)) {\r\n                    options.notPaged = false;\r\n                    options.size = resourceArray.totalElements;\r\n                    return this.customQuery(query, options);\r\n                } else {\r\n                    this.resourceArray = resourceArray;\r\n                    return observableOf(resourceArray.result);\r\n                }\r\n            }));\r\n    }\r\n\r\n\r\n    /** get resource array given a relation link */\r\n    public getByRelationArray(relation: string, builder?: SubTypeBuilder): Observable<T[]> {\r\n        return this.resourceService.getByRelationArray(this.type, relation, this._embedded, builder).pipe(\r\n            map((resourceArray: ResourceArray<T>) => {\r\n                this.resourceArray = resourceArray;\r\n                return resourceArray.result;\r\n            }));\r\n    }\r\n\r\n    /** get resource given a relation link */\r\n    public getByRelation(relation: string): Observable<T> {\r\n        return this.resourceService.getByRelation(this.type, relation);\r\n    }\r\n\r\n    /** count resources given a path */\r\n    public count(): Observable<number> {\r\n        return this.resourceService.count(this.resource);\r\n    }\r\n\r\n    /** create resource from self link and entity data*/\r\n    public create(entity: T) {\r\n        return this.resourceService.create(this.resource, entity);\r\n    }\r\n\r\n    /** update resource from a given entity data*/\r\n    public update(entity: T) {\r\n        return this.resourceService.update(entity);\r\n    }\r\n\r\n    /** patch resource from a given entity data*/\r\n    public patch(entity: T) {\r\n        return this.resourceService.patch(entity);\r\n    }\r\n\r\n    /** delete resource from a given entity data*/\r\n    public delete(entity: T): Observable<Object> {\r\n        return this.resourceService.delete(entity);\r\n    }\r\n\r\n    /** get total number of elements of resource array */\r\n    public totalElement(): number {\r\n        if (this.resourceArray && this.resourceArray.totalElements)\r\n            return this.resourceArray.totalElements;\r\n        return 0;\r\n    }\r\n\r\n    /** whether a resource array has first page of results*/\r\n    public hasFirst(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasFirst(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** whether a resource array has next page of results*/\r\n    public hasNext(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasNext(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** whether a resource array has previous page of results*/\r\n    public hasPrev(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasPrev(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** whether a resource array has last page of results*/\r\n    public hasLast(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasLast(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** get resource array next page of results*/\r\n    public next(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.next(this.resourceArray, this.type).pipe(\r\n                map((resourceArray: ResourceArray<T>) => {\r\n                    this.resourceArray = resourceArray;\r\n                    return resourceArray.result;\r\n                }));\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array previous page of results*/\r\n    public prev(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.prev(this.resourceArray, this.type).pipe(\r\n                map((resourceArray: ResourceArray<T>) => {\r\n                    this.resourceArray = resourceArray;\r\n                    return resourceArray.result;\r\n                }));\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array first page of results*/\r\n    public first(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.first(this.resourceArray, this.type)\r\n                .pipe(\r\n                    map((resourceArray: ResourceArray<T>) => {\r\n                        this.resourceArray = resourceArray;\r\n                        return resourceArray.result;\r\n                    })\r\n                );\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array last page of results*/\r\n    public last(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.last(this.resourceArray, this.type)\r\n                .pipe(\r\n                    map((resourceArray: ResourceArray<T>) => {\r\n                        this.resourceArray = resourceArray;\r\n                        return resourceArray.result;\r\n                    })\r\n                );\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array page of results given a page number*/\r\n    public page(pageNumber: number): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.page(this.resourceArray, this.type, pageNumber).pipe(\r\n                map((resourceArray: ResourceArray<T>) => {\r\n                    this.resourceArray = resourceArray;\r\n                    return resourceArray.result;\r\n                }));\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n}\r\n","import { User } from '../user/user.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n\r\n/** Account manager service */\r\n@Injectable()\r\nexport class AccountService extends RestService<User> {\r\n  \r\n\r\n  /** API resource path */\r\n  public ACCOUNT_API = 'account';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(User, \"account\", injector);\r\n  }\r\n\r\n  /** get logged in user account*/\r\n  get(): Observable<any> {\r\n    let result: Observable<Object>;\r\n    result = this.http.get(this.resourceService.getResourceUrl(this.ACCOUNT_API));\r\n    return result;\r\n  }\r\n  \r\n  /** save account*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    result = this.http.post(this.resourceService.getResourceUrl(this.ACCOUNT_API) , item);\r\n\r\n    return result;\r\n  }\r\n\r\n  /** change logged in user account*/  \r\n  changePassword(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    result = this.http.post(this.resourceService.getResourceUrl(this.ACCOUNT_API+\"/change-password\") , item);\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable} from 'rxjs-compat';\r\nimport {ResourceService} from '../angular-hal/src/lib/resource.service';\r\n//import * as moment from 'moment';\r\n\r\n/** Authentication service*/\r\n@Injectable()\r\nexport class AuthService {\r\n    \r\n  /** API resource path */\r\n  public AUTH_API = 'authenticate';\r\n\r\n    /** constructor*/\r\n    constructor(\r\n        private http: HttpClient,\r\n        private resourceService: ResourceService\r\n    ) {}\r\n    \r\n    /** get current user jwt token from session storage*/\r\n    getToken() {\r\n        return  sessionStorage.getItem('authenticationToken');\r\n    }\r\n\r\n    /** login operation */\r\n    login(credentials): Observable<any> {\r\n\r\n        const data = {\r\n            username: credentials.username,\r\n            password: credentials.password\r\n        };\r\n        return this.http.post(this.resourceService.getResourceUrl(this.AUTH_API), data, {observe : 'response'}).map(authenticateSuccess.bind(this));\r\n\r\n        function authenticateSuccess(resp) {\r\n            if (resp.ok) {\r\n                const jwt = resp.body.id_token;\r\n                this.storeAuthenticationToken(jwt);\r\n                //const expiresAt = moment().add( resp.headers.get('Token-Validity'),'milisecond');\r\n                //sessionStorage.setItem('expires_at', JSON.stringify(expiresAt.valueOf()));\r\n                return jwt;\r\n            }                    \r\n        }\r\n    }\r\n    \r\n    /** login operation with jwt token */\r\n    loginWithToken(jwt) {\r\n        if (jwt) {\r\n            this.storeAuthenticationToken(jwt);\r\n            return Promise.resolve(jwt);\r\n        } else {\r\n            return Promise.reject('auth-jwt-service Promise reject'); // Put appropriate error message here\r\n        }\r\n    }\r\n\r\n    /** store jwt token in session storage*/\r\n    storeAuthenticationToken(jwt) {\r\n       sessionStorage.setItem('authenticationToken', jwt);\r\n        \r\n    }\r\n    \r\n    /** check whether current user is logged in*/\r\n    public isLoggedIn() {\r\n        //return moment().isBefore(this.getExpiration());\r\n        return this.getToken();\r\n    }\r\n    \r\n    /** check whether current user is logged out*/\r\n    isLoggedOut() {\r\n        return !this.isLoggedIn();\r\n    }\r\n\r\n    /** logout operation */\r\n    logout(): Observable<any> {\r\n\r\n        return new Observable((observer) => {\r\n            //localStorage.removeItem('authenticationToken');\r\n            sessionStorage.removeItem('authenticationToken');\r\n            //sessionStorage.removeItem('expires_at');\r\n            observer.complete();\r\n        });\r\n    }\r\n\r\n\r\n    \r\n}\r\n","import { Observable } from 'rxjs';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\r\n\r\n/** Interceptor for authentication token in API requests */\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n\r\n    /** constructor*/\r\n    constructor(\r\n    ) {\r\n    }\r\n    \r\n    /** request handler */\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        if (!request || !request.url || !(request.url.includes(\"/api/\")) ) {\r\n            request = request.clone({\r\n                setHeaders: {\r\n                    \"Access-Control-Allow-Origin\": \"*\"\r\n                }\r\n            });\r\n            return next.handle(request);\r\n        }\r\n        const token = sessionStorage.getItem('authenticationToken');\r\n        if (!!token) {\r\n            request = request.clone({\r\n                setHeaders: {\r\n                    Authorization: 'Bearer ' + token\r\n                }\r\n            });\r\n        }\r\n        return next.handle(request);\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport { AccountService } from '../account/account.service';\r\n\r\n/** Principal service*/\r\n@Injectable()\r\nexport class Principal {\r\n    private userIdentity: any;\r\n    private authenticated = false;\r\n    private authenticationState = new Subject<any>();\r\n\r\n    /** constructor */\r\n    constructor(\r\n        private account: AccountService\r\n    ) {}\r\n\r\n    /** authenticate with given identity*/\r\n    authenticate(identity) {\r\n        this.userIdentity = identity;\r\n        this.authenticated = identity !== null;\r\n        this.authenticationState.next(this.userIdentity);\r\n    }\r\n\r\n    /** check whether current user has any of the given authorities */\r\n    hasAnyAuthority(authorities: string[]): Promise<boolean> {\r\n        return Promise.resolve(this.hasAnyAuthorityDirect(authorities));\r\n    }\r\n\r\n    /** check whether current user has any of the given authorities on the given territory */\r\n    hasAnyAuthorityOnTerritory(authorities: string[],territory: string ): Promise<boolean> {\r\n        return Promise.resolve(this.hasAnyAuthorityDirectOnTerritory(authorities,territory));\r\n    }\r\n\r\n    /** check whether current user has any of the given authorities without resolving promises*/\r\n    hasAnyAuthorityDirect(authorities: string[]): boolean {\r\n        if (!this.authenticated || !this.userIdentity || !this.userIdentity.authorities) {\r\n            return false;\r\n        }\r\n\r\n        for (let i = 0; i < authorities.length; i++) {\r\n            if (this.userIdentity.authorities.includes(authorities[i])) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** check whether current user has any of the given authorities on the given territory without resolving promises */\r\n    hasAnyAuthorityDirectOnTerritory(authorities: string[],territory: string): boolean {\r\n        if (!this.authenticated || !this.userIdentity || !this.userIdentity.authorities) {\r\n            return false;\r\n        }\r\n\r\n        for (let i = 0; i < authorities.length; i++) {\r\n\r\n            if (this.userIdentity.authoritiesPerTerritory[territory] && this.userIdentity.authoritiesPerTerritory[territory].includes(authorities[i])) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** check whether current user has the given authority */\r\n    hasAuthority(authority: string): Promise<boolean> {\r\n        if (!this.authenticated) {\r\n           return Promise.resolve(false);\r\n        }\r\n\r\n        return this.identity().then((id) => {\r\n            return Promise.resolve(id.authorities && id.authorities.includes(authority));\r\n        }, () => {\r\n            return Promise.resolve(false);\r\n        });\r\n    }\r\n\r\n    /** check whether current user has the given authority on the given territory*/\r\n    hasAuthorityOnTerritory(authority: string,territory: string): Promise<boolean> {\r\n        if (!this.authenticated) {\r\n           return Promise.resolve(false);\r\n        }\r\n\r\n        return this.identity().then((id) => {\r\n            return Promise.resolve(id.authoritiesPerTerritory && id.authoritiesPerTerritory[territory] && id.authoritiesPerTerritory[territory].includes(authority));\r\n        }, () => {\r\n            return Promise.resolve(false);\r\n        });\r\n    }\r\n\r\n    /** check user identity*/\r\n    identity(force?: boolean): Promise<any> {\r\n        if (force === true) {\r\n            this.userIdentity = undefined;\r\n        }\r\n\r\n        // check and see if we have retrieved the userIdentity data from the server.\r\n        // if we have, reuse it by immediately resolving\r\n        if (this.userIdentity) {\r\n            return Promise.resolve(this.userIdentity);\r\n        }\r\n\r\n        // retrieve the userIdentity data from the server, update the identity object, and then resolve.\r\n        return this.account.get().toPromise().then((response) => {\r\n            const account = response;\r\n            if (account) {\r\n                this.userIdentity = account;\r\n                this.authenticated = true;\r\n            } else {\r\n                this.userIdentity = null;\r\n                this.authenticated = false;\r\n            }\r\n            this.authenticationState.next(this.userIdentity);\r\n            return this.userIdentity;\r\n        }).catch((err) => {\r\n            this.userIdentity = null;\r\n            this.authenticated = false;\r\n            this.authenticationState.next(this.userIdentity);\r\n            return null;\r\n        });\r\n    }\r\n\r\n    /** check whether current user is authenticated */\r\n    isAuthenticated(): boolean {\r\n        return this.authenticated;\r\n    }\r\n\r\n    /** check whether current user identity is resolved */\r\n    isIdentityResolved(): boolean {\r\n        return this.userIdentity !== undefined;\r\n    }\r\n\r\n    /** get current user authentication state */\r\n    getAuthenticationState(): Observable<any> {\r\n        return this.authenticationState.asObservable();\r\n    }\r\n\r\n\r\n}\r\n","import { Injector, Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from './auth.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Principal } from './principal.service';\r\n\r\n/** Interceptor for authentication expired response in API requests */\r\n@Injectable()\r\nexport class AuthExpiredInterceptor implements HttpInterceptor {\r\n\r\n    /** constructor */\r\n    constructor(\r\n        private router: Router,     \r\n        private authService: AuthService, \r\n        private principal: Principal\r\n    ) {}\r\n\r\n    /** request handler */\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        return next.handle(request).do((event: HttpEvent<any>) => {}, (err: any) => {\r\n            const intercept: boolean = request.url.indexOf(\"/api/\") != -1;\r\n            //tractem request\r\n            if (intercept) {\r\n                if (err instanceof HttpErrorResponse) {\r\n                    if (err.status === 401) {                    \r\n                        this.authService.logout().subscribe();\r\n                        this.principal.authenticate(null);\r\n                        this.router.navigate(['/']);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AuthService } from './auth.service';\r\nimport { Principal } from './principal.service';\r\n\r\n/** Login service*/\r\n@Injectable()\r\nexport class LoginService {\r\n    \r\n    /** constructor */\r\n    constructor(\r\n        private authServerProvider: AuthService, \r\n        private principal: Principal\r\n    ) {}\r\n\r\n    /**Login operation*/\r\n    login(credentials, callback?) {\r\n        const cb = callback || function() {};\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.authServerProvider.login(credentials).subscribe((data) => {\r\n                this.principal.identity(true).then((account) => {\r\n                    // After the login the language will be changed to\r\n                    // the language selected by the user during his registration\r\n                    resolve(data);\r\n                });\r\n                \r\n                \r\n                return cb();\r\n            }, (err) => {\r\n                this.logout();\r\n                reject(err);\r\n                return cb(err);\r\n            });\r\n        });\r\n    }\r\n    /**login with jwt token */\r\n    loginWithToken(jwt) {\r\n        return this.authServerProvider.loginWithToken(jwt);\r\n    }\r\n\r\n    /** logout operation */\r\n    logout() {\r\n       this.authServerProvider.logout().subscribe();\r\n       this.principal.authenticate(null);\r\n    }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {ResourceService} from '../angular-hal/src/lib/resource.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DashboardService{\r\n\r\n    /** API resource path */\r\n    public DASHBOARD_API = 'dashboard/info';\r\n    public DASHBOARD_EMBEDDED= 'dashboard';\r\n    /** constructor */\r\n    constructor(       \r\n      private http: HttpClient,\r\n      private resourceService: ResourceService) {\r\n    }\r\n  \r\n    /** get all kpi */\r\n    getAll(): Observable<any> {\r\n      return this.http.get(this.resourceService.getResourceUrl(this.DASHBOARD_API)).map(response => response[this.DASHBOARD_EMBEDDED]);\r\n    }\r\n}\r\n","import {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { User } from './user.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n/** User manager service */\r\n@Injectable()\r\nexport class UserService extends RestService<User> {\r\n  \r\n  /** API resource path */\r\n  public USER_API ='users';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(User, \"users\", injector);\r\n  }\r\n  \r\n  /** remove user*/\r\n  remove(item: User) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save user*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.USER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n    \r\n  /** change password o given user id */\r\n  changePassword(id,item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    result = this.http.post(this.resourceService.getResourceUrl(this.USER_API+\"/\"+id+\"/change-password\") , item);\r\n    return result;\r\n  }\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { Territory } from '../territory/territory.model';\r\nimport { User } from './user.model';\r\n/**\r\n * User position model\r\n */\r\nexport class UserPosition extends Resource {\r\n  /** name */\r\n  public name: string;\r\n  /** email */\r\n  public email: string;\r\n  /** organization name*/\r\n  public organization: string;\r\n  /** system created date*/\r\n  public createdDate: any;\r\n  /** system dated date*/\r\n  public datedDate: any;\r\n  /** position territory*/\r\n  public territory: Territory;\r\n  /** user*/\r\n  public user: User;\r\n}\r\n","import {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { UserPosition } from './user-position.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n/** User position manager service */\r\n@Injectable()\r\nexport class UserPositionService  extends RestService<UserPosition> {\r\n  \r\n\r\n  /** API resource path */\r\n  public USER_POSITION_API = 'user-positions';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(UserPosition, \"user-positions\", injector);\r\n  }\r\n  \r\n  /** remove user position*/\r\n  remove(item: UserPosition) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save user position*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.user !=null){\r\n          item.substituteRelation('user',item.user).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      if (item.territory !=null){\r\n          item.substituteRelation('territory',item.territory).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n    } else {\r\n      item.territory = item.territory._links.self.href;\r\n      item.user = item.user._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.USER_POSITION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { Role } from '../role/role.model';\r\nimport { Territory } from '../territory/territory.model';\r\nimport { User } from './user.model';\r\n\r\n/**\r\n * User permission model\r\n */\r\nexport class UserConfiguration extends Resource {\r\n  /** role */  \r\n  public role: Role;\r\n\r\n  /** role Children */  \r\n  public roleChildren: Role;\r\n  \r\n  /** territory */ \r\n  public territory: Territory;\r\n  /** user */\r\n  public user: User;\r\n}\r\n","import { RestService } from '../angular-hal/src/lib/rest.service';\r\nimport { UserConfiguration } from './user-configuration.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n/** User configuration manager service */\r\n@Injectable()\r\nexport class UserConfigurationService extends RestService<UserConfiguration> {\r\n\r\n  /** API resource path */\r\n  public USER_CONFIGURATION_API = 'user-configurations';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector, private http: HttpClient) {\r\n    super(UserConfiguration, \"user-configurations\", injector);\r\n  }\r\n\r\n  /** remove user configuration*/\r\n  remove(item: UserConfiguration) {\r\n    return this.http.delete(item._links.self.href);\r\n\r\n  }\r\n\r\n  /** save user configuration*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links != null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.user != null) {\r\n        item.substituteRelation('user', item.user).subscribe(result => {\r\n\r\n        }, error => console.error(error));\r\n      }\r\n      if (item.territory != null) {\r\n        item.substituteRelation('territory', item.territory).subscribe(result => {\r\n\r\n        }, error => console.error(error));\r\n      }\r\n      if (item.role != null) {\r\n        item.substituteRelation('role', item.role).subscribe(result => {\r\n\r\n        }, error => console.error(error));\r\n      }\r\n      if (item.roleChildren != null) {\r\n        item.substituteRelation('roleChildren', item.roleChildren).subscribe(result => {\r\n\r\n        }, error => console.error(error));\r\n      }\r\n    } else {\r\n      item.territory = item.territory._links.self.href;\r\n      item.role = item.role!=null?item.role._links.self.href:null;\r\n      item.user = item.user._links.self.href;\r\n      item.roleChildren = item.roleChildren!=null?item.roleChildren._links.self.href:null;\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.USER_CONFIGURATION_API), item);\r\n    }\r\n    return result;\r\n  }\r\n\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { TerritoryGroupType } from './territory-group-type.model';\r\nimport { TerritoryType } from './territory-type.model';\r\n\r\n/**\r\n * Territory model\r\n */\r\nexport class Territory extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** code */\r\n  public code: string;\r\n  /** name */\r\n  public name: string;\r\n  /** address*/\r\n  public territorialAuthorityAddress: string;\r\n  /** admin */\r\n  public territorialAuthorityName: string;\r\n  /** whether territory is blocked*/\r\n  public blocked: boolean;\r\n  /** comments*/\r\n  public note: string;\r\n  /** system created date*/\r\n  public createdDate: any;\r\n  /** contact email */  \r\n  public territorialAuthorityEmail: string;\r\n  /** extension */\r\n  public extent: string;\r\n  /** logo image URL */\r\n  public territorialAuthorityLogo: string;\r\n  /** contact organization name */\r\n  // public organizationName: string;\r\n  /** scope*/\r\n  public scope: string;\r\n  /** type */  \r\n  public type: TerritoryType;\r\n  /** group type */\r\n  public groupType: TerritoryGroupType;\r\n  /** territory members*/\r\n  public members: Territory[];\r\n\r\n}\r\n","import { Territory } from './territory.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { RestService } from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Territory manager service */\r\n@Injectable()\r\nexport class TerritoryService extends RestService<Territory> {\r\n\r\n  /** API resource path */\r\n  public TERRITORY_API = 'territories';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector, private http: HttpClient) {\r\n    super(Territory, \"territories\", injector);\r\n  }\r\n\r\n  /** remove territory*/\r\n  remove(item: Territory) {\r\n    return this.http.delete(item._links.self.href);\r\n\r\n  }\r\n\r\n  /** save territory*/\r\n  save(item: Territory): Observable<any> {\r\n    let result: Observable<Object>;\r\n\r\n    let territoryGroupType:any = {}\r\n    territoryGroupType._links = {};\r\n    territoryGroupType._links.self = {};\r\n    territoryGroupType._links.self.href = \"\";\r\n\r\n    if (item.groupType != null) {\r\n      territoryGroupType = item.groupType;\r\n      if (typeof item.groupType._links != 'undefined') {\r\n        item.groupType = item.groupType._links.self.href;\r\n      } \r\n    }\r\n\r\n    if (item._links != null) {\r\n      //update relations\r\n      delete item.groupType;\r\n\r\n      if (territoryGroupType._links.self.href == '') {\r\n        item.deleteRelation('groupType', territoryGroupType).subscribe(result => {\r\n        }, error => console.error(error));\r\n\r\n      } else {\r\n        item.substituteRelation('groupType', territoryGroupType).subscribe(result => {\r\n        }, error => console.error(error));\r\n      }\r\n\r\n      if (item.type != null)\r\n        item.type = item.type._links.self.href;\r\n\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TERRITORY_API), item);\r\n    }\r\n    return result;\r\n  }\r\n\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n\r\n/**\r\n * Territory type model\r\n */\r\nexport class TerritoryType extends Resource {\r\n   /** id */\r\n   public id: number;  \r\n  /** name */\r\n  public name: string;\r\n}\r\n","import { Territory } from './territory.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { TerritoryType } from './territory-type.model';\r\n\r\n/** TerritoryType manager service */\r\n@Injectable()\r\nexport class TerritoryTypeService extends RestService<TerritoryType> {\r\n  \r\n\r\n  /** API resource path */\r\n  public TERRITORYTYPE_API = 'territory-types';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TerritoryType, \"territory-types\", injector);\r\n  }\r\n  \r\n  /** remove territory type*/\r\n  remove(item: TerritoryType) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save territory type*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TERRITORYTYPE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n\r\n/**\r\n * Territory type model\r\n */\r\nexport class TerritoryGroupType extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** name */\r\n  public name: string;\r\n}\r\n","import { TerritoryGroupType } from './territory-group-type.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TerritoryGroupTypeService extends RestService<TerritoryGroupType> {\r\n  \r\n  /** API resource path */\r\n  public TERRITORYGROUPTYPE_API = 'territory-group-types';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TerritoryGroupType, \"territory-group-types\", injector);\r\n  }\r\n  \r\n  /** remove territory*/\r\n  remove(item: TerritoryGroupType) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save territory*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TERRITORYGROUPTYPE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}","import {Resource} from '../angular-hal/src/lib/resource';\r\n\r\n/**\r\n * Role model\r\n */\r\nexport class Role extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name*/\r\n  public name: string;\r\n  /** comments*/\r\n  public description: string;\r\n\r\n}\r\n","import { Role } from './role.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Role manager service */\r\n@Injectable()\r\nexport class RoleService extends RestService<Role> {\r\n  \r\n  /** API resource path */\r\n  public ROLE_API = 'roles';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Role, \"roles\", injector);\r\n  }\r\n  \r\n  /** remove role*/\r\n  remove(item: Role) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save role*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.ROLE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Connection model\r\n */\r\nexport class Connection extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name*/\r\n  public name: string;\r\n  /** type*/\r\n  public type: string;\r\n  /** user*/\r\n  public user: string;\r\n  /** password*/\r\n  public password: string;\r\n  /** connection string*/\r\n  public connectionString: string;\r\n\r\n}\r\n","import { Connection } from './connection.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Connection manager service */\r\n@Injectable()\r\nexport class ConnectionService extends RestService<Connection> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CONNECTION_API = 'connections';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Connection, \"connections\", injector);\r\n  }\r\n  \r\n  /** remove connection*/\r\n  remove(item: Connection) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save connection*/\r\n  save(item: Connection): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  testConnection(item:any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    result=this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API)+\"/test\" , item);\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n\r\nimport { Connection } from '../connection/connection.model';\r\nimport { Role } from '../role/role.model';\r\nimport { TaskType } from './task-type.model';\r\nimport { TaskGroup } from './task-group.model';\r\nimport { TaskAvailability } from './task-availability.model';\r\nimport { TaskParameter } from './task-parameter.model';\r\n\r\n//FIXME ensure task creation in admin app upon initialization (as it is done with Roles and default Users)\r\n/** GEOADMIN_task id */\r\nexport const GEOADMIN_TREE_TASK_ID:string  = \"geoadmin\";\r\n\r\nimport { TaskUI } from './task-ui.model';\r\nimport { Cartography } from '../cartography/cartography.model';\r\nimport { Service } from '../service/service.model';\r\n/** Task model */\r\nexport class Task extends Resource {\r\n  /** id */\r\n  public id?: number;\r\n  /** name */  \r\n  public name?: string;\r\n  /** order*/\r\n  public order?: Number;\r\n  /** system created date*/\r\n  public createdDate?: any;\r\n  /** task group*/\r\n  public group?: TaskGroup;\r\n  /** task type*/\r\n  public type?: TaskType;\r\n  /** task UI*/\r\n  public ui?: TaskUI;\r\n  /** parameters*/\r\n  public parameters?: TaskParameter[];\r\n  /** connection*/\r\n  public connection?: Connection;\r\n  /** roles*/\r\n  public roles?: Role[];\r\n  /** availabilities*/\r\n  public availabilities?: TaskAvailability[];\r\n\r\n  public cartography?: Cartography;\r\n\r\n  public service?: Service;\r\n\r\n  public properties?;\r\n}\r\n","import { Task } from './task.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Task manager service */\r\n@Injectable()\r\nexport class TaskService extends RestService<Task> {\r\n\r\n    /** API resource path */\r\n    public CONNECTION_API = 'tasks';\r\n\r\n    /** constructor */\r\n    constructor(injector: Injector, private http: HttpClient) {\r\n        super(Task, \"tasks\", injector);\r\n    }\r\n\r\n    /** remove task*/\r\n    remove(item: Task) {\r\n        return this.http.delete(item._links.self.href);\r\n    }\r\n    \r\n    /** save task*/\r\n    save(item: Task): Observable<any> {\r\n        let result: Observable<Object>;\r\n\r\n        if (item._links != null) {\r\n\r\n            if (!item.service) {\r\n                let service:any = {}\r\n                service._links = {};\r\n                service._links.self = {};\r\n                service._links.self.href = \"\";\r\n                item.deleteRelation('service', service).subscribe(result => {\r\n                }, error => console.error(error)); \r\n            }else {\r\n                item.service._links.self.href=item.service._links.self.href.split(\"{\")[0]\r\n                item.substituteRelation('service', item.service).subscribe(result => {\r\n                }, error => console.error(error));\r\n                item.service = item.service._links.self.href\r\n            }\r\n            if (!item.cartography) {\r\n                let cartography:any = {}\r\n                cartography._links = {};\r\n                cartography._links.self = {};\r\n                cartography._links.self.href = \"\";\r\n                item.deleteRelation('cartography', cartography).subscribe(result => {\r\n                }, error => console.error(error)); \r\n            }else {\r\n                item.cartography._links.self.href=item.cartography._links.self.href.split(\"{\")[0]\r\n                item.substituteRelation('cartography', item.cartography).subscribe(result => {\r\n                }, error => console.error(error));\r\n                item.cartography = item.cartography._links.self.href\r\n            }\r\n\r\n            if (!item.connection) {\r\n                let connection:any = {}\r\n                connection._links = {};\r\n                connection._links.self = {};\r\n                connection._links.self.href = \"\";\r\n                item.deleteRelation('connection', connection).subscribe(result => {\r\n                }, error => console.error(error)); \r\n            }else {\r\n                item.connection._links.self.href=item.connection._links.self.href.split(\"{\")[0]\r\n                item.substituteRelation('connection', item.connection).subscribe(result => {\r\n                }, error => console.error(error));\r\n                item.connection = item.connection._links.self.href\r\n            }\r\n\r\n            if (!item.ui) {\r\n                // item.deleteRelation('ui', item.ui).subscribe(result => {\r\n                // }, error => console.error(error)); \r\n            }else {\r\n                item.ui._links.self.href=item.ui._links.self.href.split(\"{\")[0]\r\n                item.substituteRelation('ui', item.ui).subscribe(result => {\r\n                }, error => console.error(error));\r\n                item.ui = item.ui._links.self.href\r\n            }\r\n\r\n            if (!item.group) {\r\n                // item.deleteRelation('group', item.group).subscribe(result => {\r\n                // }, error => console.error(error)); \r\n            }else {\r\n                item.group._links.self.href=item.group._links.self.href.split(\"{\")[0]\r\n                item.substituteRelation('group', item.group).subscribe(result => {\r\n                }, error => console.error(error));\r\n                item.group = item.group._links.self.href\r\n            }\r\n\r\n            if (!item.type) {\r\n                // item.deleteRelation('type', item.type).subscribe(result => {\r\n                // }, error => console.error(error)); \r\n            }else {\r\n                item.type._links.self.href=item.type._links.self.href.split(\"{\")[0]\r\n                item.substituteRelation('type', item.type).subscribe(result => {\r\n                }, error => console.error(error));\r\n                item.type = item.type._links.self.href\r\n            }\r\n\r\n            result = this.http.put(item._links.self.href, item);            \r\n        } else {\r\n            if(item.cartography){\r\n                item.cartography = item.cartography._links.self.href\r\n            }\r\n            if(item.connection){\r\n                item.connection = item.connection._links.self.href\r\n            }\r\n            if(item.service){\r\n                item.service = item.service._links.self.href\r\n            }\r\n            if(item.ui){\r\n                item.ui = item.ui._links.self.href\r\n            }\r\n            if(item.group){\r\n                item.group = item.group._links.self.href\r\n            }\r\n            if(item.type){\r\n                item.type = item.type._links.self.href\r\n            }\r\n            result = this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API), item);\r\n        }\r\n        return result;\r\n    }\r\n\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Task type model\r\n */\r\nexport class TaskType extends Resource {\r\n  /** name*/  \r\n  public name: string;\r\n\r\n}\r\n","import { TaskType } from './task-type.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** TaskType manager service */\r\n@Injectable()\r\nexport class TaskTypeService extends RestService<TaskType> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CONNECTION_API = 'task-types';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TaskType, \"task-types\", injector);\r\n  }\r\n  \r\n  /** remove task type*/\r\n  remove(item: TaskType) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save task type*/\r\n  save(item: TaskType): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Task group model\r\n */\r\nexport class TaskGroup extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** name*/  \r\n  public name: string;\r\n\r\n}\r\n","import { TaskGroup } from './task-group.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Task group manager service */\r\n@Injectable()\r\nexport class TaskGroupService extends RestService<TaskGroup> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CONNECTION_API = 'task-groups';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TaskGroup, \"task-groups\", injector);\r\n  }\r\n  \r\n  /** remove task group*/\r\n  remove(item: TaskGroup) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save task group*/\r\n  save(item: TaskGroup): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Task} from './task.model';  \r\n/**\r\n * Task parameter model\r\n */\r\nexport class TaskParameter extends Resource {\r\n  /** name*/  \r\n  public name: string;\r\n  \r\n  /** type*/\r\n  public type: string;\r\n    \r\n  /** value*/\r\n  public value: string;\r\n  \r\n  /** order*/  \r\n  public order: Number;\r\n  \r\n  /** task*/  \r\n  public task:Task;\r\n\r\n}\r\n","import { TaskParameter } from './task-parameter.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Task parameter manager service */\r\n@Injectable() \r\nexport class TaskParameterService extends RestService<TaskParameter> {\r\n  \r\n\r\n  /** API resource path */\r\n  public TASK_PARAMETER_API = 'task-parameters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TaskParameter, \"task-parameters\", injector);\r\n  }\r\n  \r\n  /** remove task parameter*/\r\n  remove(item: TaskParameter) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save task parameter*/\r\n  save(item: TaskParameter): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.task !=null){\r\n          item.substituteRelation('task',item.task).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      \r\n    } else {\r\n      item.task = item.task._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TASK_PARAMETER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { Territory } from '../territory/territory.model';\r\nimport { Task } from './task.model';\r\n/**\r\n * Task availability model\r\n */\r\nexport class TaskAvailability extends Resource {\r\n  /** territory*/\r\n  public territory: Territory;\r\n  /** task*/\r\n  public task: Task;\r\n}\r\n","import { TaskAvailability } from './task-availability.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Task availability manager service */\r\n@Injectable() \r\nexport class TaskAvailabilityService extends RestService<TaskAvailability> {\r\n  \r\n\r\n  /** API resource path */\r\n  public TASK_AVAILABILITY_API = 'task-availabilities';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TaskAvailability, \"task-availabilities\", injector);\r\n  }\r\n  \r\n  /** remove task availability*/\r\n  remove(item: TaskAvailability) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save task availability*/\r\n  save(item: TaskAvailability): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.task !=null){\r\n          item.substituteRelation('task',item.task).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      if (item.territory !=null){\r\n          item.substituteRelation('territory',item.territory).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n    } else {\r\n      item.territory = item.territory._links.self.href;\r\n      item.task = item.task._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TASK_AVAILABILITY_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Task UI model\r\n */\r\nexport class TaskUI extends Resource {\r\n  /** name*/\r\n  public name: string;\r\n  \r\n  /** tooltip*/  \r\n  public tooltip: string;\r\n    \r\n  /** order*/ \r\n  public order: number;\r\n\r\n}\r\n","import { TaskUI } from './task-ui.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Task UI manager service */\r\n@Injectable()\r\nexport class TaskUIService extends RestService<TaskUI> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CONNECTION_API = 'task-uis';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TaskUI, \"task-uis\", injector);\r\n  }\r\n  \r\n  /** remove task UI*/\r\n  remove(item: TaskUI) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save task UI*/\r\n  save(item: TaskUI): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { Language } from './language.model';\r\n\r\n\r\n/** Task model */\r\nexport class Translation extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** id */\r\n  public element: number;\r\n  /** name */\r\n  public translation: string;\r\n  /** column */\r\n  public column: string;\r\n  /** name */\r\n  public language: Language;\r\n\r\n\r\n\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { Translation } from './translation.model';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TranslationService extends RestService<Translation> {\r\n\r\n  /** API resource path */\r\n  public TRANSLATION_API = 'translations';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Translation, \"translations\", injector);\r\n  }\r\n  \r\n  /** remove translation*/\r\n  remove(item: Translation) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save translation*/\r\n  save(item: Translation): Observable<any> {\r\n    let result: Observable<Object>;\r\n\r\n    let language:any = {}\r\n    language._links = {};\r\n    language._links.self = {};\r\n    language._links.self.href = \"\";\r\n\r\n    if (item.language != null) {\r\n      language = item.language;\r\n      if (typeof item.language._links != 'undefined') {\r\n        item.language = item.language._links.self.href;\r\n      } \r\n    }\r\n\r\n    if (item._links!=null) {\r\n      delete item.language;\r\n      // if (language._links.self.href == '') {\r\n      //   item.deleteRelation('language', language).subscribe(result => {\r\n      //   }, error => console.error(error));\r\n\r\n      // } else {\r\n      //   item.substituteRelation('language', language).subscribe(result => {\r\n      //   }, error => console.error(error));\r\n      // }\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TRANSLATION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n\r\n\r\n/** Task model */\r\nexport class Language extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name */\r\n  public shortname: string;\r\n  /** name */\r\n  public name: string;\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { Language } from './language.model';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LanguageService extends RestService<Language> {\r\n\r\n  /** API resource path */\r\n  public LANGUAGES_API = 'languages';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Language, \"languages\", injector);\r\n  }\r\n  \r\n  /** remove translation*/\r\n  remove(item: Language) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save translation*/\r\n  save(item: Language): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.LANGUAGES_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Connection} from '../connection/connection.model';\r\nimport {ServiceParameter} from './service-parameter.model';\r\n/**\r\n * Service model\r\n */\r\nexport class Service extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name*/\r\n  public name: string;\r\n    \r\n  /** type*/\r\n  public type: string;\r\n\r\n  /** url*/  \r\n  public serviceURL: string;\r\n\r\n  /** projections*/  \r\n  public supportedSRS: string;\r\n  \r\n  /** legend*/\r\n  public legend: string;\r\n\r\n  /** infoUrl*/  \r\n  public infoUrl: string;\r\n  \r\n  /** system created date*/\r\n  public createdDate: any;\r\n\r\n  /** connection*/\r\n  public connection: Connection;\r\n  \r\n  /** parameters*/  \r\n  public parameters: ServiceParameter[];\r\n\r\n  /** whether service is blocked*/\r\n  public blocked: boolean;\r\n}\r\n","import { Service } from './service.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Service manager service */\r\n@Injectable()\r\nexport class ServiceService extends RestService<Service> {\r\n\r\n  /** API resource path */\r\n  public SERVICE_API = 'services';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Service, \"services\", injector);\r\n  }\r\n  \r\n  /** remove service*/\r\n  remove(item: Service) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save service*/\r\n  save(item: Service): Observable<any> {\r\n    let result: Observable<Object>;\r\n    let serviceConnection = item.connection;\r\n\r\n    if (item.connection!=null){\r\n        if (typeof item.connection._links!= 'undefined') { \r\n            item.connection = item.connection._links.self.href;\r\n        } else {\r\n            serviceConnection._links= {};\r\n            serviceConnection._links.self = {};\r\n            serviceConnection._links.self.href=\"\";\r\n        }        \r\n     }\r\n\r\n    if (item._links!=null) {\r\n      //update relations\r\n      /*delete item.connection;        \r\n      \r\n      if (serviceConnection._links.self.href==''){\r\n         item.deleteRelation('connection',serviceConnection).subscribe(result => {     \r\n\r\n          \r\n             }, error => console.error(error));\r\n          \r\n      } else {\r\n          item.substituteRelation('connection',serviceConnection).subscribe(result => {\r\n         \r\n\r\n      \r\n            }, error => console.error(error));           \r\n       } */\r\n       \r\n         \r\n      result = this.http.put(item._links.self.href, item);\r\n\r\n           \r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.SERVICE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Service} from './service.model'; \r\n/**\r\n * Service parameter model\r\n */\r\nexport class ServiceParameter extends Resource {\r\n  /** name*/\r\n  public name: string;\r\n  \r\n  /** type*/\r\n  public type: string;\r\n    \r\n  /** value*/  \r\n  public value: string;\r\n  \r\n  /** service*/\r\n  public service: Service;\r\n\r\n}\r\n","import { ServiceParameter } from './service-parameter.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Service parameter manager service */\r\n@Injectable() \r\nexport class ServiceParameterService extends RestService<ServiceParameter> {\r\n\r\n  /** API resource path */\r\n  public SERVICE_PARAMETER_API = 'service-parameters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(ServiceParameter, \"service-parameters\", injector);\r\n  }\r\n  \r\n  /** remove service parameter*/\r\n  remove(item: ServiceParameter) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save service parameter*/\r\n  save(item: ServiceParameter): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      \r\n      if (item.service !=null){\r\n          let service =  item.service;\r\n          delete item.service;\r\n          item.substituteRelation('service',service).subscribe(result => {            \r\n          \r\n      }, error => console.error(error));\r\n      }\r\n      result = this.http.put(item._links.self.href, item);\r\n      \r\n      \r\n    } else {\r\n      item.service = item.service._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.SERVICE_PARAMETER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Service} from '../service/service.model';\r\nimport {Connection} from '../connection/connection.model';\r\nimport {CartographyAvailability} from './cartography-availability.model';\r\n/**\r\n * Cartography\r\n */\r\nexport class Cartography extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** name*/\r\n  public name: string;\r\n  \r\n  /** type*/\r\n  public type : string;\r\n\r\n  /** service*/\r\n  public service : Service;\r\n\r\n  /** order*/  \r\n  public order: Number; \r\n\r\n  /** description*/  \r\n  public description: String;\r\n\r\n  /** source*/  \r\n  public source: String;\r\n\r\n  /** whether cartography is blocked*/\r\n  public blocked: boolean;  \r\n\r\n  /** apply filter to get map*/\r\n  public applyFilterToGetMap: String;  \r\n\r\n  /** apply filter to get feature information*/\r\n  public applyFilterToGetFeatureInfo: boolean;  \r\n\r\n  /** apply filter to spatial selection*/\r\n  public applyFilterToSpatialSelection: boolean;  \r\n\r\n  /** selectable layers*/\r\n  public selectableLayers: string[];\r\n\r\n  /** transparency*/ \r\n  public transparency: Number;\r\n\r\n  /** whether layer is queryable*/  \r\n  public queryable: Boolean;\r\n\r\n  /** whether layer is queryable*/ \r\n  public queryAct: Boolean;\r\n\r\n  /** query layer*/\r\n  public queryLay: string;\r\n\r\n  /** system created date*/\r\n  public createdDate: any;\r\n\r\n  /** minimum scale*/\r\n  public minimumScale: Number;\r\n\r\n  /** maximum scale*/\r\n  public maximumScale: Number;\r\n\r\n  /** layers*/  \r\n  public layers: string;\r\n  \r\n  /** connection*/\r\n  public connection: Connection;\r\n\r\n  /** queryableFeatureEnabled */\r\n  public queryableFeatureEnabled: Boolean;\r\n\r\n    /** queryableLayers */\r\n  public queryableFeatureAvailable: Boolean;\r\n\r\n    /** queryableLayers */\r\n  public queryableLayers: string[];\r\n\r\n  /** availabilities*/\r\n  public availabilities : CartographyAvailability[];\r\n\r\n  /** whether layer is queryable*/ \r\n  public selectableFeatureEnabled: Boolean;\r\n\r\n  /** selection layer*/\r\n  public selectionLayer: string;\r\n\r\n  /** selection service*/  \r\n  public selectionService: Service;\r\n\r\n  /** legend tip*/  \r\n  public legendType: string;\r\n  \r\n  /** legend url*/\r\n  public legendURL: string;\r\n\r\n  /** whether layer is editable*/\r\n  public editable: Boolean;\r\n\r\n  /** metadata URL*/\r\n  public metadataURL: string;\r\n\r\n  /** metadata URL*/\r\n  public datasetURL: string;\r\n\r\n  /** whether layer is themable*/\r\n  public thematic: Boolean;\r\n  \r\n  /** geometry type*/\r\n  public geometryType: string;\r\n  \r\n\r\n}\r\n","import { Cartography } from './cartography.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { RestService } from '../angular-hal/src/lib/rest.service';\r\nimport { Connection } from '../connection/connection.model';\r\nimport { Service } from '../service/service.model';\r\n\r\n/** Cartography manager service */\r\n@Injectable()\r\nexport class CartographyService extends RestService<Cartography> {\r\n\r\n  /** API resource path */\r\n  public CARTOGRAPHY_API = 'cartographies';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector, private http: HttpClient) {\r\n    super(Cartography, \"cartographies\", injector);\r\n  }\r\n\r\n  /** remove cartography*/\r\n  remove(item: Cartography) {\r\n    return this.http.delete(item._links.self.href);\r\n\r\n  }\r\n\r\n  /** save cartography*/\r\n  save(item: Cartography): Observable<any> {\r\n    let result: Observable<Object>;\r\n\r\n    let cartographyConnection:any={};\r\n    cartographyConnection._links = {};\r\n    cartographyConnection._links.self = {};\r\n    cartographyConnection._links.self.href = \"\";\r\n     \r\n    let cartographyService:any={};\r\n    cartographyService._links = {};\r\n    cartographyService._links.self = {};\r\n    cartographyService._links.self.href = \"\";\r\n    \r\n    let cartographySelectionService:any = {};\r\n    cartographySelectionService._links = {};\r\n    cartographySelectionService._links.self = {};\r\n    cartographySelectionService._links.self.href = \"\";\r\n\r\n    if (item.service != null) {\r\n      cartographyService=  item.service;\r\n      if (typeof item.service._links != 'undefined') {\r\n        item.service = item.service._links.self.href;\r\n      }\r\n    }\r\n\r\n    if (item.selectionService != null) {\r\n      cartographySelectionService = item.selectionService\r\n      if (typeof item.selectionService._links != 'undefined') {\r\n        item.selectionService = item.selectionService._links.self.href;\r\n      }\r\n    }\r\n\r\n    if (item.connection != null) {\r\n      cartographyConnection=  item.connection;\r\n      if (typeof item.connection._links != 'undefined') {\r\n        item.connection = item.connection._links.self.href;\r\n      }\r\n    }\r\n\r\n    if (item._links != null) {\r\n\r\n      //update relations\r\n      delete item.connection;\r\n      delete item.service;\r\n      delete item.selectionService;\r\n\r\n      // if (cartographyConnection._links.self.href == '' && cartographyConnection) {\r\n      //   item.deleteRelation('spatialSelectionConnection', cartographyConnection).subscribe(result => {\r\n      //   }, error => console.error(error));\r\n      // } else {\r\n      //   item.substituteRelation('spatialSelectionConnection', cartographyConnection).subscribe(result => {\r\n      //   }, error => console.error(error));\r\n      // }\r\n\r\n      if (cartographyService._links.self.href == '') {\r\n        item.deleteRelation('service', cartographyService).subscribe(result => {\r\n        }, error => console.error(error));\r\n      } else {\r\n        item.substituteRelation('service', cartographyService).subscribe(result => {\r\n        }, error => console.error(error));\r\n      }\r\n\r\n      if (cartographySelectionService._links.self.href == '' && cartographySelectionService) {\r\n        item.deleteRelation('spatialSelectionService', cartographySelectionService).subscribe(result => {\r\n        }, error => console.error(error));\r\n      } else {\r\n        item.substituteRelation('spatialSelectionService', cartographySelectionService).subscribe(result => {\r\n        }, error => console.error(error));\r\n      }\r\n\r\n      result = this.http.put(item._links.self.href, item);\r\n\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_API), item);\r\n    }\r\n    return result;\r\n  }\r\n\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Cartography} from './cartography.model';\r\nimport {Role} from '../role/role.model';\r\n/**\r\n * Cartography group\r\n */\r\nexport class CartographyGroup extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** name*/\r\n  public name: string;\r\n  /** type*/\r\n  public type: string;\r\n  /** members*/\r\n  public members: Cartography[];\r\n  /** roles*/\r\n  public roles: Role[];\r\n\r\n}\r\n","import { CartographyGroup } from './cartography-group.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** CartographyGroup manager service */\r\n@Injectable()\r\nexport class CartographyGroupService extends RestService<CartographyGroup> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CARTOGRAPHY_GROUP_API ='cartography-groups';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CartographyGroup, \"cartography-groups\", injector);\r\n  }\r\n  \r\n  /** remove cartography group*/\r\n  remove(item: CartographyGroup) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save cartography group*/\r\n  save(item: CartographyGroup): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_GROUP_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { Territory } from '../territory/territory.model';\r\nimport { Cartography } from './cartography.model';\r\n/**\r\n * Cartography availability model\r\n */\r\nexport class CartographyAvailability extends Resource {\r\n  /** territory*/\r\n  public territory: Territory;\r\n  \r\n  /** system created date*/\r\n  public createdDate: any;\r\n  \r\n  /** cartography*/\r\n  public cartography: Cartography;\r\n}\r\n","import { CartographyAvailability } from './cartography-availability.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** CartographyAvailability manager service */\r\n@Injectable() \r\nexport class CartographyAvailabilityService extends RestService<CartographyAvailability> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CARTOGRAPHY_AVAILABILITY_API = 'cartography-availabilities';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CartographyAvailability, \"cartography-availabilities\", injector);\r\n  }\r\n  \r\n  /** remove cartography availability*/\r\n  remove(item: CartographyAvailability) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save cartography availability*/\r\n  save(item: CartographyAvailability): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.cartography !=null){\r\n          item.substituteRelation('cartography',item.cartography).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      if (item.territory !=null){\r\n          item.substituteRelation('territory',item.territory).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n    } else {\r\n      item.territory = item.territory._links.self.href;\r\n      item.cartography = item.cartography._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_AVAILABILITY_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { TerritoryType } from '../territory/territory-type.model';\r\nimport { Cartography } from './cartography.model';\r\n/**\r\n * Cartography availability model\r\n */\r\nexport class CartographyFilter extends Resource {\r\n \r\n  /** name*/\r\n  public name: string;\r\n\r\n  /** required */\r\n  public required: boolean;\r\n\r\n  /** type*/\r\n  public type: string;\r\n\r\n  /** Territorial level. */\r\n  public territorialLevel: TerritoryType;\r\n  \r\n  /** column */\r\n  public column: string;\r\n\r\n  /** values*/  \r\n  public values: string;\r\n\r\n  /** value*/  \r\n  public valueType: string;\r\n\r\n  /** cartography*/\r\n  public cartography: Cartography;\r\n\r\n\r\n}\r\n","import { CartographyFilter } from './cartography-filter.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** CartographyFilter manager service */\r\n@Injectable() \r\nexport class CartographyFilterService extends RestService<CartographyFilter> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CARTOGRAPHY_FILTER_API = 'cartography-filters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CartographyFilter, \"cartography-filters\", injector);\r\n  }\r\n  \r\n  /** remove cartography filter*/\r\n  remove(item: CartographyFilter) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save cartography availability*/\r\n  save(item: CartographyFilter): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.cartography !=null){\r\n          item.substituteRelation('cartography',item.cartography).subscribe(result => {\r\n      }, error => console.error(error));\r\n      }\r\n\r\n      if(item.territorialLevel != null && item.territorialLevel != undefined ){\r\n        item.substituteRelation('territorialLevel',item.territorialLevel).subscribe(result => {\r\n        }, error => console.error(error));\r\n      }\r\n     \r\n    } else {\r\n      \r\n      item.cartography = item.cartography._links.self.href;\r\n      item.territorialLevel=item.territorialLevel._links.self.href;\r\n      \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_FILTER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Cartography} from './cartography.model'; \r\n/**\r\n * Service parameter model\r\n */\r\nexport class CartographyParameter extends Resource {\r\n  /** name*/\r\n  public name: string;\r\n  \r\n  /** type*/\r\n  public type: string;\r\n    \r\n  /** value*/  \r\n  public value: string;\r\n  \r\n  /** order*/  \r\n  public order: string;\r\n\r\n  /** cartography*/\r\n  public cartography: Cartography;\r\n\r\n}\r\n","import { CartographyParameter } from './cartography-parameter.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Service parameter manager service */\r\n@Injectable() \r\nexport class CartographyParameterService extends RestService<CartographyParameter> {\r\n\r\n  /** API resource path */\r\n  public CARTOGRAPHY_PARAMETER_API = 'cartography-parameters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CartographyParameter, \"cartography-parameters\", injector);\r\n  }\r\n  \r\n  /** remove service parameter*/\r\n  remove(item: CartographyParameter) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save service parameter*/\r\n  save(item: CartographyParameter): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      \r\n      if (item.cartography !=null){\r\n          let cartography =  item.cartography;\r\n          delete item.cartography;\r\n          item.substituteRelation('cartography',cartography).subscribe(result => {            \r\n          \r\n      }, error => console.error(error));\r\n      }\r\n      result = this.http.put(item._links.self.href, item);\r\n      \r\n      \r\n    } else {\r\n      item.cartography = item.cartography._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_PARAMETER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {CartographyGroup} from './cartography-group.model';\r\n/**\r\n * Background model\r\n */\r\nexport class Background extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  \r\n  /** name*/\r\n  public name: string;\r\n\r\n  /** description*/\r\n  public description: string;\r\n\r\n  /** image */\r\n  public image: string;\r\n\r\n  /** whether background is active*/\r\n  public active: Boolean;\r\n  \r\n  /** system created date*/\r\n  public createdDate: any;\r\n\r\n  /** cartography group*/\r\n  public cartographyGroup: CartographyGroup;\r\n}\r\n","import { Background } from './background.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Background manager service */\r\n@Injectable()\r\nexport class BackgroundService extends RestService<Background> {\r\n\r\n  /** API resource path */\r\n  public BACKGROUND_API = 'backgrounds';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Background, \"backgrounds\", injector);\r\n  }\r\n  \r\n  /** remove background*/\r\n  remove(item: Background) {\r\n    return this.http.delete(item._links.self.href);   \r\n  }\r\n  \r\n  /** save background*/\r\n  save(item: Background): Observable<any> {\r\n    let result: Observable<Object>;\r\n    let backgroundCartographyGroup:any = {}         \r\n    \r\n    backgroundCartographyGroup._links= {};\r\n    backgroundCartographyGroup._links.self = {};\r\n    backgroundCartographyGroup._links.self.href=\"\";\r\n    item.cartographyGroup;\r\n\r\n    if (item.cartographyGroup!=null){\r\n      backgroundCartographyGroup = item.cartographyGroup;\r\n        if (typeof item.cartographyGroup._links!= 'undefined') { \r\n            item.cartographyGroup = item.cartographyGroup._links.self.href;\r\n        }    \r\n     }\r\n\r\n    if (item._links!=null) {\r\n      //update relations\r\n      delete item.cartographyGroup;        \r\n      \r\n      if (backgroundCartographyGroup._links.self.href==''){\r\n         item.deleteRelation('cartographyGroup',backgroundCartographyGroup).subscribe(result => {     \r\n\r\n          \r\n             }, error => console.error(error));\r\n          \r\n      } else {\r\n          item.substituteRelation('cartographyGroup',backgroundCartographyGroup).subscribe(result => {\r\n         \r\n\r\n      \r\n            }, error => console.error(error));           \r\n       } \r\n       \r\n         \r\n      result = this.http.put(item._links.self.href, item);\r\n\r\n           \r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.BACKGROUND_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {TreeNode} from './tree-node.model';\r\nimport {Role} from '../role/role.model';    \r\n/**\r\n * Tree model\r\n */\r\nexport class Tree extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name */\r\n  public name: string;\r\n  /** description */\r\n  public description: string;\r\n  /** image */\r\n  public image: string;\r\n  /** nodes */\r\n  public nodes: TreeNode[];\r\n  /** available roles */\r\n  public availableRoles : Role[];\r\n\r\n}\r\n","import { Tree } from './tree.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Tree manager service */\r\n@Injectable()\r\nexport class TreeService extends RestService<Tree> {\r\n  \r\n  /** API resource path */\r\n  public TREE_API = 'trees';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Tree, \"trees\", injector);\r\n  }\r\n  \r\n  /** remove tree*/\r\n  remove(item: Tree) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save tree*/\r\n  save(item: Tree): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TREE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Cartography} from '../cartography/cartography.model';\r\nimport {Tree} from './tree.model';\r\n/**\r\n * Tree node model\r\n */\r\nexport class TreeNode extends Resource {\r\n  /** name */\r\n  public name: string;\r\n  /** tooltip*/\r\n  public tooltip: string;\r\n  /** description*/\r\n  public description: string;\r\n  /** datasetURL*/\r\n  public datasetURL: string;\r\n  /** metadataURL*/\r\n  public metadataURL: string;\r\n  /** order*/\r\n  public order : number;\r\n  /** whether tree node is active*/\r\n  public active: boolean;\r\n  /** parent tree node */\r\n  public radio: boolean;\r\n  /** parent tree node */\r\n  public parent: TreeNode;\r\n  /** displayed cartography */  \r\n  public cartography: Cartography;\r\n  /** tree */  \r\n  public tree: Tree;\r\n\r\n}\r\n","import { TreeNode } from './tree-node.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Tree node manager service */\r\n@Injectable() \r\nexport class TreeNodeService extends RestService<TreeNode> {\r\n  \r\n  /** API resource path */\r\n  public TREE_NODE_API = 'tree-nodes';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TreeNode, \"tree-nodes\", injector);\r\n  }\r\n  \r\n  /** remove tree node*/\r\n  remove(item: TreeNode) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save tree node*/\r\n  save(item: TreeNode): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      const itemTree = item.tree;\r\n      const itemCartography = item.cartography;\r\n      const itemParent = item.parent;\r\n        \r\n      delete item.tree;\r\n      delete item.cartography;\r\n      delete item.parent;\r\n        \r\n      result = this.http.put(item._links.self.href, item);\r\n      if (itemTree !=null){\r\n          item.substituteRelation('tree',itemTree).subscribe(result => {\r\n      \r\n          }, error => console.error(error));\r\n      }\r\n      if (itemCartography !=null){\r\n          item.substituteRelation('cartography',itemCartography).subscribe(result => {\r\n      \r\n          }, error => console.error(error));\r\n      }\r\n      if (itemParent !=null){\r\n          item.substituteRelation('parent',itemParent).subscribe(result => {\r\n      \r\n          }, error => console.error(error));\r\n      }\r\n      else{\r\n          let treeNodeParent:any = {};\r\n          treeNodeParent._links= {};\r\n          treeNodeParent._links.self = {};\r\n          treeNodeParent._links.self.href=\"\";\r\n          item.deleteRelation('parent', treeNodeParent).subscribe(result => {\r\n        }, error => console.error(error));\r\n      }\r\n      \r\n    } else {\r\n      if (item.tree && item.tree._links && item.tree._links.self) {\r\n        item.tree = item.tree._links.self.href;\r\n      }\r\n      if (item.cartography && item.cartography._links && item.cartography._links.self) {\r\n        item.cartography = item.cartography._links.self.href;\r\n      }      \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TREE_NODE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Tree} from '../tree/tree.model';\r\nimport {Role} from '../role/role.model';\r\nimport {CartographyGroup} from '../cartography/cartography-group.model';\r\nimport {ApplicationParameter} from './application-parameter.model';\r\nimport {ApplicationBackground} from './application-background.model';\r\n\r\n//FIXME ensure application creation in admin app upon initialization (as it is done with Roles and default Users)\r\n/** Territorial appliction name */\r\nexport const TERRITORIAL_APP_NAME:string  = \"AplicaciÃ³n Territorial\";\r\n\r\n/**\r\n * Application model\r\n */\r\nexport class Application extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  \r\n  /** name*/\r\n  public name: string;\r\n\r\n  /** type*/\r\n  public type: string;\r\n  \r\n  /** title*/\r\n  public title: string;\r\n  \r\n  /** theme*/\r\n  public theme: string;\r\n\r\n    \r\n  /** urlTemplate*/\r\n  public jspTemplate: string;\r\n  \r\n  \r\n  /** system created date*/\r\n  public createdDate: any;\r\n  \r\n  /** available roles*/\r\n  public availableRoles : Role[];\r\n  \r\n  /** trees*/\r\n  public trees : Tree[];\r\n  \r\n  /** scales (comma-separated values)*/\r\n  public scales: string[];\r\n  \r\n  /** projections(comma-separated EPSG codes)*/\r\n  public srs: string;\r\n  \r\n  /** whether application tree will auto refresh*/  \r\n  public treeAutoRefresh: Boolean;\r\n\r\n  /** backgrounds*/\r\n  public backgrounds: ApplicationBackground[];\r\n\r\n  /** situation map*/\r\n  public situationMap: CartographyGroup;    \r\n  \r\n  /** parameters*/\r\n  public parameters: ApplicationParameter[];\r\n}\r\n","import { Application } from './application.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { CartographyGroup } from '../cartography/cartography-group.model';\r\n\r\n/** Application manager service */\r\n@Injectable()\r\nexport class ApplicationService extends RestService<Application> {\r\n  \r\n\r\n  /** API resource path */\r\n  public APPLICATION_API = 'applications';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Application, \"applications\", injector);\r\n  }\r\n  \r\n  /** remove application*/\r\n  remove(item: Application) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save application*/\r\n  save(item: Application): Observable<any> {\r\n    let result: Observable<Object>;\r\n\r\n    let applicationSituationMap:any = {};\r\n    applicationSituationMap._links= {};\r\n    applicationSituationMap._links.self = {};\r\n    applicationSituationMap._links.self.href=\"\";\r\n     \r\n    if (item.situationMap!=null){\r\n        applicationSituationMap=item.situationMap;\r\n        if (typeof item.situationMap._links!= 'undefined') { \r\n            item.situationMap = item.situationMap._links.self.href;\r\n        }       \r\n     }\r\n\r\n    if (item._links!=null) {\r\n      //update relations\r\n      delete item.situationMap;        \r\n      \r\n      if (applicationSituationMap._links.self.href==''){\r\n         item.deleteRelation('situationMap',applicationSituationMap).subscribe(result => {     \r\n             \r\n             }, error => console.error(error));\r\n          \r\n      } else {\r\n          item.substituteRelation('situationMap',applicationSituationMap).subscribe(result => {\r\n         \r\n      \r\n            }, error => console.error(error));           \r\n       } \r\n       \r\n         \r\n      result = this.http.put(item._links.self.href, item);\r\n\r\n           \r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.APPLICATION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n    \r\n    \r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Background} from '../cartography/background.model';\r\nimport {Application} from './application.model'; \r\n\r\n/**\r\n * Application background model\r\n */\r\nexport class ApplicationBackground extends Resource {\r\n  /** order*/\r\n  public order: Number;\r\n  \r\n  /** background*/\r\n  public background: Background;\r\n  \r\n  /** application*/\r\n  public application: Application;\r\n\r\n}\r\n","import { ApplicationBackground } from './application-background.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Application background manager service */\r\n@Injectable() \r\nexport class ApplicationBackgroundService extends RestService<ApplicationBackground> {\r\n  \r\n\r\n  /** API resource path */\r\n  public APPLICATION_BACKGROUND_API ='application-backgrounds';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(ApplicationBackground, \"application-backgrounds\", injector);\r\n  }\r\n  \r\n  /** remove application background*/\r\n  remove(item: ApplicationBackground) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save application background*/\r\n  save(item: ApplicationBackground): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.application !=null){\r\n          item.substituteRelation('application',item.application).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      if (item.background !=null){\r\n          item.substituteRelation('background',item.background).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      \r\n    } else {\r\n      item.application = item.application._links.self.href;\r\n      item.background = item.background._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.APPLICATION_BACKGROUND_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Application} from './application.model'; \r\n\r\n/**\r\n * Application parameter model \r\n */\r\nexport class ApplicationParameter extends Resource {\r\n  /** name*/\r\n  public name: string;\r\n  \r\n  /** type*/\r\n  public type: string;\r\n  \r\n  /** value*/    \r\n  public value: string;\r\n  \r\n  /** application*/\r\n  public application: Application;\r\n\r\n}\r\n","import { ApplicationParameter } from './application-parameter.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Application parameter manager service */\r\n@Injectable() \r\nexport class ApplicationParameterService extends RestService<ApplicationParameter> {\r\n  \r\n\r\n  /** API resource path */\r\n  public APPLICATION_PARAMETER_API = 'application-parameters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(ApplicationParameter, \"application-parameters\", injector);\r\n  }\r\n  \r\n  /** remove application*/\r\n  remove(item: ApplicationParameter) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save application*/\r\n  save(item: ApplicationParameter): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.application !=null){\r\n          item.substituteRelation('application',item.application).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      \r\n    } else {\r\n      item.application = item.application._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.APPLICATION_PARAMETER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Connection model\r\n */\r\nexport class CodeList extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name*/\r\n  public codeListName: string;\r\n  /** type*/\r\n  public value: string;\r\n  /** user*/\r\n  public description: string;\r\n\r\n\r\n}\r\n","import { CodeList } from './codelist.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Connection manager service */\r\n@Injectable()\r\nexport class CodeListService extends RestService<CodeList> {\r\n  \r\n \r\n  /** API resource path */\r\n  public CODELIST_API = 'codelist-values';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CodeList, \"codelist-values\", injector);\r\n  }\r\n  \r\n  /** remove connection*/\r\n  remove(item: CodeList) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save connection*/\r\n  save(item: CodeList): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CODELIST_API ), item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, of } from 'rxjs';\r\n\r\n/** Layer model: configure Layer data and displaying configuration */ \r\nexport class Layer {\r\n  // Display data\r\n  /** layer visibility*/  \r\n  visibility: boolean = false;\r\n  /** Transparency (Transparent) 0-1 (Opaque)*/\r\n  opacity: number = 1.0;\r\n\r\n  // Configuration data\r\n  /** title*/\r\n  title: string;\r\n  \r\n  /** Id to index*/\r\n  id: any;\r\n  \r\n  /** Service Name*/\r\n  serverName: string;\r\n\r\n  /** Service attributions*/\r\n  attributions: string = \"\";\r\n\r\n  /** Request format (image/jpg, ...)*/\r\n  format: string;\r\n  \r\n  /** Request service version*/\r\n  version:string;\r\n\r\n  /** Service url*/\r\n  url: string;\r\n\r\n  /** Is base layer?*/\r\n  isBaseLayer: boolean;\r\n\r\n  /** Request layer name*/\r\n  name: string;\r\n\r\n  /** Is tiled?*/\r\n  tiled: boolean;\r\n  \r\n  /** Description*/\r\n  desc: string = \"\";\r\n  \r\n  /**  Transparent request parameter?*/\r\n  url_transparent: string = \"true\";\r\n  \r\n  /** Request Background parameter color (Hexa)*/\r\n  url_bgcolor: string = \"0x000000\";\r\n  \r\n  /** Request Exception URL*/\r\n  url_exception: string;\r\n  \r\n  /** Extent for tiled services*/\r\n  extent: any = null;\r\n\r\n  /** Tile height (if not defined, the default map is taken)*/\r\n  tileHeight?:number;\r\n  \r\n  /** Tile width (if not defined, the default map is taken)*/\r\n  tileWidth?:number;\r\n  \r\n  /** Enabled for GetFeatureInfo requests (enabled to use the viewer features information tool)*/\r\n  queryable?:boolean = false;\r\n  \r\n  /** Minimum scale*/\r\n  minimumScale?:number;\r\n  \r\n  /** Maximum scale*/\r\n  maximumScale?:number;\r\n  \r\n  /** List of available CRS*/\r\n  projections?:string;\r\n  \r\n  /** Features information URL*/\r\n  infoUrl?:string;\r\n  \r\n  /** Metadata information URL*/\r\n  metadataUrl?:string;\r\n  \r\n  /** Legend URL*/\r\n  legendUrl?:string;\r\n  \r\n  /** Array of OptionalParameter object that defines other optional parameter-value pairs for the request (TIME ...)*/\r\n  optionalParameters?:Array<OptionalParameter>;\r\n}\r\n\r\n/** Optional parameter model: configure parameter-value pair to add to the request layer URL */\r\nexport class OptionalParameter {\r\n  /** key*/key:string;\r\n  /** value*/value:string;\r\n}\r\n\r\n/** Layer configuration model: modify the configuration of a layer when interacting with the map (make visible, move the layer ...) */\r\nexport class LayerConfiguration {\r\n  /** Identifier to index*/id: any;\r\n  /** Layer visibility*/visibility: boolean;\r\n  /** Layer transparency (Transparent) 0-1 (Opaque)*/opacity: number;\r\n  /** Layer position*/position: number;\r\n}\r\n\r\n/** Layer group model*/\r\nexport class LayerGroup {\r\n  /** initially activated (all visible layers)*/active?:boolean;\r\n  /** group name*/name?: String;\r\n  /** group id*/id: String;\r\n  /** array of child Layers*/layers: Array<Layer>;\r\n}\r\n\r\n/** Map options configuration model*/\r\nexport class MapOptionsConfiguration {\r\n  /** scales*/scales?: string;\r\n  /** projections*/projections?: string;\r\n  /** minimum scale*/minScale?:number;\r\n  /** maximum scale*/maxScale?:number;\r\n  /** extent*/extent?:any;\r\n  /** maximum extent*/maxExtent?:any;\r\n  /** tile width*/tileWidth?:number;\r\n  /** tile height*/tileHeight?:number;\r\n  /** parameters*/parameters?: Array<OptionalParameter>\r\n}\r\n\r\n/** Map component status model*/\r\nexport class MapComponentStatus {\r\n    /** loaded?*/loaded: boolean = false;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\n/** Map configuration manager service*/\r\nexport class MapConfigurationManagerService {\r\n  private layersSubject = new BehaviorSubject([]);\r\n  private layers: Array<Layer> = null;\r\n\r\n  private baseLayerGroupsSubject = new BehaviorSubject([]);\r\n  private baseLayerGroups: Array<LayerGroup> = null;\r\n\r\n  private layerConfigurationSubject = new BehaviorSubject([]);\r\n\r\n  private addLayersSubject = new BehaviorSubject([]);\r\n  private removeLayersSubject = new BehaviorSubject([]);\r\n\r\n  private situationMapConfigurationSubject = new BehaviorSubject([]);\r\n  private mapOptionsConfigurationSubject = new BehaviorSubject([]);\r\n\r\n  private mapComponentStatusSubject = new BehaviorSubject([]);\r\n\r\n  /** constructor*/\r\n  constructor() { \r\n   //\r\n  }\r\n  \r\n  /** layer count */\r\n  count = 0;\r\n\r\n  /** configure the overlay layers of the map, by passing as a parameter an array of objects of type Layer objects defining the layers to load.*/\r\n  loadLayersConfiguration(configuration) {\r\n    if (this.layers != null) {\r\n      this.clearLayers(false);\r\n    }\r\n    this.setLayers(configuration);\r\n  }\r\n  \r\n  /**configure the base layers of the map by passing as a parameter an array of objects of type LayerGroup each of them with the corresponding Layer objects defining the layers to load.*/\r\n  loadBaseLayersConfiguration(configuration) {\r\n    this.setBaseLayerGroups(configuration);\r\n  }\r\n\r\n  /** get base layer groups*/\r\n  getBaseLayerGroups(): Observable<LayerGroup[]> {\r\n    return this.baseLayerGroupsSubject.asObservable();\r\n  }\r\n\r\n  /** set base layer groups*/\r\n  setBaseLayerGroups(groups:Array<LayerGroup>) {\r\n    this.baseLayerGroups = groups;\r\n    this.refreshBaseLayerGroups();\r\n  }\r\n\r\n  private refreshBaseLayerGroups() {\r\n    // Send the new values so that all subscribers are updated\r\n    this.baseLayerGroupsSubject.next(this.baseLayerGroups);\r\n  }\r\n\r\n  /** get layers*/\r\n  getLayers(): Observable<Layer[]> {\r\n    return this.layersSubject.asObservable();\r\n  }\r\n\r\n  /** remove all layers from map*/\r\n  clearLayers(refresh:boolean) {\r\n    while(this.layers.length) {\r\n      this.layers.pop();\r\n    }\r\n    if (refresh) {\r\n      this.refreshLayers();\r\n    }\r\n  }\r\n\r\n  /** set layers*/\r\n  setLayers(layers:Array<Layer>) {\r\n    this.layers = layers;\r\n    this.refreshLayers();\r\n  }\r\n\r\n  /** add given layer to map*/\r\n  addLayer(layer:Layer) {\r\n    this.layers.push(layer);\r\n    this.refreshAddLayers(layer);\r\n  }\r\n\r\n  /** add given layer to map at given index*/\r\n  addLayerAt(layer:Layer, index:number) {\r\n    if (index == 0) {\r\n      this.layers = [layer].concat(this.layers);\r\n    } else if (index >= this.layers.length) {\r\n      this.layers.push(layer);\r\n    } else {\r\n      this.layers = this.layers.slice(0, index)\r\n                    .concat([layer])\r\n                    .concat(this.layers.slice(index, this.layers.length));\r\n    }\r\n    this.refreshAddLayers(layer);\r\n    this.refreshLayerConfiguration(layer.id, null, null, index);\r\n  }\r\n\r\n  /** remove given layer from map*/\r\n  removeLayer(layer:Layer) {\r\n    var index = this.layers.indexOf(layer);\r\n    this.removeLayerIndex(index);\r\n  }\r\n\r\n  /** remove layer with given id from map */\r\n  removeLayerId(id) {\r\n    var index = -1;\r\n    for (var i = 0, iLen = this.layers.length; i < iLen; i++) {\r\n      if (this.layers[i].id == id) {\r\n        index = i;\r\n        break;\r\n      }\r\n    }\r\n    this.removeLayerIndex(index);\r\n  }\r\n\r\n  /** remove layer at given index from map */\r\n  removeLayerIndex(index:number) {\r\n    var layer = this.layers[index];\r\n    this.layers.splice(index, 1);\r\n    this.refreshRemoveLayers(layer);\r\n  }\r\n\r\n  /** refresh layers */\r\n  private refreshLayers() {\r\n    // Send the new values so that all subscribers are updated\r\n    this.layersSubject.next(this.layers);\r\n  }\r\n\r\n  /** Observable for layers added */\r\n  getLayersAdded(): Observable<Layer[]> {\r\n    return this.addLayersSubject.asObservable();\r\n  }\r\n\r\n  private refreshAddLayers(layer:Layer) {\r\n    // Send the new values so that all subscribers are updated\r\n    this.addLayersSubject.next([layer]);\r\n  }\r\n\r\n  getLayersRemoved(): Observable<Layer[]> {\r\n    return this.removeLayersSubject.asObservable();\r\n  }\r\n\r\n  private refreshRemoveLayers(layer:Layer) {\r\n    // Send the new values so that all subscribers are updated\r\n    this.removeLayersSubject.next([layer]);\r\n  }\r\n\r\n  getLayerConfigurationListener(): Observable<LayerConfiguration[]> {\r\n    return this.layerConfigurationSubject.asObservable();\r\n  }\r\n\r\n  private getLayerIndexById(id:string):number{\r\n    var index = -1;\r\n    for (var i = 0, iLen = this.layers.length; i < iLen; i++) {\r\n      if (this.layers[i].id == id) {\r\n        index = i;\r\n        break;\r\n      }\r\n    }\r\n    return index;\r\n  }\r\n  \r\n  /** move layer with given id to the given index*/\r\n  moveLayer(id, index) {\r\n    var layerIndex = this.getLayerIndexById(id);\r\n    if (layerIndex != -1) {\r\n      var layer = this.layers.splice(layerIndex, 1);\r\n      this.layers = \r\n        this.layers.slice(0, index)\r\n        .concat(layer)\r\n        .concat(this.layers.slice(index, this.layers.length));\r\n    }\r\n    this.refreshLayerConfiguration(id, null, null, index);\r\n  }\r\n\r\n  /** change visibility of layer with given id to the given value*/\r\n  changeLayerVisibility(id, visibility) {\r\n    this.refreshLayerConfiguration(id, null, visibility, null);\r\n  }\r\n\r\n  /** change opacity of layer with given id to the given value*/\r\n  changeLayerOpacity(id, opacity) {\r\n    this.refreshLayerConfiguration(id, opacity, null, null);\r\n  }\r\n\r\n  private refreshLayerConfiguration(id, opacity, visibility, position) {\r\n    // Send the new values so that all subscribers are updated\r\n    var layer = new LayerConfiguration();\r\n    layer.id = id;\r\n    layer.opacity = opacity;\r\n    layer.visibility = visibility;\r\n    layer.position = position;\r\n    this.layerConfigurationSubject.next([layer]);\r\n  }\r\n\r\n  getSituationMapConfigurationListener(): Observable<Layer[]> {\r\n    return this.situationMapConfigurationSubject.asObservable();\r\n  }\r\n\r\n  /** configure the situation map of the map component by passing as a parameter an array of objects of type LayerGroup, each of them with the corresponding Layer objects defining the layers to load as situation map.*/\r\n  loadSituationMapConfiguration(layers:Array<Layer>) {\r\n    // Send the new values so that all subscribers are updated\r\n    this.situationMapConfigurationSubject.next(layers);\r\n  }\r\n\r\n  getMapOptionsConfigurationListener(): Observable<MapOptionsConfiguration[]> {\r\n    return this.mapOptionsConfigurationSubject.asObservable();\r\n  }\r\n\r\n  /** load map options configuration */\r\n  loadMapOptionsConfiguration(configuration:MapOptionsConfiguration) {\r\n    // Send the new values so that all subscribers are updated\r\n    this.mapOptionsConfigurationSubject.next([configuration]);\r\n  }\r\n\r\n  getMapComponentStatusListener(): Observable<MapComponentStatus[]> {\r\n    return this.mapComponentStatusSubject.asObservable();\r\n  }\r\n  \r\n  /** set map component status */\r\n  setMapComponentStatus(status:MapComponentStatus) {\r\n    //Notify the map component status\r\n    this.mapComponentStatusSubject.next([status]);\r\n  }\r\n\r\n}\r\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { Principal } from './principal.service';\r\n\r\n/**\r\n * @whatItDoes Conditionally includes an HTML element if current user has any\r\n * of the authorities passed as the `expression`.\r\n *\r\n * @howToUse\r\n * ```\r\n *     <some-element *sitmunHasAnyAuthority=\"'ROLE_ADMIN'\">...</some-element>\r\n *\r\n *     <some-element *sitmunHasAnyAuthority=\"['ROLE_ADMIN', 'ROLE_USER']\">...</some-element>\r\n * ```\r\n */\r\n@Directive({\r\n    selector: '[sitmunHasAnyAuthority]'\r\n})\r\nexport class HasAnyAuthorityDirective {\r\n    \r\n    /** authorities to check */\r\n    public authorities: string[]; \r\n    \r\n    /** constructor */\r\n    constructor(private principal: Principal, private templateRef: TemplateRef<any>, private viewContainerRef: ViewContainerRef) {\r\n    }\r\n    \r\n    /** territory to check authorities*/\r\n    @Input() territory: string;\r\n    \r\n    /** Set whether current user has any of the given authorities */\r\n    @Input()\r\n    set sitmunHasAnyAuthority(value: string|string[]) {\r\n        this.authorities = typeof value === 'string' ? [ <string> value ] : <string[]> value;\r\n        this.updateView();\r\n        // Get notified each time authentication state changes.\r\n        this.principal.getAuthenticationState().subscribe((identity) => this.updateView());\r\n    }\r\n    \r\n    /** update view */\r\n    private updateView(): void {\r\n        if (this.territory){\r\n        this.principal.hasAnyAuthorityOnTerritory(this.authorities,this.territory).then((result) => {\r\n            this.viewContainerRef.clear();\r\n            if (result) {\r\n                this.viewContainerRef.createEmbeddedView(this.templateRef);\r\n            }\r\n        });\r\n\r\n        } else {\r\n        this.principal.hasAnyAuthority(this.authorities).then((result) => {\r\n            this.viewContainerRef.clear();\r\n            if (result) {\r\n                this.viewContainerRef.createEmbeddedView(this.templateRef);\r\n            }\r\n        });\r\n        }\r\n    }\r\n}\r\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { Principal } from './principal.service';\r\n\r\n/**\r\n * @whatItDoes Conditionally includes an HTML element if current user has any\r\n * of the authorities passed as the `expression`.\r\n *\r\n * @howToUse\r\n * ```\r\n *     <some-element *sitmunHasAnyAuthority=\"'ROLE_ADMIN'\">...</some-element>\r\n *\r\n *     <some-element *sitmunHasAnyAuthority=\"['ROLE_ADMIN', 'ROLE_USER']\">...</some-element>\r\n * ```\r\n */\r\n@Directive({\r\n    selector: '[sitmunHasAnyAuthorityOnTerritory]'\r\n})\r\nexport class HasAnyAuthorityOnTerritoryDirective {\r\n\r\n    /** authorities to check */\r\n    public authorities: string[]; \r\n\r\n    /** territory to check authorities*/\r\n    public territory: string; \r\n\r\n    /** constructor */\r\n    constructor(private principal: Principal, private templateRef: TemplateRef<any>, private viewContainerRef: ViewContainerRef) {\r\n    }\r\n    \r\n    /** Set whether current user has any of the given authorities on territory */\r\n    @Input()\r\n    set sitmunHasAnyAuthorityOnTerritory(opts: any) {\r\n\r\n        this.authorities = typeof opts.authorities === 'string' ? [ <string> opts.authorities ] : <string[]> opts.authorities;\r\n        this.territory = opts.territory;\r\n        this.updateView();\r\n        // Get notified each time authentication state changes.\r\n        this.principal.getAuthenticationState().subscribe((identity) => this.updateView());\r\n    }\r\n    \r\n    /** update view */\r\n    private updateView(): void {\r\n        if (this.territory){\r\n        this.principal.hasAnyAuthorityOnTerritory(this.authorities,this.territory).then((result) => {\r\n            this.viewContainerRef.clear();\r\n            if (result) {\r\n                this.viewContainerRef.createEmbeddedView(this.templateRef);\r\n            }\r\n        });\r\n\r\n        } else {\r\n        this.principal.hasAnyAuthority(this.authorities).then((result) => {\r\n            this.viewContainerRef.clear();\r\n            if (result) {\r\n                this.viewContainerRef.createEmbeddedView(this.templateRef);\r\n            }\r\n        });\r\n        }\r\n    }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { CommonModule } from '@angular/common';\r\nimport {HttpClientModule, HTTP_INTERCEPTORS, HttpClient} from '@angular/common/http';\r\nimport { RouterModule } from '@angular/router';\r\n//import { AngularHalModule } from '../../lib/angular-hal';\r\nimport {CodeListService} from './codelist/codelist.service';\r\nimport {TerritoryService} from './territory/territory.service';\r\nimport {TerritoryTypeService} from './territory/territory-type.service';\r\nimport {TerritoryGroupTypeService} from './territory/territory-group-type.service';\r\nimport {UserPositionService} from './user/user-position.service';\r\nimport {UserConfigurationService} from './user/user-configuration.service';\r\nimport {RoleService} from './role/role.service';\r\nimport {UserService} from './user/user.service';\r\nimport {ConnectionService} from './connection/connection.service';\r\nimport {TaskService} from './task/task.service';\r\nimport {TaskTypeService} from './task/task-type.service';\r\nimport {TaskGroupService} from './task/task-group.service';\r\nimport {TaskParameterService} from './task/task-parameter.service';\r\nimport {TaskAvailabilityService} from './task/task-availability.service';\r\nimport {TaskUIService} from './task/task-ui.service';\r\nimport {ServiceService} from './service/service.service';\r\nimport {ServiceParameterService} from './service/service-parameter.service';\r\nimport {CartographyService} from './cartography/cartography.service';\r\nimport {CartographyAvailabilityService} from './cartography/cartography-availability.service';\r\nimport {CartographyFilterService} from './cartography/cartography-filter.service';\r\nimport {CartographyGroupService} from './cartography/cartography-group.service';\r\nimport {CartographyParameterService} from './cartography/cartography-parameter.service';\r\nimport {BackgroundService} from './cartography/background.service';\r\nimport {TreeService} from './tree/tree.service';\r\nimport {TreeNodeService} from './tree/tree-node.service';\r\nimport {ApplicationService} from './application/application.service';\r\nimport {ApplicationParameterService} from './application/application-parameter.service';\r\nimport {ApplicationBackgroundService} from './application/application-background.service';\r\nimport { MapConfigurationManagerService } from './map/map-configuration-manager.service';\r\nimport { AuthService } from './auth/auth.service';\r\nimport { Principal } from './auth/principal.service';\r\nimport { AuthInterceptor } from './auth/auth.interceptor';\r\nimport { AuthExpiredInterceptor } from './auth/auth-expired.interceptor';\r\nimport { HasAnyAuthorityDirective } from './auth/has-any-authority.directive';\r\nimport { HasAnyAuthorityOnTerritoryDirective } from './auth/has-any-authority-on-territory.directive';\r\nimport { LoginService } from './auth/login.service';\r\nimport { AccountService } from './account/account.service';\r\nimport {TranslateHttpLoader} from '@ngx-translate/http-loader';\r\nimport {TranslateLoader, TranslateModule} from '@ngx-translate/core';\r\nimport { TranslationService } from './translation/translation.service';\r\nimport { LanguageService } from './translation/language.service';\r\nimport { DashboardService } from './dashboard/dashboard.service';\r\n/** load i18n assets*/\r\nexport function createTranslateLoader(http: HttpClient) {\r\n  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\r\n}\r\n\r\n\r\n/** SITMUN frontend core module */\r\n@NgModule({\r\n  imports: [\r\n    /*RouterModule,\r\n    HttpClientModule,\r\n    CommonModule,\r\n    AngularHalModule,*/\r\n    TranslateModule.forRoot({\r\n      loader: {\r\n        provide: TranslateLoader,\r\n        useFactory: (createTranslateLoader),\r\n        deps: [HttpClient]\r\n      }\r\n    }),\r\n  ],\r\n  declarations: [\r\n    HasAnyAuthorityDirective,\r\n    HasAnyAuthorityOnTerritoryDirective,\r\n  ],\r\n  exports: [\r\n    HasAnyAuthorityDirective,\r\n    HasAnyAuthorityOnTerritoryDirective,\r\n    TranslateModule\r\n  ]\r\n})\r\nexport class SitmunFrontendCoreModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: SitmunFrontendCoreModule,\r\n      providers: [\r\n        CodeListService,\r\n        TerritoryService,\r\n        TerritoryTypeService,\r\n        TerritoryGroupTypeService,\r\n        RoleService,\r\n        AccountService,\r\n        AuthService,\r\n        UserService,\r\n        ConnectionService,\r\n        TaskService,\r\n        TaskTypeService,\r\n        TaskUIService,\r\n        TaskGroupService,\r\n        TaskParameterService,\r\n        TaskAvailabilityService,\r\n        ServiceService,\r\n        ServiceParameterService,\r\n        CartographyService,\r\n        CartographyGroupService,\r\n        CartographyAvailabilityService,\r\n        CartographyParameterService,\r\n        CartographyFilterService,\r\n        BackgroundService,\r\n        TreeService,\r\n        TreeNodeService,\r\n        ApplicationService,\r\n        ApplicationParameterService,\r\n        ApplicationBackgroundService,\r\n        AuthInterceptor,\r\n        AuthExpiredInterceptor,\r\n        Principal,\r\n        UserPositionService,\r\n        UserConfigurationService,\r\n        LoginService,\r\n        TranslationService,\r\n        LanguageService,\r\n        DashboardService,\r\n        MapConfigurationManagerService,\r\n        {\r\n          provide: HTTP_INTERCEPTORS,\r\n          useClass: AuthInterceptor,\r\n          multi: true\r\n        }\r\n        , {\r\n          provide: HTTP_INTERCEPTORS,\r\n          useClass: AuthExpiredInterceptor,\r\n          multi: true\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n\r\n","import {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {HttpClient, HttpClientModule} from '@angular/common/http';\r\nimport {HalParam, RestService} from './rest.service';\r\nimport {ExternalService} from './external.service';\r\nimport {ResourceService} from './resource.service';\r\nimport {ExternalConfigurationHandlerInterface} from './external-configuration.handler';\r\n\r\nimport 'rxjs';\r\n\r\nimport {SubTypeBuilder} from './subtype-builder';\r\n\r\nexport {ExternalService} from './external.service';\r\nexport {RestService} from './rest.service';\r\nexport {Resource} from './resource';\r\nexport {ResourceArray} from './resource-array';\r\nexport {ResourceService} from './resource.service';\r\nexport {Sort} from './sort';\r\nexport {ResourceHelper} from './resource-helper';\r\nexport {ExternalConfiguration} from './ExternalConfiguration';\r\nexport {ExternalConfigurationHandlerInterface} from './external-configuration.handler';\r\nexport {HalOptions, HalParam} from './rest.service';\r\nexport {SubTypeBuilder} from './subtype-builder';\r\n\r\n\r\n/** Angular HAL module */\r\n@NgModule({\r\n    imports: [HttpClientModule],\r\n    declarations: [],\r\n    exports: [HttpClientModule],\r\n    providers: [\r\n        ExternalService,\r\n        HttpClient,\r\n        {\r\n            provide: ResourceService,\r\n            useClass: ResourceService,\r\n            deps: [ExternalService]\r\n        }]\r\n})\r\nexport class AngularHalModule {\r\n    static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: AngularHalModule,\r\n            providers: [\r\n                ExternalService,\r\n                HttpClient,\r\n                {\r\n                    provide: ResourceService,\r\n                    useClass: ResourceService,\r\n                    deps: [ExternalService]\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}"],"names":["ResourceArray","prototype","addSortInfo","uri","this","sortInfo","_a","tslib_1.__values","_b","next","done","item","value","concat","path","order","replaceOrAdd","query","field","idx","seachValue","indexOf","idxNextAmp","substring","replace","el","_this","result","push","length","type","response","ResourceHelper","createEmptyResult","_embedded","instantiateResourceCollection","next_uri","getHttp","get","getProxy","headers","pipe","map","init","catchError","error","observableThrowError","prev_uri","first_uri","last_uri","pageNumber","self_uri","urlParsed","url.parse","pageSize","toString","sort","_i","arguments","size","optionParams","params","options","param","append","key","_d","_e","s","sortString","resolveRelations","resource","array","isNullOrUndefined","className","find","Array","isArray","forEach","element","isPrimitive","resourceArray","getClassName","obj","results","exec","constructor","objProto","classNames","Object","getPrototypeOf","payload","builder","embeddedName","keys","embeddedClassName","items","items_1","items_1_1","instance","searchSubtypes","instantiateResource","totalElements","page","totalPages","number","_links","self","href","undefined","prev","first","last","subtypes","from","subtypeKey","toLowerCase","startsWith","subtype","entity","p","setProxyUri","proxy_uri","setRootUri","root_uri","getURL","addSlash","uriParsed","search","url","setHttp","http","getRootUri","HttpHeaders","Resource","_subtypes","getRelationArray","relation","HttpParams","observableOf","getRelation","data","lastIndexOf","realClassName","addRelation","header","post","updateRelation","patch","substituteRelation","put","substituteAllRelation","resources","deleteRelation","link","relationId","delete","deleteAllRelation","Injectable","_super","User","tslib_1.__extends","ExternalService","updateExternalConfigurationHandlerInterface","externalConfigurationService","getProxyUri","getExternalConfiguration","Inject","args","ResourceService","getAll","subType","getResourceUrl","setUrls","id","setUrlsResource","getBySelfLink","resourceLink","searchSingle","customQuery","getByRelation","getByRelationArray","count","observe","Number","body","create","selfResource","status","update","updateCollection","headersReq","set","hasNext","hasPrev","hasFirst","hasLast","sortElements","apply","__spread","endsWith","proxyUrl","externalService","rootUrl","RestService","handleError","resourceService","mergeMap","notPaged","selfLink","totalElement","injector","AccountService","ACCOUNT_API","save","changePassword","Injector","HttpClient","call","AuthService","getToken","sessionStorage","getItem","login","credentials","username","password","AUTH_API","resp","ok","jwt","id_token","storeAuthenticationToken","bind","loginWithToken","Promise","resolve","reject","setItem","isLoggedIn","isLoggedOut","logout","Observable","observer","removeItem","complete","AuthInterceptor","intercept","request","includes","clone","setHeaders","Access-Control-Allow-Origin","handle","token","Authorization","Principal","authenticate","identity","userIdentity","authenticated","authenticationState","hasAnyAuthority","authorities","hasAnyAuthorityDirect","hasAnyAuthorityOnTerritory","territory","hasAnyAuthorityDirectOnTerritory","i","authoritiesPerTerritory","hasAuthority","authority","then","hasAuthorityOnTerritory","force","account","toPromise","catch","err","isAuthenticated","isIdentityResolved","getAuthenticationState","asObservable","Subject","AuthExpiredInterceptor","do","event","HttpErrorResponse","authService","subscribe","principal","router","navigate","Router","LoginService","callback","cb","authServerProvider","DashboardService","DASHBOARD_API","DASHBOARD_EMBEDDED","providedIn","UserService","remove","USER_API","UserPosition","UserPositionService","user","console","USER_POSITION_API","UserConfiguration","UserConfigurationService","role","roleChildren","USER_CONFIGURATION_API","Territory","TerritoryService","territoryGroupType","groupType","TERRITORY_API","TerritoryType","TerritoryTypeService","TERRITORYTYPE_API","TerritoryGroupType","TerritoryGroupTypeService","TERRITORYGROUPTYPE_API","Role","RoleService","ROLE_API","Connection","ConnectionService","CONNECTION_API","testConnection","Task","TaskService","service","connection","split","cartography","ui","group","TaskType","TaskTypeService","TaskGroup","TaskGroupService","TaskParameter","TaskParameterService","task","TASK_PARAMETER_API","TaskAvailability","TaskAvailabilityService","TASK_AVAILABILITY_API","TaskUI","TaskUIService","Translation","TranslationService","language","TRANSLATION_API","Language","LanguageService","LANGUAGES_API","Service","ServiceService","serviceConnection","SERVICE_API","ServiceParameter","ServiceParameterService","SERVICE_PARAMETER_API","Cartography","CartographyService","cartographyConnection","cartographyService","cartographySelectionService","selectionService","CARTOGRAPHY_API","CartographyGroup","CartographyGroupService","CARTOGRAPHY_GROUP_API","CartographyAvailability","CartographyAvailabilityService","CARTOGRAPHY_AVAILABILITY_API","CartographyFilter","CartographyFilterService","territorialLevel","CARTOGRAPHY_FILTER_API","CartographyParameter","CartographyParameterService","CARTOGRAPHY_PARAMETER_API","Background","BackgroundService","backgroundCartographyGroup","cartographyGroup","BACKGROUND_API","Tree","TreeService","TREE_API","TreeNode","TreeNodeService","itemTree","itemCartography","treeNodeParent","tree","itemParent","parent","TREE_NODE_API","Application","ApplicationService","applicationSituationMap","situationMap","APPLICATION_API","ApplicationBackground","ApplicationBackgroundService","application","background","APPLICATION_BACKGROUND_API","ApplicationParameter","ApplicationParameterService","APPLICATION_PARAMETER_API","CodeList","CodeListService","CODELIST_API","Layer","OptionalParameter","LayerConfiguration","LayerGroup","MapOptionsConfiguration","MapComponentStatus","MapConfigurationManagerService","loadLayersConfiguration","configuration","layers","clearLayers","setLayers","loadBaseLayersConfiguration","setBaseLayerGroups","getBaseLayerGroups","baseLayerGroupsSubject","groups","baseLayerGroups","refreshBaseLayerGroups","getLayers","layersSubject","refresh","pop","refreshLayers","addLayer","layer","refreshAddLayers","addLayerAt","index","slice","refreshLayerConfiguration","removeLayer","removeLayerIndex","removeLayerId","iLen","splice","refreshRemoveLayers","getLayersAdded","addLayersSubject","getLayersRemoved","removeLayersSubject","getLayerConfigurationListener","layerConfigurationSubject","getLayerIndexById","moveLayer","layerIndex","changeLayerVisibility","visibility","changeLayerOpacity","opacity","position","getSituationMapConfigurationListener","situationMapConfigurationSubject","loadSituationMapConfiguration","getMapOptionsConfigurationListener","mapOptionsConfigurationSubject","loadMapOptionsConfiguration","getMapComponentStatusListener","mapComponentStatusSubject","setMapComponentStatus","BehaviorSubject","defineProperty","HasAnyAuthorityDirective","updateView","viewContainerRef","clear","createEmbeddedView","templateRef","Directive","selector","TemplateRef","ViewContainerRef","Input","HasAnyAuthorityOnTerritoryDirective","opts","createTranslateLoader","TranslateHttpLoader","SitmunFrontendCoreModule","forRoot","ngModule","providers","provide","HTTP_INTERCEPTORS","useClass","multi","NgModule","imports","TranslateModule","loader","TranslateLoader","useFactory","ɵ0","deps","declarations","exports","AngularHalModule","HttpClientModule"],"mappings":"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"}