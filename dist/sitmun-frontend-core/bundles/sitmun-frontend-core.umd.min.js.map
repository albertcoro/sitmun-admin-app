{"version":3,"sources":["ng://@sitmun/frontend-core/angular-hal/src/lib/resource-array.ts","ng://@sitmun/frontend-core/angular-hal/src/lib/resource-helper.ts","ng://@sitmun/frontend-core/angular-hal/src/lib/resource.ts","ng://@sitmun/frontend-core/user/user.model.ts","ng://@sitmun/frontend-core/angular-hal/src/lib/external.service.ts","ng://@sitmun/frontend-core/angular-hal/src/lib/resource.service.ts","ng://@sitmun/frontend-core/angular-hal/src/lib/rest.service.ts","ng://@sitmun/frontend-core/account/account.service.ts","ng://@sitmun/frontend-core/auth/auth.service.ts","ng://@sitmun/frontend-core/auth/auth.interceptor.ts","ng://@sitmun/frontend-core/auth/principal.service.ts","ng://@sitmun/frontend-core/auth/auth-expired.interceptor.ts","ng://@sitmun/frontend-core/auth/login.service.ts","ng://@sitmun/frontend-core/dashboard/dashboard.service.ts","ng://@sitmun/frontend-core/user/user.service.ts","ng://@sitmun/frontend-core/user/user-position.model.ts","ng://@sitmun/frontend-core/user/user-position.service.ts","ng://@sitmun/frontend-core/user/user-configuration.model.ts","ng://@sitmun/frontend-core/user/user-configuration.service.ts","ng://@sitmun/frontend-core/territory/territory.model.ts","ng://@sitmun/frontend-core/territory/territory.service.ts","ng://@sitmun/frontend-core/territory/territory-type.model.ts","ng://@sitmun/frontend-core/territory/territory-type.service.ts","ng://@sitmun/frontend-core/territory/territory-group-type.model.ts","ng://@sitmun/frontend-core/territory/territory-group-type.service.ts","ng://@sitmun/frontend-core/role/role.model.ts","ng://@sitmun/frontend-core/role/role.service.ts","ng://@sitmun/frontend-core/connection/connection.model.ts","ng://@sitmun/frontend-core/connection/connection.service.ts","ng://@sitmun/frontend-core/task/task.model.ts","ng://@sitmun/frontend-core/task/task.service.ts","ng://@sitmun/frontend-core/task/task-type.model.ts","ng://@sitmun/frontend-core/task/task-type.service.ts","ng://@sitmun/frontend-core/task/task-group.model.ts","ng://@sitmun/frontend-core/task/task-group.service.ts","ng://@sitmun/frontend-core/task/task-parameter.model.ts","ng://@sitmun/frontend-core/task/task-parameter.service.ts","ng://@sitmun/frontend-core/task/task-availability.model.ts","ng://@sitmun/frontend-core/task/task-availability.service.ts","ng://@sitmun/frontend-core/task/task-ui.model.ts","ng://@sitmun/frontend-core/task/task-ui.service.ts","ng://@sitmun/frontend-core/translation/translation.model.ts","ng://@sitmun/frontend-core/translation/translation.service.ts","ng://@sitmun/frontend-core/translation/language.model.ts","ng://@sitmun/frontend-core/translation/language.service.ts","ng://@sitmun/frontend-core/service/service.model.ts","ng://@sitmun/frontend-core/service/service.service.ts","ng://@sitmun/frontend-core/configuration/configuration-parameters.model.ts","ng://@sitmun/frontend-core/configuration/configuration-parameters.service.ts","ng://@sitmun/frontend-core/service/service-parameter.model.ts","ng://@sitmun/frontend-core/service/service-parameter.service.ts","ng://@sitmun/frontend-core/capabilities/capabilitie.model.ts","ng://@sitmun/frontend-core/capabilities/capabilities.service.ts","ng://@sitmun/frontend-core/getInfo/info.model.ts","ng://@sitmun/frontend-core/getInfo/getInfo.service.ts","ng://@sitmun/frontend-core/cartography/cartography.model.ts","ng://@sitmun/frontend-core/cartography/cartography.service.ts","ng://@sitmun/frontend-core/cartography/cartography-group.model.ts","ng://@sitmun/frontend-core/cartography/cartography-group.service.ts","ng://@sitmun/frontend-core/cartography/cartography-availability.model.ts","ng://@sitmun/frontend-core/cartography/cartography-availability.service.ts","ng://@sitmun/frontend-core/cartography/cartography-filter.model.ts","ng://@sitmun/frontend-core/cartography/cartography-filter.service.ts","ng://@sitmun/frontend-core/cartography/cartography-parameter.model.ts","ng://@sitmun/frontend-core/cartography/cartography-parameter.service.ts","ng://@sitmun/frontend-core/cartography/cartography-spatial-selection-parameter.service.ts","ng://@sitmun/frontend-core/cartography/cartography-style.model.ts","ng://@sitmun/frontend-core/cartography/cartography-style.service.ts","ng://@sitmun/frontend-core/cartography/background.model.ts","ng://@sitmun/frontend-core/cartography/background.service.ts","ng://@sitmun/frontend-core/tree/tree.model.ts","ng://@sitmun/frontend-core/tree/tree.service.ts","ng://@sitmun/frontend-core/tree/tree-node.model.ts","ng://@sitmun/frontend-core/tree/tree-node.service.ts","ng://@sitmun/frontend-core/application/application.model.ts","ng://@sitmun/frontend-core/application/application.service.ts","ng://@sitmun/frontend-core/application/application-background.model.ts","ng://@sitmun/frontend-core/application/application-background.service.ts","ng://@sitmun/frontend-core/application/application-parameter.model.ts","ng://@sitmun/frontend-core/application/application-parameter.service.ts","ng://@sitmun/frontend-core/codelist/codelist.model.ts","ng://@sitmun/frontend-core/codelist/codelist.service.ts","ng://@sitmun/frontend-core/map/map-configuration-manager.service.ts","ng://@sitmun/frontend-core/auth/has-any-authority.directive.ts","ng://@sitmun/frontend-core/auth/has-any-authority-on-territory.directive.ts","ng://@sitmun/frontend-core/sitmun-frontend-core.module.ts","ng://@sitmun/frontend-core/angular-hal/src/lib/angular-hal.module.ts"],"sourcesContent":["\r\nimport {throwError as observableThrowError} from 'rxjs';\r\n\r\nimport {catchError, map} from 'rxjs/operators';\r\nimport {Sort} from './sort';\r\nimport {ArrayInterface} from './array-interface';\r\nimport {ResourceHelper} from './resource-helper';\r\nimport {Resource} from './resource';\r\nimport * as url from 'url';\r\nimport {Observable} from 'rxjs';\r\n\r\n/** REST array of resource implementation */\r\nexport class ResourceArray<T extends Resource> implements ArrayInterface<T> {\r\n    /** sorting info */\r\n    public sortInfo: Sort[];\r\n    /** proxy url */\r\n    public proxyUrl: string;\r\n    /** root url */\r\n    public rootUrl: string;\r\n\r\n    /** self url */\r\n    public self_uri: string;\r\n    /** next resource url */\r\n    public next_uri: string;\r\n    /** previous resource url */\r\n    public prev_uri: string;\r\n    /** first resource url */\r\n    public first_uri: string;\r\n    /** last resource url */\r\n    public last_uri: string;\r\n\r\n    /** embedded array list */\r\n    public _embedded;\r\n\r\n    /** total number of elements in this array */\r\n    public totalElements = 0;\r\n    /** total number of pages in the response */\r\n    public totalPages = 1;\r\n    \r\n    /** page number in the response */\r\n    public pageNumber = 1;\r\n    \r\n    /** page size */\r\n    public pageSize: number;\r\n\r\n    /** array components */\r\n    public result: T[] = [];\r\n\r\n    /** push a new resource to the array */\r\n    push = (el: T) => {\r\n        this.result.push(el);\r\n    };\r\n\r\n    /** length of the array */\r\n    length = (): number => {\r\n        return this.result.length;\r\n    };\r\n\r\n    /** load array data from REST request */\r\n    private init = (type: { new(): T }, response: any, sortInfo: Sort[]): ResourceArray<T> => {\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(this._embedded);\r\n        result.sortInfo = sortInfo;\r\n        ResourceHelper.instantiateResourceCollection(type, response, result);\r\n        return result;\r\n    };\r\n\r\n    /** Load next page */\r\n    next = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.next_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.next_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no next defined');\r\n    };\r\n\r\n    /** Load previous page */\r\n    prev = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.prev_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.prev_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no prev defined');\r\n    };\r\n\r\n    /** Load first page */\r\n    first = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.first_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.first_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no first defined');\r\n    };\r\n\r\n    /** Load last page */\r\n    last = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.last_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.last_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no last defined');\r\n    };\r\n\r\n    /** Load page with given pageNumber*/\r\n    page = (type: { new(): T }, pageNumber: number): Observable<ResourceArray<T>> => {\r\n        this.self_uri = this.self_uri.replace('{?page,size,sort}', '');\r\n        this.self_uri = this.self_uri.replace('{&sort}', '');\r\n        let urlParsed = url.parse(ResourceHelper.getProxy(this.self_uri));\r\n        let query: string = ResourceArray.replaceOrAdd(urlParsed.query, 'size', this.pageSize.toString());\r\n        query = ResourceArray.replaceOrAdd(query, 'page', pageNumber.toString());\r\n\r\n\r\n        let uri = urlParsed.query ?\r\n            ResourceHelper.getProxy(this.self_uri).replace(urlParsed.query, query) : ResourceHelper.getProxy(this.self_uri).concat(query);\r\n        uri = this.addSortInfo(uri);\r\n        return ResourceHelper.getHttp().get(uri, {headers: ResourceHelper.headers}).pipe(\r\n            map(response => this.init(type, response, this.sortInfo)),\r\n            catchError(error => observableThrowError(error)),);\r\n    };\r\n\r\n    /** Sort collection based on given sort attribute */\r\n    sortElements = (type: { new(): T }, ...sort: Sort[]): Observable<ResourceArray<T>> => {\r\n        this.self_uri = this.self_uri.replace('{?page,size,sort}', '');\r\n        this.self_uri = this.self_uri.replace('{&sort}', '');\r\n        let uri = ResourceHelper.getProxy(this.self_uri).concat('?', 'size=', this.pageSize.toString(), '&page=', this.pageNumber.toString());\r\n        uri = this.addSortInfo(uri);\r\n        return ResourceHelper.getHttp().get(uri, {headers: ResourceHelper.headers}).pipe(\r\n            map(response => this.init(type, response, sort)),\r\n            catchError(error => observableThrowError(error)),);\r\n    };\r\n\r\n    /** Load page with given size */\r\n    size = (type: { new(): T }, size: number): Observable<ResourceArray<T>> => {\r\n        let uri = ResourceHelper.getProxy(this.self_uri).concat('?', 'size=', size.toString());\r\n        uri = this.addSortInfo(uri);\r\n        return ResourceHelper.getHttp().get(uri, {headers: ResourceHelper.headers}).pipe(\r\n            map(response => this.init(type, response, this.sortInfo)),\r\n            catchError(error => observableThrowError(error)),);\r\n    };\r\n\r\n    /** Add sort info to given URI */\r\n    private addSortInfo(uri: string) {\r\n        if (this.sortInfo) {\r\n            for (const item of this.sortInfo) {\r\n                uri = uri.concat('&sort=', item.path, ',', item.order);\r\n            }\r\n        }\r\n        return uri;\r\n    }\r\n\r\n    /** Add replace or add param value to query string */\r\n    private static replaceOrAdd(query: string, field: string, value: string): string {\r\n        if (query) {\r\n            let idx: number = query.indexOf(field);\r\n            let idxNextAmp: number = query.indexOf('&', idx) == -1 ? query.indexOf('/', idx) : query.indexOf('&', idx);\r\n\r\n            if (idx != -1) {\r\n                let seachValue = query.substring(idx, idxNextAmp);\r\n                query = query.replace(seachValue, field + '=' + value);\r\n            } else {\r\n                query = query.concat(\"&\" + field + '=' + value);\r\n            }\r\n        } else {\r\n            query = \"?\" + field + '=' + value;\r\n        }\r\n        return query;\r\n    }\r\n}\r\n","import {HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';\r\nimport {Resource} from './resource';\r\nimport {ResourceArray} from './resource-array';\r\nimport {HalOptions} from './rest.service';\r\nimport {SubTypeBuilder} from './subtype-builder';\r\nimport {isNullOrUndefined, isPrimitive} from 'util';\r\nimport * as url from 'url';\r\n\r\n/** REST API access helper */\r\nexport class ResourceHelper {\r\n\r\n    /** HttpHeaders */\r\n    public static headers: HttpHeaders = new HttpHeaders();\r\n    /** Proxy URL */\r\n    private static proxy_uri: string = null;\r\n    /** Root URL */\r\n    private static root_uri: string = null;\r\n    /** HttpClient */\r\n    private static http: HttpClient = null;\r\n\r\n    /** get request headers */\r\n    /*public static get headers(): HttpHeaders {\r\n        if (isNullOrUndefined(this._headers))\r\n          ResourceHelper._headers = new HttpHeaders();\r\n        return ResourceHelper._headers;\r\n    }*/\r\n\r\n    /** set request headers */\r\n    /*public static set headers(headers: HttpHeaders) {\r\n      ResourceHelper._headers = headers;\r\n    }*/\r\n\r\n    /** get request option params */\r\n    static optionParams(params: HttpParams, options?: HalOptions): HttpParams {\r\n        if (options) {\r\n\r\n            if (options.params) {\r\n                for (const param of options.params) {\r\n                    params = params.append(param.key, param.value.toString());\r\n                }\r\n            }\r\n\r\n            if (options.size) {\r\n                params = params.append('size', options.size.toString());\r\n            }\r\n\r\n            if (options.sort) {\r\n                for (const s of options.sort) {\r\n                    let sortString = '';\r\n                    sortString = s.path ? sortString.concat(s.path) : sortString;\r\n                    sortString = s.order ? sortString.concat(',').concat(s.order) : sortString;\r\n                    params = params.append('sort', sortString);\r\n                }\r\n            }\r\n\r\n        }\r\n        return params;\r\n    }\r\n\r\n    /** resolve resource relations */\r\n    static resolveRelations(resource: Resource): Object {\r\n        const result: any = {};\r\n        for (const key in resource) {\r\n            if (!isNullOrUndefined(resource[key])) {\r\n                if (ResourceHelper.className(resource[key])\r\n                    .find((className: string) => className == 'Resource')) {\r\n                    if (resource[key]['_links'])\r\n                        result[key] = resource[key]['_links']['self']['href'];\r\n                } else if (Array.isArray(resource[key])) {\r\n                    let array: any[] = resource[key];\r\n                    if (array) {\r\n                        result[key] = new Array();\r\n                        array.forEach((element) => {\r\n                            if (isPrimitive(element)) {\r\n                                result[key].push(element);\r\n                            }\r\n                            else {\r\n                                result[key].push(this.resolveRelations(element));\r\n                            }\r\n                        });\r\n                    }\r\n                } else {\r\n                    result[key] = resource[key];\r\n                }\r\n            }\r\n        }\r\n        return result as Object;\r\n    }\r\n\r\n    /** create an empty resource from embedded data*/\r\n    static createEmptyResult<T extends Resource>(_embedded: string): ResourceArray<T> {\r\n        let resourceArray: ResourceArray<T> = new ResourceArray<T>();\r\n        resourceArray._embedded = _embedded;\r\n        return resourceArray;\r\n    }\r\n\r\n    /** get resource class name*/\r\n    static getClassName(obj: any): string {\r\n        var funcNameRegex = /function (.+?)\\(/;\r\n        var results = (funcNameRegex).exec(obj.constructor.toString());\r\n        return (results && results.length > 1) ? results[1] : '';\r\n    }\r\n\r\n    \r\n    /** get resource class name from a prototype object*/\r\n    static className(objProto: any): string[] {\r\n        let classNames = [];\r\n        let obj = Object.getPrototypeOf(objProto);\r\n        let className: string;\r\n\r\n        while ((className = ResourceHelper.getClassName(obj)) !== 'Object') {\r\n            classNames.push(className);\r\n            obj = Object.getPrototypeOf(obj);\r\n        }\r\n\r\n        return classNames;\r\n    }\r\n\r\n    /** instantiate a ResourceCollection from response embedded data*/\r\n    static instantiateResourceCollection<T extends Resource>(type: { new(): T }, payload: any,\r\n                                                             result: ResourceArray<T>, builder?: SubTypeBuilder,embeddedName?:String): ResourceArray<T> {\r\n        for (const embeddedClassName of Object.keys(payload[result._embedded])) {\r\n            if(!embeddedName || (embeddedName && embeddedClassName==embeddedName)){\r\n                let embedded: any = payload[result._embedded];\r\n                const items = embedded[embeddedClassName];\r\n                for (let item of items) {\r\n                    let instance: T = new type();\r\n                    instance = this.searchSubtypes(builder, embeddedClassName, instance);\r\n\r\n                    this.instantiateResource(instance, item);\r\n                    result.push(instance);\r\n                }\r\n            }\r\n        }\r\n\r\n        result.totalElements = payload.page ? payload.page.totalElements : result.length;\r\n        result.totalPages = payload.page ? payload.page.totalPages : 1;\r\n        result.pageNumber = payload.page ? payload.page.number : 1;\r\n        result.pageSize = payload.page ? payload.page.size : 20;\r\n\r\n        result.self_uri = payload._links && payload._links.self ? payload._links.self.href : undefined;\r\n        result.next_uri = payload._links && payload._links.next ? payload._links.next.href : undefined;\r\n        result.prev_uri = payload._links && payload._links.prev ? payload._links.prev.href : undefined;\r\n        result.first_uri = payload._links && payload._links.first ? payload._links.first.href : undefined;\r\n        result.last_uri = payload._links && payload._links.last ? payload._links.last.href : undefined;\r\n        return result;\r\n    }\r\n\r\n    /** search subtypes*/\r\n    static searchSubtypes<T extends Resource>(builder: SubTypeBuilder, embeddedClassName: string, instance: T) {\r\n        if (builder && builder.subtypes) {\r\n            let keys = builder.subtypes.keys();\r\n            Array.from(keys).forEach((subtypeKey: string) => {\r\n                if (embeddedClassName.toLowerCase().startsWith(subtypeKey.toLowerCase())) {\r\n                    let subtype: { new(): any } = builder.subtypes.get(subtypeKey);\r\n                    instance = new subtype();\r\n                }\r\n            });\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    /** instantiate a Resource from response */\r\n    static instantiateResource<T extends Resource>(entity: T, payload: Object): T {\r\n        for (const p in payload) {\r\n            //TODO array init\r\n            /* if(entity[p].constructor === Array && isNullOrUndefined(payload[p]))\r\n                 entity[p] = [];\r\n             else*/\r\n            entity[p] = payload[p];\r\n        }\r\n        return entity;\r\n    }\r\n\r\n    /** set proxy URL */\r\n    static setProxyUri(proxy_uri: string) {\r\n        ResourceHelper.proxy_uri = proxy_uri;\r\n    }\r\n\r\n    /** set Root URI */\r\n    static setRootUri(root_uri: string) {\r\n        ResourceHelper.root_uri = root_uri;\r\n    }\r\n\r\n    /** get proxy URL */\r\n    public static getURL(): string {\r\n        return ResourceHelper.proxy_uri && ResourceHelper.proxy_uri != '' ?\r\n            ResourceHelper.addSlash(ResourceHelper.proxy_uri) :\r\n            ResourceHelper.addSlash(ResourceHelper.root_uri);\r\n    }\r\n\r\n    /** add slash to URI */\r\n    private static addSlash(uri: string): string {\r\n        let uriParsed = url.parse(uri);\r\n        if (isNullOrUndefined(uriParsed.search) && uri && uri[uri.length - 1] != '/')\r\n            return uri + '/';\r\n        return uri;\r\n    }\r\n\r\n    /** get proxy from URL */\r\n    public static getProxy(url: string): string {\r\n        if (!ResourceHelper.proxy_uri || ResourceHelper.proxy_uri == '')\r\n            return url;\r\n        return ResourceHelper.addSlash(url.replace(ResourceHelper.root_uri, ResourceHelper.proxy_uri));\r\n    }\r\n\r\n    /** set HttpClient*/\r\n    public static setHttp(http: HttpClient) {\r\n        ResourceHelper.http = http;\r\n    }\r\n\r\n    /** get HttpClient*/\r\n    public static getHttp(): HttpClient {\r\n        return ResourceHelper.http;\r\n    }\r\n\r\n    /** get root URI*/\r\n    static getRootUri() {\r\n        return ResourceHelper.root_uri;\r\n    }\r\n}\r\n","\r\nimport {throwError as observableThrowError, of as observableOf} from 'rxjs';\r\n\r\nimport {map} from 'rxjs/operators';\r\n\r\n\r\nimport {HttpParams} from '@angular/common/http';\r\nimport {ResourceHelper} from './resource-helper';\r\nimport {ResourceArray} from './resource-array';\r\nimport {isNullOrUndefined} from 'util';\r\n\r\nimport {HalOptions} from './rest.service';\r\nimport {SubTypeBuilder} from './subtype-builder';\r\nimport {Injectable} from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\n\r\n/** Abstract resource class*/\r\n@Injectable()\r\nexport abstract class Resource {\r\n\r\n    /** proxy URL */\r\n    public proxyUrl: string;\r\n    /** root URL */\r\n    public rootUrl: string;\r\n\r\n    /** links */\r\n    public _links: any;\r\n    /** subtypes */\r\n    public _subtypes: Map<string, any>;\r\n\r\n    \r\n    /** get subtypes */    \r\n    public get subtypes(): Map<string, any> {\r\n        return this._subtypes;\r\n    }\r\n\r\n    /** set subtypes */\r\n    public set subtypes(_subtypes: Map<string, any>) {\r\n        this._subtypes = _subtypes;\r\n    }\r\n\r\n    /** constructor*/\r\n    constructor() {\r\n    }\r\n\r\n    /** Get collection of related resources */\r\n    public getRelationArray<T extends Resource>(type: { new(): T }, relation: string, _embedded?: string, options?: HalOptions, builder?: SubTypeBuilder): Observable<T[]> {\r\n\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(isNullOrUndefined(_embedded) ? \"_embedded\" : _embedded);\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let observable = ResourceHelper.getHttp().get(ResourceHelper.getProxy(this._links[relation].href), {\r\n                headers: ResourceHelper.headers,\r\n                params: params\r\n            });\r\n            return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection<T>(type, response, result, builder)),\r\n                map((array: ResourceArray<T>) => array.result),);\r\n        } else {\r\n            return observableOf([]);\r\n        }\r\n    }\r\n\r\n    /** Get related resource */\r\n    public getRelation<T extends Resource>(type: { new(): T }, relation: string, builder?: SubTypeBuilder): Observable<T> {\r\n        let result: T = new type();\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let observable = ResourceHelper.getHttp().get(ResourceHelper.getProxy(this._links[relation].href), {headers: ResourceHelper.headers});\r\n            return observable.pipe(map((data: any) => {\r\n                if (builder) {\r\n                    for (const embeddedClassName of Object.keys(data['_links'])) {\r\n                        if (embeddedClassName == 'self') {\r\n                            let href: string = data._links[embeddedClassName].href;\r\n                            let idx: number = href.lastIndexOf('/');\r\n                            let realClassName = href.replace(ResourceHelper.getRootUri(), \"\").substring(0, idx);\r\n                            result = ResourceHelper.searchSubtypes(builder, realClassName, result);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                return ResourceHelper.instantiateResource(result, data);\r\n            }));\r\n        } else {\r\n            return observableOf(null);\r\n        }\r\n    }\r\n\r\n    /** Adds the given resource to the bound collection by the relation */\r\n    public addRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().post(ResourceHelper.getProxy(this._links[relation].href), resource._links.self.href, {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n\r\n    /** Bind the given resource to this resource by the given relation*/\r\n    public updateRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().patch(ResourceHelper.getProxy(this._links[relation].href), resource._links.self.href, {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n\r\n    /** Bind the given resource to this resource by the given relation*/\r\n    public substituteRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().put(ResourceHelper.getProxy(this._links[relation].href), resource._links.self.href, {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n    \r\n    \r\n    /** Bind the given resource to this resource by the given relation*/\r\n    public substituteAllRelation<T extends Resource>(relation: string, resources: Resource[]): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().put(ResourceHelper.getProxy(this._links[relation].href), resources.map((resource) => resource._links.self.href), {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /** Unbind the resource with the given relation from this resource*/\r\n    public deleteRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(resource._links)) {\r\n            let link: string = resource._links['self'].href;\r\n            let idx: number = link.lastIndexOf('/') + 1;\r\n\r\n            if (idx == -1)\r\n                return observableThrowError('no relation found');\r\n\r\n            let relationId: string = link.substring(idx);\r\n            return ResourceHelper.getHttp().delete(ResourceHelper.getProxy(this._links[relation].href + '/' + relationId), {headers: ResourceHelper.headers});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n    \r\n    /** Unbind the resource with the given relation from this resource*/\r\n    public deleteAllRelation<T extends Resource>(relation: string): Observable<any> {\r\n        return ResourceHelper.getHttp().delete(ResourceHelper.getProxy(this._links[relation].href ), {headers: ResourceHelper.headers});\r\n        \r\n    }\r\n\r\n}","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { UserConfiguration } from './user-configuration.model';\r\nimport { UserPosition } from './user-position.model';\r\n\r\n/**\r\n * User model\r\n */\r\nexport class User extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** username */\r\n  public username: string;\r\n  /** password */\r\n  public password: string;\r\n  /** first name */\r\n  public firstName: string;\r\n  /** last name */\r\n  public lastName: string;\r\n  /** whether user is blocked */\r\n  public blocked: boolean;\r\n  /** whether user is administrator */\r\n  public administrator: boolean;\r\n  /** Is passwordSet */\r\n  public passwordSet: boolean;\r\n  /** user positions */\r\n  public positions: UserPosition[];\r\n  /** user permissions */\r\n  public permissions: UserConfiguration[];\r\n}\r\n","import {HttpClient} from '@angular/common/http';\r\nimport {Inject, Injectable} from '@angular/core';\r\nimport {ResourceHelper} from './resource-helper';\r\nimport {ExternalConfigurationHandlerInterface} from './external-configuration.handler';\r\nimport {ExternalConfiguration} from './ExternalConfiguration';\r\n\r\n\r\n/** ExternalService */\r\n@Injectable()\r\nexport class ExternalService {\r\n\r\n    /** constructor */\r\n    constructor(@Inject('ExternalConfigurationService') private externalConfigurationService: ExternalConfigurationHandlerInterface) {\r\n        ResourceHelper.setProxyUri(externalConfigurationService.getProxyUri());\r\n        ResourceHelper.setRootUri(externalConfigurationService.getRootUri());\r\n        ResourceHelper.setHttp(externalConfigurationService.getHttp());\r\n    }\r\n\r\n    /** update ExternalConfigurationHandler */\r\n    public updateExternalConfigurationHandlerInterface(externalConfigurationService: ExternalConfigurationHandlerInterface) {\r\n\tthis.externalConfigurationService = externalConfigurationService;\r\n\r\n        ResourceHelper.setProxyUri(externalConfigurationService.getProxyUri());\r\n        ResourceHelper.setRootUri(externalConfigurationService.getRootUri());\r\n        ResourceHelper.setHttp(externalConfigurationService.getHttp());\r\n    }\r\n\r\n    /** get ExternalConfiguration */\r\n    public getExternalConfiguration(): ExternalConfiguration {\r\n        return this.externalConfigurationService.getExternalConfiguration();\r\n    }\r\n\r\n    /** get proxy URL */\r\n    public getProxyUri(): string {\r\n        return this.externalConfigurationService.getProxyUri();\r\n    }\r\n\r\n    /** get Root URI */\r\n    public getRootUri(): string {\r\n        return this.externalConfigurationService.getRootUri();\r\n    }\r\n\r\n    /** get URL */\r\n    public getURL(): string {\r\n        return ResourceHelper.getURL();\r\n    }\r\n\r\n    /** get HttpClient */\r\n    public getHttp(): HttpClient {\r\n        return ResourceHelper.getHttp();\r\n    }\r\n}\r\n","\r\nimport { throwError as observableThrowError } from 'rxjs';\r\n\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { Resource } from './resource';\r\nimport { ResourceHelper } from './resource-helper';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Sort } from './sort';\r\nimport { ResourceArray } from './resource-array';\r\nimport { ExternalService } from './external.service';\r\nimport { HalOptions } from './rest.service';\r\nimport { SubTypeBuilder } from './subtype-builder';\r\nimport { Observable } from 'rxjs';\r\n\r\n/** ResourceService */\r\n@Injectable()\r\nexport class ResourceService {\r\n\r\n\r\n    /** constructor */\r\n    constructor(private externalService: ExternalService) { }\r\n\r\n\r\n    /** get URL */\r\n    private static getURL(): string {\r\n        return ResourceHelper.getURL();\r\n    }\r\n\r\n    /** get all resources from a base URI of a given type */\r\n    public getAll<T extends Resource>(type: { new(): T }, resource: string, _embedded: string, options?: HalOptions, subType?: SubTypeBuilder, embeddedName?:String, ignoreProjection?:boolean): Observable<ResourceArray<T>> {\r\n        let uri = this.getResourceUrl(resource);\r\n        if(!ignoreProjection){\r\n            uri = uri.concat('?projection=view');\r\n        }\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        result.sortInfo = options ? options.sort : undefined;\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, params: params });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result, subType,embeddedName)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** get resource from a base URI and a given id */\r\n    public get<T extends Resource>(type: { new(): T }, resource: string, id: any): Observable<T> {\r\n        const uri = this.getResourceUrl(resource).concat('/', id, '?projection=view');\r\n        const result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers });\r\n        return observable.pipe(map(data => ResourceHelper.instantiateResource(result, data)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** get resource from its selflink */\r\n    public getBySelfLink<T extends Resource>(type: { new(): T }, resourceLink: string): Observable<T> {\r\n        const result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(ResourceHelper.getProxy(resourceLink), { headers: ResourceHelper.headers });\r\n        return observable.pipe(map(data => ResourceHelper.instantiateResource(result, data)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** search resources from a given base path, query and options */\r\n    public search<T extends Resource>(type: { new(): T }, query: string, resource: string, _embedded: string, options?: HalOptions): Observable<ResourceArray<T>> {\r\n        const uri = this.getResourceUrl(resource).concat('/search/', query);\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, params: params });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** search a single resource from a given base path, query and options */\r\n    public searchSingle<T extends Resource>(type: { new(): T }, query: string, resource: string, options?: HalOptions): Observable<T> {\r\n        const uri = this.getResourceUrl(resource).concat('/search/', query);\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, params: params });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResource(result, response)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** search resources from a given base path, custom query and options */\r\n    public customQuery<T extends Resource>(type: { new(): T }, query: string, resource: string, _embedded: string, options?: HalOptions): Observable<ResourceArray<T>> {\r\n        const uri = this.getResourceUrl(resource + query);\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, params: params });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** get resource given a relation link */\r\n    public getByRelation<T extends Resource>(type: { new(): T }, resourceLink: string): Observable<T> {\r\n        let result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(resourceLink, { headers: ResourceHelper.headers });\r\n        return observable.pipe(map(data => ResourceHelper.instantiateResource(result, data)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** get resource array given a relation link */\r\n    public getByRelationArray<T extends Resource>(type: { new(): T }, resourceLink: string, _embedded: string, builder?: SubTypeBuilder): Observable<ResourceArray<T>> {\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        let observable = ResourceHelper.getHttp().get(resourceLink, { headers: ResourceHelper.headers });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result, builder)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** count resources given a path */\r\n    public count(resource: string): Observable<number> {\r\n        const uri = this.getResourceUrl(resource).concat('/search/countAll');\r\n\r\n        return ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, observe: 'body' }).pipe(\r\n            map((response: Response) => Number(response.body)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** create resource from self link and entity data*/\r\n    public create<T extends Resource>(selfResource: string, entity: T) {\r\n        const uri = ResourceHelper.getURL() + selfResource;\r\n        const payload = ResourceHelper.resolveRelations(entity);\r\n\r\n        this.setUrlsResource(entity);\r\n        let observable = ResourceHelper.getHttp().post(uri, payload, { headers: ResourceHelper.headers, observe: 'response' });\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return ResourceHelper.instantiateResource(entity, response.body);\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }), catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** update resource from a given entity data*/\r\n    public update<T extends Resource>(entity: T) {\r\n        const uri = ResourceHelper.getProxy(entity._links.self.href);\r\n        const payload = ResourceHelper.resolveRelations(entity);\r\n        this.setUrlsResource(entity);\r\n        let observable = ResourceHelper.getHttp().put(uri, payload, { headers: ResourceHelper.headers, observe: 'response' });\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return ResourceHelper.instantiateResource(entity, response.body);\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }), catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** update resource from a given entity data*/\r\n    public updateCollection<T extends Resource>(resourceArray: ResourceArray<T>, resourceLink: string) {\r\n        const uri = ResourceHelper.getProxy(resourceLink);\r\n        //const payload = ResourceHelper.resolveRelations(entity);\r\n        //this.setUrlsResource(entity);\r\n        var headersReq = ResourceHelper.headers;\r\n        headersReq.set(\"Content-Type\", \"text/uri-list\");\r\n        let observable = ResourceHelper.getHttp().put(uri, resourceArray, { headers: headersReq, observe: 'response' });\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return \"\";\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }), catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** patch resource from a given entity data*/\r\n    public patch<T extends Resource>(entity: T) {\r\n        const uri = ResourceHelper.getProxy(entity._links.self.href);\r\n        const payload = ResourceHelper.resolveRelations(entity);\r\n        this.setUrlsResource(entity);\r\n        let observable = ResourceHelper.getHttp().patch(uri, payload, { headers: ResourceHelper.headers, observe: 'response' });\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return ResourceHelper.instantiateResource(entity, response.body);\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }), catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** delete resource from a given entity data*/\r\n    public delete<T extends Resource>(entity: T): Observable<Object> {\r\n        const uri = ResourceHelper.getProxy(entity._links.self.href);\r\n        return ResourceHelper.getHttp().delete(uri, { headers: ResourceHelper.headers }).pipe(catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** whether a resource array has next page of results*/\r\n    public hasNext<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.next_uri != undefined;\r\n    }\r\n\r\n    /** whether a resource array has previous page of results*/\r\n    public hasPrev<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.prev_uri != undefined;\r\n    }\r\n\r\n    /** whether a resource array has first page of results*/\r\n    public hasFirst<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.first_uri != undefined;\r\n    }\r\n\r\n    /** whether a resource array has last page of results*/\r\n    public hasLast<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.last_uri != undefined;\r\n    }\r\n\r\n    /** get resource array next page of results*/\r\n    public next<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.next(type);\r\n    }\r\n\r\n    /** get resource array previous page of results*/\r\n    public prev<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.prev(type);\r\n    }\r\n\r\n    /** get resource array first page of results*/\r\n    public first<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.first(type);\r\n    }\r\n\r\n    /** get resource array last page of results*/\r\n    public last<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.last(type);\r\n    }\r\n\r\n    /** get resource array page of results given a page number*/\r\n    public page<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }, id: number): Observable<ResourceArray<T>> {\r\n        return resourceArray.page(type, id);\r\n    }\r\n\r\n    /** sort resource array with a given sorting params */\r\n    public sortElements<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }, ...sort: Sort[]): Observable<ResourceArray<T>> {\r\n        return resourceArray.sortElements(type, ...sort);\r\n    }\r\n\r\n    /** get resource array size*/\r\n    public size<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }, size: number): Observable<ResourceArray<T>> {\r\n        return resourceArray.size(type, size);\r\n    }\r\n\r\n    /** get resource URL from a given path*/\r\n    public getResourceUrl(resource?: string): string {\r\n        let url = ResourceService.getURL();\r\n        if (!url.endsWith('/')) {\r\n            url = url.concat('/');\r\n        }\r\n        if (resource) {\r\n            return url.concat(resource);\r\n        }\r\n        return url;\r\n    }\r\n\r\n    /** set proxy and root urls of given resource array */\r\n    private setUrls<T extends Resource>(result: ResourceArray<T>) {\r\n        result.proxyUrl = this.externalService.getProxyUri();\r\n        result.rootUrl = this.externalService.getRootUri();\r\n    }\r\n\r\n    /** set proxy and root urls of given resource */\r\n    private setUrlsResource<T extends Resource>(result: T) {\r\n        result.proxyUrl = this.externalService.getProxyUri();\r\n        result.rootUrl = this.externalService.getRootUri();\r\n    }\r\n}","import {of as observableOf, throwError as observableThrowError} from 'rxjs';\r\nimport {map, mergeMap} from 'rxjs/operators';\r\nimport {Resource} from './resource';\r\nimport {ResourceArray} from './resource-array';\r\nimport {Sort} from './sort';\r\nimport {ResourceService} from './resource.service';\r\nimport {SubTypeBuilder} from './subtype-builder';\r\nimport {isNullOrUndefined} from 'util';\r\nimport {Observable} from 'rxjs';\r\nimport {Injector} from \"@angular/core\";\r\n\r\n/** HAL param data model */\r\nexport type HalParam = { key: string, value: string | number | boolean };\r\n/** HAL option data model */\r\nexport type HalOptions = { notPaged?: boolean, size?: number, sort?: Sort[], params?: HalParam[] };\r\n\r\n/** REST API access interface */\r\nexport class RestService<T extends Resource> {\r\n    /** resource type */\r\n    private type: any;\r\n    /** resource path */\r\n    private resource: string;\r\n    /** resource array */\r\n    public resourceArray: ResourceArray<T>;\r\n    /** resource service */\r\n    public resourceService: ResourceService;\r\n    /** _embedded field name */\r\n    private _embedded: string = '_embedded';\r\n\r\n    /** constructor */\r\n    constructor(type: { new(): T },\r\n                resource: string,\r\n                private injector: Injector,\r\n                _embedded?: string) {\r\n        this.type = type;\r\n        this.resource = resource;\r\n        this.resourceService = injector.get(ResourceService);\r\n        if (!isNullOrUndefined(_embedded))\r\n            this._embedded = _embedded;\r\n    }\r\n\r\n    /** error handler */\r\n    protected handleError(error: any):Observable<never> {\r\n        return RestService.handleError(error);\r\n    }\r\n\r\n    /** error handler */\r\n    protected static handleError(error: any):Observable<never> {\r\n        return observableThrowError(error);\r\n    }\r\n\r\n    /** get all resources with optional options an subType params */\r\n    public getAll(options?: HalOptions, subType?: SubTypeBuilder, embeddedName?:String, ignoreProjection?:boolean): Observable<T[]> {\r\n        return this.resourceService.getAll(this.type, this.resource, this._embedded, options, subType,embeddedName, ignoreProjection).pipe(\r\n            mergeMap((resourceArray: ResourceArray<T>) => {\r\n                if (options && options.notPaged && !isNullOrUndefined(resourceArray.first_uri)) {\r\n                    options.notPaged = false;\r\n                    options.size = resourceArray.totalElements;\r\n                    return this.getAll(options);\r\n                } else {\r\n                    this.resourceArray = resourceArray;\r\n                    return observableOf(resourceArray.result);\r\n                }\r\n            }));\r\n    }\r\n\r\n    /** get resource from a given id */\r\n    public get(id: any): Observable<T> {\r\n        return this.resourceService.get(this.type, this.resource, id);\r\n    }\r\n\r\n    /** get resource from self link */\r\n    public getBySelfLink(selfLink: string): Observable<T> {\r\n        return this.resourceService.getBySelfLink(this.type, selfLink);\r\n    }\r\n\r\n    /** search resources from a given query string and optional options params */\r\n    public search(query: string, options?: HalOptions): Observable<T[]> {\r\n        return this.resourceService.search(this.type, query, this.resource, this._embedded, options).pipe(\r\n            mergeMap((resourceArray: ResourceArray<T>) => {\r\n                if (options && options.notPaged && !isNullOrUndefined(resourceArray.first_uri)) {\r\n                    options.notPaged = false;\r\n                    options.size = resourceArray.totalElements;\r\n                    return this.search(query, options);\r\n                } else {\r\n                    this.resourceArray = resourceArray;\r\n                    return observableOf(resourceArray.result);\r\n                }\r\n            }));\r\n    }\r\n\r\n    /** search resource from a given query string and optional options params */\r\n    public searchSingle(query: string, options?: HalOptions): Observable<T> {\r\n        return this.resourceService.searchSingle(this.type, query, this.resource, options);\r\n    }\r\n\r\n    /** search resources from a given custom query string and optional options params */\r\n    public customQuery(query: string, options?: HalOptions): Observable<T[]> {\r\n        return this.resourceService.customQuery(this.type, query, this.resource, this._embedded, options).pipe(\r\n            mergeMap((resourceArray: ResourceArray<T>) => {\r\n                if (options && options.notPaged && !isNullOrUndefined(resourceArray.first_uri)) {\r\n                    options.notPaged = false;\r\n                    options.size = resourceArray.totalElements;\r\n                    return this.customQuery(query, options);\r\n                } else {\r\n                    this.resourceArray = resourceArray;\r\n                    return observableOf(resourceArray.result);\r\n                }\r\n            }));\r\n    }\r\n\r\n\r\n    /** get resource array given a relation link */\r\n    public getByRelationArray(relation: string, builder?: SubTypeBuilder): Observable<T[]> {\r\n        return this.resourceService.getByRelationArray(this.type, relation, this._embedded, builder).pipe(\r\n            map((resourceArray: ResourceArray<T>) => {\r\n                this.resourceArray = resourceArray;\r\n                return resourceArray.result;\r\n            }));\r\n    }\r\n\r\n    /** get resource given a relation link */\r\n    public getByRelation(relation: string): Observable<T> {\r\n        return this.resourceService.getByRelation(this.type, relation);\r\n    }\r\n\r\n    /** count resources given a path */\r\n    public count(): Observable<number> {\r\n        return this.resourceService.count(this.resource);\r\n    }\r\n\r\n    /** create resource from self link and entity data*/\r\n    public create(entity: T) {\r\n        return this.resourceService.create(this.resource, entity);\r\n    }\r\n\r\n    /** update resource from a given entity data*/\r\n    public update(entity: T) {\r\n        return this.resourceService.update(entity);\r\n    }\r\n\r\n    /** patch resource from a given entity data*/\r\n    public patch(entity: T) {\r\n        return this.resourceService.patch(entity);\r\n    }\r\n\r\n    /** delete resource from a given entity data*/\r\n    public delete(entity: T): Observable<Object> {\r\n        return this.resourceService.delete(entity);\r\n    }\r\n\r\n    /** get total number of elements of resource array */\r\n    public totalElement(): number {\r\n        if (this.resourceArray && this.resourceArray.totalElements)\r\n            return this.resourceArray.totalElements;\r\n        return 0;\r\n    }\r\n\r\n    /** whether a resource array has first page of results*/\r\n    public hasFirst(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasFirst(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** whether a resource array has next page of results*/\r\n    public hasNext(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasNext(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** whether a resource array has previous page of results*/\r\n    public hasPrev(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasPrev(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** whether a resource array has last page of results*/\r\n    public hasLast(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasLast(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** get resource array next page of results*/\r\n    public next(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.next(this.resourceArray, this.type).pipe(\r\n                map((resourceArray: ResourceArray<T>) => {\r\n                    this.resourceArray = resourceArray;\r\n                    return resourceArray.result;\r\n                }));\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array previous page of results*/\r\n    public prev(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.prev(this.resourceArray, this.type).pipe(\r\n                map((resourceArray: ResourceArray<T>) => {\r\n                    this.resourceArray = resourceArray;\r\n                    return resourceArray.result;\r\n                }));\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array first page of results*/\r\n    public first(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.first(this.resourceArray, this.type)\r\n                .pipe(\r\n                    map((resourceArray: ResourceArray<T>) => {\r\n                        this.resourceArray = resourceArray;\r\n                        return resourceArray.result;\r\n                    })\r\n                );\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array last page of results*/\r\n    public last(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.last(this.resourceArray, this.type)\r\n                .pipe(\r\n                    map((resourceArray: ResourceArray<T>) => {\r\n                        this.resourceArray = resourceArray;\r\n                        return resourceArray.result;\r\n                    })\r\n                );\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array page of results given a page number*/\r\n    public page(pageNumber: number): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.page(this.resourceArray, this.type, pageNumber).pipe(\r\n                map((resourceArray: ResourceArray<T>) => {\r\n                    this.resourceArray = resourceArray;\r\n                    return resourceArray.result;\r\n                }));\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n}\r\n","import { User } from '../user/user.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n\r\n/** Account manager service */\r\n@Injectable()\r\nexport class AccountService extends RestService<User> {\r\n  \r\n\r\n  /** API resource path */\r\n  public ACCOUNT_API = 'account';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(User, \"account\", injector);\r\n  }\r\n\r\n  /** get logged in user account*/\r\n  get(): Observable<any> {\r\n    let result: Observable<Object>;\r\n    result = this.http.get(this.resourceService.getResourceUrl(this.ACCOUNT_API));\r\n    return result;\r\n  }\r\n  \r\n  /** save account*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    result = this.http.post(this.resourceService.getResourceUrl(this.ACCOUNT_API) , item);\r\n\r\n    return result;\r\n  }\r\n\r\n  /** change logged in user account*/  \r\n  changePassword(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    result = this.http.post(this.resourceService.getResourceUrl(this.ACCOUNT_API+\"/change-password\") , item);\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable} from 'rxjs-compat';\r\nimport {ResourceService} from '../angular-hal/src/lib/resource.service';\r\n//import * as moment from 'moment';\r\n\r\n/** Authentication service*/\r\n@Injectable()\r\nexport class AuthService {\r\n    \r\n  /** API resource path */\r\n  public AUTH_API = 'authenticate';\r\n\r\n    /** constructor*/\r\n    constructor(\r\n        private http: HttpClient,\r\n        private resourceService: ResourceService\r\n    ) {}\r\n    \r\n    /** get current user jwt token from session storage*/\r\n    getToken() {\r\n        return  sessionStorage.getItem('authenticationToken');\r\n    }\r\n\r\n    /** login operation */\r\n    login(credentials): Observable<any> {\r\n\r\n        const data = {\r\n            username: credentials.username,\r\n            password: credentials.password\r\n        };\r\n        return this.http.post(this.resourceService.getResourceUrl(this.AUTH_API), data, {observe : 'response'}).map(authenticateSuccess.bind(this));\r\n\r\n        function authenticateSuccess(resp) {\r\n            if (resp.ok) {\r\n                const jwt = resp.body.id_token;\r\n                this.storeAuthenticationToken(jwt);\r\n                //const expiresAt = moment().add( resp.headers.get('Token-Validity'),'milisecond');\r\n                //sessionStorage.setItem('expires_at', JSON.stringify(expiresAt.valueOf()));\r\n                return jwt;\r\n            }                    \r\n        }\r\n    }\r\n    \r\n    /** login operation with jwt token */\r\n    loginWithToken(jwt) {\r\n        if (jwt) {\r\n            this.storeAuthenticationToken(jwt);\r\n            return Promise.resolve(jwt);\r\n        } else {\r\n            return Promise.reject('auth-jwt-service Promise reject'); // Put appropriate error message here\r\n        }\r\n    }\r\n\r\n    /** store jwt token in session storage*/\r\n    storeAuthenticationToken(jwt) {\r\n       sessionStorage.setItem('authenticationToken', jwt);\r\n        \r\n    }\r\n    \r\n    /** check whether current user is logged in*/\r\n    public isLoggedIn() {\r\n        //return moment().isBefore(this.getExpiration());\r\n        return this.getToken();\r\n    }\r\n    \r\n    /** check whether current user is logged out*/\r\n    isLoggedOut() {\r\n        return !this.isLoggedIn();\r\n    }\r\n\r\n    /** logout operation */\r\n    logout(): Observable<any> {\r\n\r\n        return new Observable((observer) => {\r\n            //localStorage.removeItem('authenticationToken');\r\n            sessionStorage.removeItem('authenticationToken');\r\n            //sessionStorage.removeItem('expires_at');\r\n            observer.complete();\r\n        });\r\n    }\r\n\r\n\r\n    \r\n}\r\n","import { Observable } from 'rxjs';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\r\n\r\n/** Interceptor for authentication token in API requests */\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n\r\n    /** constructor*/\r\n    constructor(\r\n    ) {\r\n    }\r\n    \r\n    /** request handler */\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n        const token = sessionStorage.getItem('authenticationToken');\r\n        if (!!token) {\r\n            request = request.clone({\r\n                setHeaders: {\r\n                    Authorization: 'Bearer ' + token\r\n                }\r\n            });\r\n        }\r\n        return next.handle(request);\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport { AccountService } from '../account/account.service';\r\n\r\n/** Principal service*/\r\n@Injectable()\r\nexport class Principal {\r\n    private userIdentity: any;\r\n    private authenticated = false;\r\n    private authenticationState = new Subject<any>();\r\n\r\n    /** constructor */\r\n    constructor(\r\n        private account: AccountService\r\n    ) {}\r\n\r\n    /** authenticate with given identity*/\r\n    authenticate(identity) {\r\n        this.userIdentity = identity;\r\n        this.authenticated = identity !== null;\r\n        this.authenticationState.next(this.userIdentity);\r\n    }\r\n\r\n    /** check whether current user has any of the given authorities */\r\n    hasAnyAuthority(authorities: string[]): Promise<boolean> {\r\n        return Promise.resolve(this.hasAnyAuthorityDirect(authorities));\r\n    }\r\n\r\n    /** check whether current user has any of the given authorities on the given territory */\r\n    hasAnyAuthorityOnTerritory(authorities: string[],territory: string ): Promise<boolean> {\r\n        return Promise.resolve(this.hasAnyAuthorityDirectOnTerritory(authorities,territory));\r\n    }\r\n\r\n    /** check whether current user has any of the given authorities without resolving promises*/\r\n    hasAnyAuthorityDirect(authorities: string[]): boolean {\r\n        if (!this.authenticated || !this.userIdentity || !this.userIdentity.authorities) {\r\n            return false;\r\n        }\r\n\r\n        for (let i = 0; i < authorities.length; i++) {\r\n            if (this.userIdentity.authorities.includes(authorities[i])) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** check whether current user has any of the given authorities on the given territory without resolving promises */\r\n    hasAnyAuthorityDirectOnTerritory(authorities: string[],territory: string): boolean {\r\n        if (!this.authenticated || !this.userIdentity || !this.userIdentity.authorities) {\r\n            return false;\r\n        }\r\n\r\n        for (let i = 0; i < authorities.length; i++) {\r\n\r\n            if (this.userIdentity.authoritiesPerTerritory[territory] && this.userIdentity.authoritiesPerTerritory[territory].includes(authorities[i])) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** check whether current user has the given authority */\r\n    hasAuthority(authority: string): Promise<boolean> {\r\n        if (!this.authenticated) {\r\n           return Promise.resolve(false);\r\n        }\r\n\r\n        return this.identity().then((id) => {\r\n            return Promise.resolve(id.authorities && id.authorities.includes(authority));\r\n        }, () => {\r\n            return Promise.resolve(false);\r\n        });\r\n    }\r\n\r\n    /** check whether current user has the given authority on the given territory*/\r\n    hasAuthorityOnTerritory(authority: string,territory: string): Promise<boolean> {\r\n        if (!this.authenticated) {\r\n           return Promise.resolve(false);\r\n        }\r\n\r\n        return this.identity().then((id) => {\r\n            return Promise.resolve(id.authoritiesPerTerritory && id.authoritiesPerTerritory[territory] && id.authoritiesPerTerritory[territory].includes(authority));\r\n        }, () => {\r\n            return Promise.resolve(false);\r\n        });\r\n    }\r\n\r\n    /** check user identity*/\r\n    identity(force?: boolean): Promise<any> {\r\n        if (force === true) {\r\n            this.userIdentity = undefined;\r\n        }\r\n\r\n        // check and see if we have retrieved the userIdentity data from the server.\r\n        // if we have, reuse it by immediately resolving\r\n        if (this.userIdentity) {\r\n            return Promise.resolve(this.userIdentity);\r\n        }\r\n\r\n        // retrieve the userIdentity data from the server, update the identity object, and then resolve.\r\n        return this.account.get().toPromise().then((response) => {\r\n            const account = response;\r\n            if (account) {\r\n                this.userIdentity = account;\r\n                this.authenticated = true;\r\n            } else {\r\n                this.userIdentity = null;\r\n                this.authenticated = false;\r\n            }\r\n            this.authenticationState.next(this.userIdentity);\r\n            return this.userIdentity;\r\n        }).catch((err) => {\r\n            this.userIdentity = null;\r\n            this.authenticated = false;\r\n            this.authenticationState.next(this.userIdentity);\r\n            return null;\r\n        });\r\n    }\r\n\r\n    /** check whether current user is authenticated */\r\n    isAuthenticated(): boolean {\r\n        return this.authenticated;\r\n    }\r\n\r\n    /** check whether current user identity is resolved */\r\n    isIdentityResolved(): boolean {\r\n        return this.userIdentity !== undefined;\r\n    }\r\n\r\n    /** get current user authentication state */\r\n    getAuthenticationState(): Observable<any> {\r\n        return this.authenticationState.asObservable();\r\n    }\r\n\r\n\r\n}\r\n","import { Injector, Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from './auth.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Principal } from './principal.service';\r\n\r\n/** Interceptor for authentication expired response in API requests */\r\n@Injectable()\r\nexport class AuthExpiredInterceptor implements HttpInterceptor {\r\n\r\n    /** constructor */\r\n    constructor(\r\n        private router: Router,     \r\n        private authService: AuthService, \r\n        private principal: Principal\r\n    ) {}\r\n\r\n    /** request handler */\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        return next.handle(request).do((event: HttpEvent<any>) => {}, (err: any) => {\r\n            const intercept: boolean = request.url.indexOf(\"/api/\") != -1;\r\n            //tractem request\r\n            if (intercept) {\r\n                if (err instanceof HttpErrorResponse) {\r\n                    if (err.status === 401) {                    \r\n                        this.authService.logout().subscribe();\r\n                        this.principal.authenticate(null);\r\n                        this.router.navigate(['/']);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AuthService } from './auth.service';\r\nimport { Principal } from './principal.service';\r\n\r\n/** Login service*/\r\n@Injectable()\r\nexport class LoginService {\r\n    \r\n    /** constructor */\r\n    constructor(\r\n        private authServerProvider: AuthService, \r\n        private principal: Principal\r\n    ) {}\r\n\r\n    /**Login operation*/\r\n    login(credentials, callback?) {\r\n        const cb = callback || function() {};\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.authServerProvider.login(credentials).subscribe((data) => {\r\n                this.principal.identity(true).then((account) => {\r\n                    // After the login the language will be changed to\r\n                    // the language selected by the user during his registration\r\n                    resolve(data);\r\n                });\r\n                \r\n                \r\n                return cb();\r\n            }, (err) => {\r\n                this.logout();\r\n                reject(err);\r\n                return cb(err);\r\n            });\r\n        });\r\n    }\r\n    /**login with jwt token */\r\n    loginWithToken(jwt) {\r\n        return this.authServerProvider.loginWithToken(jwt);\r\n    }\r\n\r\n    /** logout operation */\r\n    logout() {\r\n       this.authServerProvider.logout().subscribe();\r\n       this.principal.authenticate(null);\r\n    }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {ResourceService} from '../angular-hal/src/lib/resource.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DashboardService{\r\n\r\n    /** API resource path */\r\n    public DASHBOARD_API = 'dashboard/info';\r\n    public DASHBOARD_EMBEDDED= 'dashboard';\r\n    /** constructor */\r\n    constructor(       \r\n      private http: HttpClient,\r\n      private resourceService: ResourceService) {\r\n    }\r\n  \r\n    /** get all kpi */\r\n    getAll(): Observable<any> {\r\n      return this.http.get(this.resourceService.getResourceUrl(this.DASHBOARD_API)).map(response => response[this.DASHBOARD_EMBEDDED]);\r\n    }\r\n}\r\n","import {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { User } from './user.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n/** User manager service */\r\n@Injectable()\r\nexport class UserService extends RestService<User> {\r\n  \r\n  /** API resource path */\r\n  public USER_API ='users';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(User, \"users\", injector);\r\n  }\r\n  \r\n  /** remove user*/\r\n  remove(item: User) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save user*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.USER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n    \r\n  /** change password o given user id */\r\n  changePassword(id,item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    result = this.http.post(this.resourceService.getResourceUrl(this.USER_API+\"/\"+id+\"/change-password\") , item);\r\n    return result;\r\n  }\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { Territory } from '../territory/territory.model';\r\nimport { User } from './user.model';\r\n/**\r\n * User position model\r\n */\r\nexport class UserPosition extends Resource {\r\n  /** name */\r\n  public name: string;\r\n  /** email */\r\n  public email: string;\r\n  /** organization name*/\r\n  public organization: string;\r\n  /** system created date*/\r\n  public createdDate: any;\r\n  /** system dated date*/\r\n  public datedDate: any;\r\n  /** position territory*/\r\n  public territory: Territory;\r\n  /** user*/\r\n  public user: User;\r\n}\r\n","import {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { UserPosition } from './user-position.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n/** User position manager service */\r\n@Injectable()\r\nexport class UserPositionService  extends RestService<UserPosition> {\r\n  \r\n\r\n  /** API resource path */\r\n  public USER_POSITION_API = 'user-positions';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(UserPosition, \"user-positions\", injector);\r\n  }\r\n  \r\n  /** remove user position*/\r\n  remove(item: UserPosition) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save user position*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.user !=null){\r\n          item.substituteRelation('user',item.user).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      if (item.territory !=null){\r\n          item.substituteRelation('territory',item.territory).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n    } else {\r\n      item.territory = item.territory._links.self.href;\r\n      item.user = item.user._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.USER_POSITION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { Role } from '../role/role.model';\r\nimport { Territory } from '../territory/territory.model';\r\nimport { User } from './user.model';\r\n\r\n/**\r\n * User permission model\r\n */\r\nexport class UserConfiguration extends Resource {\r\n  /** role */  \r\n  public role: Role;\r\n\r\n  /** role Children */  \r\n  public roleChildren: Role;\r\n  \r\n  /** territory */ \r\n  public territory: Territory;\r\n  /** user */\r\n  public user: User;\r\n}\r\n","import { RestService } from '../angular-hal/src/lib/rest.service';\r\nimport { UserConfiguration } from './user-configuration.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n/** User configuration manager service */\r\n@Injectable()\r\nexport class UserConfigurationService extends RestService<UserConfiguration> {\r\n\r\n  /** API resource path */\r\n  public USER_CONFIGURATION_API = 'user-configurations';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector, private http: HttpClient) {\r\n    super(UserConfiguration, \"user-configurations\", injector);\r\n  }\r\n\r\n  /** remove user configuration*/\r\n  remove(item: UserConfiguration) {\r\n    return this.http.delete(item._links.self.href);\r\n\r\n  }\r\n\r\n  /** save user configuration*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links != null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      item.territory = item.territory._links.self.href;\r\n      item.role = item.role!=null?item.role._links.self.href:null;\r\n      item.user = item.user._links.self.href;\r\n      item.roleChildren = item.roleChildren!=null?item.roleChildren._links.self.href:null;\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.USER_CONFIGURATION_API), item);\r\n    }\r\n    return result;\r\n  }\r\n\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { TerritoryGroupType } from './territory-group-type.model';\r\nimport { TerritoryType } from './territory-type.model';\r\n\r\n/**\r\n * Territory model\r\n */\r\nexport class Territory extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** code */\r\n  public code: string;\r\n  /** name */\r\n  public name: string;\r\n  /** address*/\r\n  public territorialAuthorityAddress: string;\r\n  /** admin */\r\n  public territorialAuthorityName: string;\r\n  /** whether territory is blocked*/\r\n  public blocked: boolean;\r\n  /** comments*/\r\n  public note: string;\r\n  /** system created date*/\r\n  public createdDate: any;\r\n  /** contact email */  \r\n  public territorialAuthorityEmail: string;\r\n  /** extension */\r\n  public extent: string;\r\n  /** logo image URL */\r\n  public territorialAuthorityLogo: string;\r\n  /** contact organization name */\r\n  // public organizationName: string;\r\n  /** scope*/\r\n  public scope: string;\r\n  /** type */  \r\n  public type: TerritoryType;\r\n  /** group type */\r\n  public groupType: TerritoryGroupType;\r\n  /** territory members*/\r\n  public members: Territory[];\r\n\r\n}\r\n","import { Territory } from './territory.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { RestService } from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Territory manager service */\r\n@Injectable()\r\nexport class TerritoryService extends RestService<Territory> {\r\n\r\n  /** API resource path */\r\n  public TERRITORY_API = 'territories';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector, private http: HttpClient) {\r\n    super(Territory, \"territories\", injector);\r\n  }\r\n\r\n  /** remove territory*/\r\n  remove(item: Territory) {\r\n    return this.http.delete(item._links.self.href);\r\n\r\n  }\r\n\r\n  /** save territory*/\r\n  save(item: Territory): Observable<any> {\r\n    let result: Observable<Object>;\r\n\r\n    let territoryGroupType:any = {}\r\n    territoryGroupType._links = {};\r\n    territoryGroupType._links.self = {};\r\n    territoryGroupType._links.self.href = \"\";\r\n\r\n    let territoryType:any = {}\r\n    territoryType._links = {};\r\n    territoryType._links.self = {};\r\n    territoryType._links.self.href = \"\";\r\n\r\n    if (item.type != null) {\r\n      territoryType = item.type;\r\n      if (typeof item.type._links != 'undefined') {\r\n        item.type = item.type._links.self.href;\r\n      } \r\n    }\r\n\r\n    if (item._links != null) {\r\n      //update relations\r\n      delete item.groupType;\r\n\r\n\r\n      // if (territoryGroupType._links.self.href == '') {\r\n      //   item.deleteRelation('groupType', territoryGroupType).subscribe(result => {\r\n      //   }, error => console.error(error));\r\n\r\n      // } else {\r\n      //   item.substituteRelation('groupType', territoryGroupType).subscribe(result => {\r\n      //   }, error => console.error(error));\r\n      // }\r\n\r\n      if (territoryType._links.self.href == '') {\r\n        item.deleteRelation('type', territoryType).subscribe(result => {\r\n        }, error => console.error(error));\r\n\r\n      } else {\r\n        item.substituteRelation('type', territoryType).subscribe(result => {\r\n        }, error => console.error(error));\r\n      }\r\n\r\n      delete item.type;\r\n      // if (item.type != null)\r\n      //   item.type = item.type._links.self.href;\r\n\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TERRITORY_API), item);\r\n    }\r\n    return result;\r\n  }\r\n\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n\r\n/**\r\n * Territory type model\r\n */\r\nexport class TerritoryType extends Resource {\r\n   /** id */\r\n   public id: number;  \r\n  /** name */\r\n  public name: string;\r\n}\r\n","import { Territory } from './territory.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { TerritoryType } from './territory-type.model';\r\n\r\n/** TerritoryType manager service */\r\n@Injectable()\r\nexport class TerritoryTypeService extends RestService<TerritoryType> {\r\n  \r\n\r\n  /** API resource path */\r\n  public TERRITORYTYPE_API = 'territory-types';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TerritoryType, \"territory-types\", injector);\r\n  }\r\n  \r\n  /** remove territory type*/\r\n  remove(item: TerritoryType) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save territory type*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TERRITORYTYPE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n\r\n/**\r\n * Territory type model\r\n */\r\nexport class TerritoryGroupType extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** name */\r\n  public name: string;\r\n}\r\n","import { TerritoryGroupType } from './territory-group-type.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TerritoryGroupTypeService extends RestService<TerritoryGroupType> {\r\n  \r\n  /** API resource path */\r\n  public TERRITORYGROUPTYPE_API = 'territory-group-types';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TerritoryGroupType, \"territory-group-types\", injector);\r\n  }\r\n  \r\n  /** remove territory*/\r\n  remove(item: TerritoryGroupType) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save territory*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TERRITORYGROUPTYPE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}","import {Resource} from '../angular-hal/src/lib/resource';\r\n\r\n/**\r\n * Role model\r\n */\r\nexport class Role extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name*/\r\n  public name: string;\r\n  /** comments*/\r\n  public description: string;\r\n\r\n}\r\n","import { Role } from './role.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Role manager service */\r\n@Injectable()\r\nexport class RoleService extends RestService<Role> {\r\n  \r\n  /** API resource path */\r\n  public ROLE_API = 'roles';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Role, \"roles\", injector);\r\n  }\r\n  \r\n  /** remove role*/\r\n  remove(item: Role) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save role*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.ROLE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Connection model\r\n */\r\nexport class Connection extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name*/\r\n  public name: string;\r\n  /** type*/\r\n  public type: string;\r\n  /** user*/\r\n  public user: string;\r\n  /** password*/\r\n  public password: string;\r\n  /** connection string*/\r\n  public connectionString: string;\r\n\r\n}\r\n","import { Connection } from './connection.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Connection manager service */\r\n@Injectable()\r\nexport class ConnectionService extends RestService<Connection> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CONNECTION_API = 'connections';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Connection, \"connections\", injector);\r\n  }\r\n  \r\n  /** remove connection*/\r\n  remove(item: Connection) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save connection*/\r\n  save(item: Connection): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  testConnection(item:any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    result=this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API)+\"/test\" , item);\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n\r\nimport { Connection } from '../connection/connection.model';\r\nimport { Role } from '../role/role.model';\r\nimport { TaskType } from './task-type.model';\r\nimport { TaskGroup } from './task-group.model';\r\nimport { TaskAvailability } from './task-availability.model';\r\nimport { TaskParameter } from './task-parameter.model';\r\n\r\n//FIXME ensure task creation in admin app upon initialization (as it is done with Roles and default Users)\r\n/** GEOADMIN_task id */\r\nexport const GEOADMIN_TREE_TASK_ID:string  = \"geoadmin\";\r\n\r\nimport { TaskUI } from './task-ui.model';\r\nimport { Cartography } from '../cartography/cartography.model';\r\nimport { Service } from '../service/service.model';\r\n/** Task model */\r\nexport class Task extends Resource {\r\n  /** id */\r\n  public id?: number;\r\n  /** name */  \r\n  public name?: string;\r\n  /** order*/\r\n  public order?: Number;\r\n  /** system created date*/\r\n  public createdDate?: any;\r\n  /** task group*/\r\n  public group?: TaskGroup;\r\n  /** task type*/\r\n  public type?: TaskType;\r\n  /** task UI*/\r\n  public ui?: TaskUI;\r\n  /** parameters*/\r\n  public parameters?: TaskParameter[];\r\n  /** connection*/\r\n  public connection?: Connection;\r\n  /** roles*/\r\n  public roles?: Role[];\r\n  /** availabilities*/\r\n  public availabilities?: TaskAvailability[];\r\n\r\n  public cartography?: Cartography;\r\n\r\n  public service?: Service;\r\n\r\n  public properties?;\r\n}\r\n","import { Task } from './task.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Task manager service */\r\n@Injectable()\r\nexport class TaskService extends RestService<Task> {\r\n\r\n    /** API resource path */\r\n    public CONNECTION_API = 'tasks';\r\n\r\n    /** constructor */\r\n    constructor(injector: Injector, private http: HttpClient) {\r\n        super(Task, \"tasks\", injector);\r\n    }\r\n\r\n    /** remove task*/\r\n    remove(item: Task) {\r\n        return this.http.delete(item._links.self.href);\r\n    }\r\n    \r\n    /** save task*/\r\n    save(item: Task): Observable<any> {\r\n        let result: Observable<Object>;\r\n\r\n        if (item._links != null) {\r\n\r\n            if (!item.service) {\r\n                let service:any = {}\r\n                service._links = {};\r\n                service._links.self = {};\r\n                service._links.self.href = \"\";\r\n                item.deleteRelation('service', service).subscribe(result => {\r\n                }, error => console.error(error)); \r\n            }else {\r\n                item.service._links.self.href=item.service._links.self.href.split(\"{\")[0]\r\n                item.substituteRelation('service', item.service).subscribe(result => {\r\n                }, error => console.error(error));\r\n                item.service = item.service._links.self.href\r\n            }\r\n            if (!item.cartography) {\r\n                let cartography:any = {}\r\n                cartography._links = {};\r\n                cartography._links.self = {};\r\n                cartography._links.self.href = \"\";\r\n                item.deleteRelation('cartography', cartography).subscribe(result => {\r\n                }, error => console.error(error)); \r\n            }else {\r\n                item.cartography._links.self.href=item.cartography._links.self.href.split(\"{\")[0]\r\n                item.substituteRelation('cartography', item.cartography).subscribe(result => {\r\n                }, error => console.error(error));\r\n                item.cartography = item.cartography._links.self.href\r\n            }\r\n\r\n            if (!item.connection) {\r\n                let connection:any = {}\r\n                connection._links = {};\r\n                connection._links.self = {};\r\n                connection._links.self.href = \"\";\r\n                item.deleteRelation('connection', connection).subscribe(result => {\r\n                }, error => console.error(error)); \r\n            }else {\r\n                item.connection._links.self.href=item.connection._links.self.href.split(\"{\")[0]\r\n                item.substituteRelation('connection', item.connection).subscribe(result => {\r\n                }, error => console.error(error));\r\n                item.connection = item.connection._links.self.href\r\n            }\r\n\r\n            if (!item.ui) {\r\n                // item.deleteRelation('ui', item.ui).subscribe(result => {\r\n                // }, error => console.error(error)); \r\n            }else {\r\n                item.ui._links.self.href=item.ui._links.self.href.split(\"{\")[0]\r\n                item.substituteRelation('ui', item.ui).subscribe(result => {\r\n                }, error => console.error(error));\r\n                item.ui = item.ui._links.self.href\r\n            }\r\n\r\n            if (!item.group) {\r\n                // item.deleteRelation('group', item.group).subscribe(result => {\r\n                // }, error => console.error(error)); \r\n            }else {\r\n                item.group._links.self.href=item.group._links.self.href.split(\"{\")[0]\r\n                item.substituteRelation('group', item.group).subscribe(result => {\r\n                }, error => console.error(error));\r\n                item.group = item.group._links.self.href\r\n            }\r\n\r\n            if (!item.type) {\r\n                // item.deleteRelation('type', item.type).subscribe(result => {\r\n                // }, error => console.error(error)); \r\n            }else {\r\n                item.type._links.self.href=item.type._links.self.href.split(\"{\")[0]\r\n                item.substituteRelation('type', item.type).subscribe(result => {\r\n                }, error => console.error(error));\r\n                item.type = item.type._links.self.href\r\n            }\r\n\r\n            if(item.roles){\r\n                let roles = [...item.roles];\r\n                delete item.roles;\r\n                item.substituteAllRelation('roles',roles).subscribe(result => {\r\n                }, error => console.error(error));\r\n            }\r\n\r\n            result = this.http.put(item._links.self.href, item);            \r\n        } else {\r\n            if(item.cartography){\r\n                item.cartography = item.cartography._links.self.href\r\n            }\r\n            if(item.connection){\r\n                item.connection = item.connection._links.self.href\r\n            }\r\n            if(item.service){\r\n                item.service = item.service._links.self.href\r\n            }\r\n            if(item.ui){\r\n                item.ui = item.ui._links.self.href\r\n            }\r\n            if(item.group){\r\n                item.group = item.group._links.self.href\r\n            }\r\n            if(item.type){\r\n                item.type = item.type._links.self.href\r\n            }\r\n            result = this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API), item);\r\n        }\r\n        return result;\r\n    }\r\n\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Task type model\r\n */\r\nexport class TaskType extends Resource {\r\n  /** name*/  \r\n  public name: string;\r\n\r\n}\r\n","import { TaskType } from './task-type.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** TaskType manager service */\r\n@Injectable()\r\nexport class TaskTypeService extends RestService<TaskType> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CONNECTION_API = 'task-types';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TaskType, \"task-types\", injector);\r\n  }\r\n  \r\n  /** remove task type*/\r\n  remove(item: TaskType) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save task type*/\r\n  save(item: TaskType): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Task group model\r\n */\r\nexport class TaskGroup extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** name*/  \r\n  public name: string;\r\n\r\n}\r\n","import { TaskGroup } from './task-group.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Task group manager service */\r\n@Injectable()\r\nexport class TaskGroupService extends RestService<TaskGroup> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CONNECTION_API = 'task-groups';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TaskGroup, \"task-groups\", injector);\r\n  }\r\n  \r\n  /** remove task group*/\r\n  remove(item: TaskGroup) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save task group*/\r\n  save(item: TaskGroup): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Task} from './task.model';  \r\n/**\r\n * Task parameter model\r\n */\r\nexport class TaskParameter extends Resource {\r\n  /** name*/  \r\n  public name: string;\r\n  \r\n  /** type*/\r\n  public type: string;\r\n    \r\n  /** value*/\r\n  public value: string;\r\n  \r\n  /** order*/  \r\n  public order: Number;\r\n  \r\n  /** task*/  \r\n  public task:Task;\r\n\r\n}\r\n","import { TaskParameter } from './task-parameter.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Task parameter manager service */\r\n@Injectable() \r\nexport class TaskParameterService extends RestService<TaskParameter> {\r\n  \r\n\r\n  /** API resource path */\r\n  public TASK_PARAMETER_API = 'task-parameters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TaskParameter, \"task-parameters\", injector);\r\n  }\r\n  \r\n  /** remove task parameter*/\r\n  remove(item: TaskParameter) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save task parameter*/\r\n  save(item: TaskParameter): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.task !=null){\r\n          item.substituteRelation('task',item.task).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      \r\n    } else {\r\n      item.task = item.task._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TASK_PARAMETER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { Territory } from '../territory/territory.model';\r\nimport { Task } from './task.model';\r\n/**\r\n * Task availability model\r\n */\r\nexport class TaskAvailability extends Resource {\r\n  /** territory*/\r\n  public territory: Territory;\r\n  /** task*/\r\n  public task: Task;\r\n}\r\n","import { TaskAvailability } from './task-availability.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Task availability manager service */\r\n@Injectable() \r\nexport class TaskAvailabilityService extends RestService<TaskAvailability> {\r\n  \r\n\r\n  /** API resource path */\r\n  public TASK_AVAILABILITY_API = 'task-availabilities';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TaskAvailability, \"task-availabilities\", injector);\r\n  }\r\n  \r\n  /** remove task availability*/\r\n  remove(item: TaskAvailability) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save task availability*/\r\n  save(item: TaskAvailability): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.task !=null){\r\n          item.substituteRelation('task',item.task).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      if (item.territory !=null){\r\n          item.substituteRelation('territory',item.territory).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n    } else {\r\n      item.territory = item.territory._links.self.href;\r\n      item.task = item.task._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TASK_AVAILABILITY_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Task UI model\r\n */\r\nexport class TaskUI extends Resource {\r\n  /** name*/\r\n  public name: string;\r\n  \r\n  /** tooltip*/  \r\n  public tooltip: string;\r\n    \r\n  /** order*/ \r\n  public order: number;\r\n\r\n}\r\n","import { TaskUI } from './task-ui.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Task UI manager service */\r\n@Injectable()\r\nexport class TaskUIService extends RestService<TaskUI> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CONNECTION_API = 'task-uis';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TaskUI, \"task-uis\", injector);\r\n  }\r\n  \r\n  /** remove task UI*/\r\n  remove(item: TaskUI) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save task UI*/\r\n  save(item: TaskUI): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { Language } from './language.model';\r\n\r\n\r\n/** Task model */\r\nexport class Translation extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** id */\r\n  public element: number;\r\n  /** name */\r\n  public translation: string;\r\n  /** column */\r\n  public column: string;\r\n  /** name */\r\n  public language: Language;\r\n  /** name */\r\n  public languageName?: string;\r\n  /** name */\r\n  public languageShortname?: string;\r\n\r\n\r\n\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { Translation } from './translation.model';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TranslationService extends RestService<Translation> {\r\n\r\n  /** API resource path */\r\n  public TRANSLATION_API = 'translations';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Translation, \"translations\", injector);\r\n  }\r\n  \r\n  /** remove translation*/\r\n  remove(item: Translation) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save translation*/\r\n  save(item: Translation): Observable<any> {\r\n    let result: Observable<Object>;\r\n\r\n    let language:any = {}\r\n    language._links = {};\r\n    language._links.self = {};\r\n    language._links.self.href = \"\";\r\n\r\n    if (item.language != null) {\r\n      language = item.language;\r\n      if (typeof item.language._links != 'undefined') {\r\n        item.language = item.language._links.self.href;\r\n      } \r\n    }\r\n\r\n    if (item._links!=null) {\r\n      delete item.language;\r\n      // if (language._links.self.href == '') {\r\n      //   item.deleteRelation('language', language).subscribe(result => {\r\n      //   }, error => console.error(error));\r\n\r\n      // } else {\r\n      //   item.substituteRelation('language', language).subscribe(result => {\r\n      //   }, error => console.error(error));\r\n      // }\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TRANSLATION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n\r\n\r\n/** Task model */\r\nexport class Language extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name */\r\n  public shortname: string;\r\n  /** name */\r\n  public name: string;\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { Language } from './language.model';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LanguageService extends RestService<Language> {\r\n\r\n  /** API resource path */\r\n  public LANGUAGES_API = 'languages';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Language, \"languages\", injector);\r\n  }\r\n  \r\n  /** remove translation*/\r\n  remove(item: Language) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save translation*/\r\n  save(item: Language): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.LANGUAGES_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Connection} from '../connection/connection.model';\r\nimport {ServiceParameter} from './service-parameter.model';\r\n/**\r\n * Service model\r\n */\r\nexport class Service extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name*/\r\n  public name: string;\r\n    \r\n  /** type*/\r\n  public type: string;\r\n\r\n  /** url*/  \r\n  public serviceURL: string;\r\n\r\n  /** projections*/  \r\n  public supportedSRS: string;\r\n  \r\n  /** legend*/\r\n  public legend: string;\r\n\r\n  /** infoUrl*/  \r\n  public infoUrl: string;\r\n  \r\n  /** system created date*/\r\n  public createdDate: any;\r\n\r\n  /** connection*/\r\n  public connection: Connection;\r\n  \r\n  /** parameters*/  \r\n  public parameters: ServiceParameter[];\r\n\r\n  /** whether service is blocked*/\r\n  public blocked: boolean;\r\n}\r\n","import { Service } from './service.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Service manager service */\r\n@Injectable()\r\nexport class ServiceService extends RestService<Service> {\r\n\r\n  /** API resource path */\r\n  public SERVICE_API = 'services';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Service, \"services\", injector);\r\n  }\r\n  \r\n  /** remove service*/\r\n  remove(item: Service) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save service*/\r\n  save(item: Service): Observable<any> {\r\n    let result: Observable<Object>;\r\n    let serviceConnection = item.connection;\r\n\r\n    if (item.connection!=null){\r\n        if (typeof item.connection._links!= 'undefined') { \r\n            item.connection = item.connection._links.self.href;\r\n        } else {\r\n            serviceConnection._links= {};\r\n            serviceConnection._links.self = {};\r\n            serviceConnection._links.self.href=\"\";\r\n        }        \r\n     }\r\n\r\n    if (item._links!=null) {     \r\n      result = this.http.put(item._links.self.href, item);       \r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.SERVICE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n\r\n/**\r\n * Service model\r\n */\r\nexport class ConfigurationParameter extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name*/\r\n  public name: string;\r\n    \r\n  /** value*/\r\n  public value: string;\r\n\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { ConfigurationParameter } from './configuration-parameters.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ConfigurationParametersService extends RestService<ConfigurationParameter> {\r\n\r\n  /** API resource path */\r\n  public CONFIGURATION_PARAMETERS_API = 'configuration-parameters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(ConfigurationParameter, \"configuration-parameters\", injector);\r\n  }\r\n  \r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Service} from './service.model'; \r\n/**\r\n * Service parameter model\r\n */\r\nexport class ServiceParameter extends Resource {\r\n  /** name*/\r\n  public name: string;\r\n  \r\n  /** type*/\r\n  public type: string;\r\n    \r\n  /** value*/  \r\n  public value: string;\r\n  \r\n  /** service*/\r\n  public service: Service;\r\n\r\n}\r\n","import { ServiceParameter } from './service-parameter.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Service parameter manager service */\r\n@Injectable() \r\nexport class ServiceParameterService extends RestService<ServiceParameter> {\r\n\r\n  /** API resource path */\r\n  public SERVICE_PARAMETER_API = 'service-parameters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(ServiceParameter, \"service-parameters\", injector);\r\n  }\r\n  \r\n  /** remove service parameter*/\r\n  remove(item: ServiceParameter) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save service parameter*/\r\n  save(item: ServiceParameter): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      \r\n      if (item.service !=null){\r\n          let service =  item.service;\r\n          delete item.service;\r\n          item.substituteRelation('service',service).subscribe(result => {            \r\n          \r\n      }, error => console.error(error));\r\n      }\r\n      result = this.http.put(item._links.self.href, item);\r\n      \r\n      \r\n    } else {\r\n      item.service = item.service._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.SERVICE_PARAMETER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Capabilitie model\r\n */\r\nexport class Capabilitie extends Resource {\r\n  /** url */\r\n  public url: string;\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { Capabilitie } from './capabilitie.model';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CapabilitiesService extends RestService<Capabilitie>  {\r\n\r\n  /** API resource path */\r\n  public CAPABILITIES_API = 'helpers/capabilities?url=';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Capabilitie, \"helpers/capabilities?url=\", injector);\r\n  }\r\n\r\n    /** save service*/\r\n    getInfo(url: string): Observable<any> {\r\n      let result: Observable<Object>;\r\n      if(url){\r\n        const headerDict = {\r\n          'Charset': 'UTF-8'\r\n        }\r\n        \r\n        const requestOptions = {                                                                                                                                                                                 \r\n          headers: new HttpHeaders(headerDict), \r\n        };\r\n        let finalUrl = this.resourceService.getResourceUrl(this.CAPABILITIES_API);\r\n        finalUrl = finalUrl.concat(url);\r\n        console.log(finalUrl);\r\n        result = this.http.get(finalUrl, requestOptions);\r\n      }\r\n      return result;\r\n \r\n    }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Info model\r\n */\r\nexport class Info extends Resource {\r\n  /** url */\r\n  public url: string;\r\n}","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { Info } from './info.model';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GetInfoService extends RestService<Info>  {\r\n\r\n  /** API resource path */\r\n  public INFO_API = 'helpers/feature-type?url=';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Info, \"helpers/feature-type?url=\", injector);\r\n  }\r\n\r\n    /** save service*/\r\n    getInfo(url: string): Observable<any> {\r\n      let result: Observable<Object>;\r\n      if(url){\r\n        const headerDict = {\r\n          'Charset': 'UTF-8'\r\n        }\r\n        \r\n        const requestOptions = {                                                                                                                                                                                 \r\n          headers: new HttpHeaders(headerDict), \r\n        };\r\n        let finalUrl = this.resourceService.getResourceUrl(this.INFO_API);\r\n        finalUrl = finalUrl.concat(url);\r\n        console.log(finalUrl);\r\n        result = this.http.get(finalUrl, requestOptions);\r\n      }\r\n      return result;\r\n \r\n    }\r\n  \r\n}","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Service} from '../service/service.model';\r\nimport {Connection} from '../connection/connection.model';\r\nimport {CartographyAvailability} from './cartography-availability.model';\r\nimport { CartographyStyle } from './cartography-style.model';\r\n/**\r\n * Cartography\r\n */\r\nexport class Cartography extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** name*/\r\n  public name: string;\r\n  \r\n  /** type*/\r\n  public type : string;\r\n\r\n  /** service*/\r\n  public service : Service;\r\n\r\n  /** order*/  \r\n  public order: Number; \r\n\r\n  /** description*/  \r\n  public description: String;\r\n\r\n  /** source*/  \r\n  public source: String;\r\n\r\n  /** whether cartography is blocked*/\r\n  public blocked: boolean;  \r\n\r\n  /** apply filter to get map*/\r\n  public applyFilterToGetMap: boolean;  \r\n\r\n  /** apply filter to get feature information*/\r\n  public applyFilterToGetFeatureInfo: boolean;  \r\n\r\n  /** apply filter to spatial selection*/\r\n  public applyFilterToSpatialSelection: boolean;  \r\n\r\n  /** selectable layers*/\r\n  public selectableLayers: string[];\r\n\r\n  /** transparency*/ \r\n  public transparency: Number;\r\n\r\n  /** whether layer is queryable*/  \r\n  public queryable: Boolean;\r\n\r\n  /** whether layer is queryable*/ \r\n  public queryAct: Boolean;\r\n\r\n  /** query layer*/\r\n  public queryLay: string;\r\n\r\n  /** system created date*/\r\n  public createdDate: any;\r\n\r\n  /** minimum scale*/\r\n  public minimumScale: Number;\r\n\r\n  /** maximum scale*/\r\n  public maximumScale: Number;\r\n\r\n  /** layers*/  \r\n  public layers: string;\r\n  \r\n  /** connection*/\r\n  public connection: Connection;\r\n\r\n  /** queryableFeatureEnabled */\r\n  public queryableFeatureEnabled: Boolean;\r\n\r\n    /** queryableLayers */\r\n  public queryableFeatureAvailable: Boolean;\r\n\r\n    /** queryableLayers */\r\n  public queryableLayers: string[];\r\n\r\n  /** availabilities*/\r\n  public availabilities : CartographyAvailability[];\r\n\r\n  /** whether layer is queryable*/ \r\n  public selectableFeatureEnabled: Boolean;\r\n\r\n  /** selection layer*/\r\n  public selectionLayer: string;\r\n\r\n  /** selection service*/  \r\n  public selectionService: Service;\r\n\r\n  /** legend tip*/  \r\n  public legendType: string;\r\n  \r\n  /** legend url*/\r\n  public legendURL: string;\r\n\r\n  /** whether layer is editable*/\r\n  public editable: Boolean;\r\n\r\n  /** metadata URL*/\r\n  public metadataURL: string;\r\n\r\n  /** metadata URL*/\r\n  public datasetURL: string;\r\n\r\n  /** whether layer is themable*/\r\n  public thematic: Boolean;\r\n  \r\n  /** geometry type*/\r\n  public geometryType: string;\r\n\r\n  public styles?: CartographyStyle[]\r\n\r\n  public useAllStyles: boolean;\r\n  \r\n\r\n}\r\n","import { Cartography } from './cartography.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { RestService } from '../angular-hal/src/lib/rest.service';\r\nimport { Connection } from '../connection/connection.model';\r\nimport { Service } from '../service/service.model';\r\n\r\n/** Cartography manager service */\r\n@Injectable()\r\nexport class CartographyService extends RestService<Cartography> {\r\n\r\n  /** API resource path */\r\n  public CARTOGRAPHY_API = 'cartographies';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector, private http: HttpClient) {\r\n    super(Cartography, \"cartographies\", injector);\r\n  }\r\n\r\n  /** remove cartography*/\r\n  remove(item: Cartography) {\r\n    return this.http.delete(item._links.self.href);\r\n\r\n  }\r\n\r\n  /** save cartography*/\r\n  save(item: Cartography): Observable<any> {\r\n    let result: Observable<Object>;\r\n\r\n    let cartographyConnection:any={};\r\n    cartographyConnection._links = {};\r\n    cartographyConnection._links.self = {};\r\n    cartographyConnection._links.self.href = \"\";\r\n     \r\n    let cartographyService:any={};\r\n    cartographyService._links = {};\r\n    cartographyService._links.self = {};\r\n    cartographyService._links.self.href = \"\";\r\n    \r\n    let cartographySelectionService:any = {};\r\n    cartographySelectionService._links = {};\r\n    cartographySelectionService._links.self = {};\r\n    cartographySelectionService._links.self.href = \"\";\r\n\r\n    if (item.service != null) {\r\n      cartographyService=  item.service;\r\n      if (typeof item.service._links != 'undefined') {\r\n        item.service = item.service._links.self.href;\r\n      }\r\n    }\r\n\r\n    if (item.selectionService != null) {\r\n      cartographySelectionService = item.selectionService\r\n      if (typeof item.selectionService._links != 'undefined') {\r\n        item.selectionService = item.selectionService._links.self.href;\r\n      }\r\n    }\r\n\r\n    if (item.connection != null) {\r\n      cartographyConnection=  item.connection;\r\n      if (typeof item.connection._links != 'undefined') {\r\n        item.connection = item.connection._links.self.href;\r\n      }\r\n    }\r\n\r\n    if (item._links != null) {\r\n\r\n      //update relations\r\n      delete item.connection;\r\n      delete item.service;\r\n      delete item.selectionService;\r\n\r\n      // if (cartographyConnection._links.self.href == '' && cartographyConnection) {\r\n      //   item.deleteRelation('spatialSelectionConnection', cartographyConnection).subscribe(result => {\r\n      //   }, error => console.error(error));\r\n      // } else {\r\n      //   item.substituteRelation('spatialSelectionConnection', cartographyConnection).subscribe(result => {\r\n      //   }, error => console.error(error));\r\n      // }\r\n\r\n      if (cartographyService._links.self.href == '') {\r\n        item.deleteRelation('service', cartographyService).subscribe(result => {\r\n        }, error => console.error(error));\r\n      } else {\r\n        item.substituteRelation('service', cartographyService).subscribe(result => {\r\n        }, error => console.error(error));\r\n      }\r\n\r\n      if (cartographySelectionService._links.self.href == '' && cartographySelectionService) {\r\n        item.deleteRelation('spatialSelectionService', cartographySelectionService).subscribe(result => {\r\n        }, error => console.error(error));\r\n      } else {\r\n        item.substituteRelation('spatialSelectionService', cartographySelectionService).subscribe(result => {\r\n        }, error => console.error(error));\r\n      }\r\n\r\n      result = this.http.put(item._links.self.href, item);\r\n\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_API), item);\r\n    }\r\n    return result;\r\n  }\r\n\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Cartography} from './cartography.model';\r\nimport {Role} from '../role/role.model';\r\n/**\r\n * Cartography group\r\n */\r\nexport class CartographyGroup extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** name*/\r\n  public name: string;\r\n  /** type*/\r\n  public type: string;\r\n  /** members*/\r\n  public members: Cartography[];\r\n  /** roles*/\r\n  public roles: Role[];\r\n\r\n}\r\n","import { CartographyGroup } from './cartography-group.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** CartographyGroup manager service */\r\n@Injectable()\r\nexport class CartographyGroupService extends RestService<CartographyGroup> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CARTOGRAPHY_GROUP_API ='cartography-groups';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CartographyGroup, \"cartography-groups\", injector);\r\n  }\r\n  \r\n  /** remove cartography group*/\r\n  remove(item: CartographyGroup) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save cartography group*/\r\n  save(item: CartographyGroup): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_GROUP_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { Territory } from '../territory/territory.model';\r\nimport { Cartography } from './cartography.model';\r\n/**\r\n * Cartography availability model\r\n */\r\nexport class CartographyAvailability extends Resource {\r\n  /** territory*/\r\n  public territory: Territory;\r\n  \r\n  /** system created date*/\r\n  public createdDate: any;\r\n  \r\n  /** cartography*/\r\n  public cartography: Cartography;\r\n}\r\n","import { CartographyAvailability } from './cartography-availability.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** CartographyAvailability manager service */\r\n@Injectable() \r\nexport class CartographyAvailabilityService extends RestService<CartographyAvailability> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CARTOGRAPHY_AVAILABILITY_API = 'cartography-availabilities';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CartographyAvailability, \"cartography-availabilities\", injector);\r\n  }\r\n  \r\n  /** remove cartography availability*/\r\n  remove(item: CartographyAvailability) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save cartography availability*/\r\n  save(item: CartographyAvailability): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.cartography !=null){\r\n          item.substituteRelation('cartography',item.cartography).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      if (item.territory !=null){\r\n          item.substituteRelation('territory',item.territory).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n    } else {\r\n      item.territory = item.territory._links.self.href;\r\n      item.cartography = item.cartography._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_AVAILABILITY_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { TerritoryType } from '../territory/territory-type.model';\r\nimport { Cartography } from './cartography.model';\r\n/**\r\n * Cartography availability model\r\n */\r\nexport class CartographyFilter extends Resource {\r\n \r\n  /** name*/\r\n  public name: string;\r\n\r\n  /** required */\r\n  public required: boolean;\r\n\r\n  /** type*/\r\n  public type: string;\r\n\r\n  /** Territorial level. */\r\n  public territorialLevel: TerritoryType;\r\n  \r\n  /** column */\r\n  public column: string;\r\n\r\n  /** values*/  \r\n  public values: string;\r\n\r\n  /** value*/  \r\n  public valueType: string;\r\n\r\n  /** cartography*/\r\n  public cartography: Cartography;\r\n\r\n\r\n}\r\n","import { CartographyFilter } from './cartography-filter.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** CartographyFilter manager service */\r\n@Injectable() \r\nexport class CartographyFilterService extends RestService<CartographyFilter> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CARTOGRAPHY_FILTER_API = 'cartography-filters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CartographyFilter, \"cartography-filters\", injector);\r\n  }\r\n  \r\n  /** remove cartography filter*/\r\n  remove(item: CartographyFilter) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save cartography availability*/\r\n  save(item: CartographyFilter): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.cartography !=null){\r\n          item.substituteRelation('cartography',item.cartography).subscribe(result => {\r\n      }, error => console.error(error));\r\n      }\r\n\r\n      if(item.territorialLevel != null && item.territorialLevel != undefined ){\r\n        item.substituteRelation('territorialLevel',item.territorialLevel).subscribe(result => {\r\n        }, error => console.error(error));\r\n      }\r\n     \r\n    } else {\r\n      \r\n      item.cartography = item.cartography._links.self.href;\r\n      item.territorialLevel=item.territorialLevel._links.self.href;\r\n      \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_FILTER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Cartography} from './cartography.model'; \r\n/**\r\n * Service parameter model\r\n */\r\nexport class CartographyParameter extends Resource {\r\n  /** name*/\r\n  public name: string;\r\n  \r\n  /** type*/\r\n  public type: string;\r\n    \r\n  /** value*/  \r\n  public value: string;\r\n  \r\n  /** order*/  \r\n  public order: string;\r\n\r\n  /** cartography*/\r\n  public cartography: Cartography;\r\n\r\n}\r\n","import { CartographyParameter } from './cartography-parameter.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Service parameter manager service */\r\n@Injectable() \r\nexport class CartographyParameterService extends RestService<CartographyParameter> {\r\n\r\n  /** API resource path */\r\n  public CARTOGRAPHY_PARAMETER_API = 'cartography-parameters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CartographyParameter, \"cartography-parameters\", injector);\r\n  }\r\n  \r\n  /** remove service parameter*/\r\n  remove(item: CartographyParameter) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save service parameter*/\r\n  save(item: CartographyParameter): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      \r\n      if (item.cartography !=null){\r\n          let cartography =  item.cartography;\r\n          delete item.cartography;\r\n          item.substituteRelation('cartography',cartography).subscribe(result => {            \r\n          \r\n      }, error => console.error(error));\r\n      }\r\n      result = this.http.put(item._links.self.href, item);\r\n      \r\n      \r\n    } else {\r\n      item.cartography = item.cartography._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_PARAMETER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import { CartographyParameter } from './cartography-parameter.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Service parameter manager service */\r\n@Injectable() \r\nexport class CartographySpatialSelectionParameterService extends RestService<CartographyParameter> {\r\n\r\n  /** API resource path */\r\n  public CARTOGRAPHY_SPATIAL_SELECTION_PARAMETER_API = 'cartography-spatial-selection-parameters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CartographyParameter, \"cartography-spatial-selection-parameters\", injector);\r\n  }\r\n  \r\n  /** remove service parameter*/\r\n  remove(item: CartographyParameter) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save service parameter*/\r\n  save(item: CartographyParameter): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      \r\n      if (item.cartography !=null){\r\n          let cartography =  item.cartography;\r\n          delete item.cartography;\r\n          item.substituteRelation('cartography',cartography).subscribe(result => {            \r\n          \r\n      }, error => console.error(error));\r\n      }\r\n      result = this.http.put(item._links.self.href, item);\r\n      \r\n      \r\n    } else {\r\n      item.cartography = item.cartography._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_SPATIAL_SELECTION_PARAMETER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Cartography} from './cartography.model'; \r\n/**\r\n * Cartography style model\r\n */\r\nexport class CartographyStyle extends Resource {\r\n  /** name*/\r\n  public name: string;\r\n  \r\n  /** title*/\r\n  public title: string;\r\n    \r\n  /** description*/  \r\n  public description: string;\r\n  \r\n  /** format*/  \r\n  public format: string;\r\n  \r\n  /** width*/  \r\n  public width: number;\r\n  \r\n  /** height*/  \r\n  public height: number;\r\n  \r\n  /** url*/  \r\n  public url: string;\r\n\r\n  /** cartography*/\r\n  public cartography: Cartography;\r\n\r\n  public defaultStyle: boolean;\r\n\r\n  public legendURL: any;\r\n  \r\n\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { CartographyStyle } from './cartography-style.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CartographyStyleService extends RestService<CartographyStyle> {\r\n\r\n /** API resource path */\r\n  public CARTOGRAPHY_STYLES_API = 'cartography-styles';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CartographyStyle, \"cartography-styles\", injector);\r\n  }\r\n  \r\n  /** remove service parameter*/\r\n  remove(item: CartographyStyle) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save service parameter*/\r\n  save(item: CartographyStyle): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      \r\n      if (item.cartography !=null){\r\n          let cartography =  item.cartography;\r\n          delete item.cartography;\r\n          item.substituteRelation('cartography',cartography).subscribe(result => {            \r\n          \r\n      }, error => console.error(error));\r\n      }\r\n      result = this.http.put(item._links.self.href, item);\r\n      \r\n      \r\n    } else {\r\n      item.cartography = item.cartography._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_STYLES_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {CartographyGroup} from './cartography-group.model';\r\n/**\r\n * Background model\r\n */\r\nexport class Background extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  \r\n  /** name*/\r\n  public name: string;\r\n\r\n  /** description*/\r\n  public description: string;\r\n\r\n  /** image */\r\n  public image: string;\r\n\r\n  /** whether background is active*/\r\n  public active: Boolean;\r\n  \r\n  /** system created date*/\r\n  public createdDate: any;\r\n\r\n  /** cartography group*/\r\n  public cartographyGroup: CartographyGroup;\r\n}\r\n","import { Background } from './background.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Background manager service */\r\n@Injectable()\r\nexport class BackgroundService extends RestService<Background> {\r\n\r\n  /** API resource path */\r\n  public BACKGROUND_API = 'backgrounds';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Background, \"backgrounds\", injector);\r\n  }\r\n  \r\n  /** remove background*/\r\n  remove(item: Background) {\r\n    return this.http.delete(item._links.self.href);   \r\n  }\r\n  \r\n  /** save background*/\r\n  save(item: Background): Observable<any> {\r\n    let result: Observable<Object>;\r\n    let backgroundCartographyGroup:any = {}         \r\n    \r\n    backgroundCartographyGroup._links= {};\r\n    backgroundCartographyGroup._links.self = {};\r\n    backgroundCartographyGroup._links.self.href=\"\";\r\n    item.cartographyGroup;\r\n\r\n    if (item.cartographyGroup!=null){\r\n      backgroundCartographyGroup = item.cartographyGroup;\r\n        if (typeof item.cartographyGroup._links!= 'undefined') { \r\n            item.cartographyGroup = item.cartographyGroup._links.self.href;\r\n        }    \r\n     }\r\n\r\n    if (item._links!=null) {\r\n      //update relations\r\n      delete item.cartographyGroup;        \r\n      \r\n      if (backgroundCartographyGroup._links.self.href==''){\r\n         item.deleteRelation('cartographyGroup',backgroundCartographyGroup).subscribe(result => {     \r\n\r\n          \r\n             }, error => console.error(error));\r\n          \r\n      } else {\r\n          item.substituteRelation('cartographyGroup',backgroundCartographyGroup).subscribe(result => {\r\n         \r\n\r\n      \r\n            }, error => console.error(error));           \r\n       } \r\n       \r\n         \r\n      result = this.http.put(item._links.self.href, item);\r\n\r\n           \r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.BACKGROUND_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {TreeNode} from './tree-node.model';\r\nimport {Role} from '../role/role.model';    \r\n/**\r\n * Tree model\r\n */\r\nexport class Tree extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name */\r\n  public name: string;\r\n  /** description */\r\n  public description: string;\r\n  /** image */\r\n  public image: string;\r\n  /** nodes */\r\n  public nodes: TreeNode[];\r\n  /** available roles */\r\n  public availableRoles : Role[];\r\n\r\n}\r\n","import { Tree } from './tree.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Tree manager service */\r\n@Injectable()\r\nexport class TreeService extends RestService<Tree> {\r\n  \r\n  /** API resource path */\r\n  public TREE_API = 'trees';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Tree, \"trees\", injector);\r\n  }\r\n  \r\n  /** remove tree*/\r\n  remove(item: Tree) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save tree*/\r\n  save(item: Tree): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TREE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Cartography} from '../cartography/cartography.model';\r\nimport {Tree} from './tree.model';\r\n/**\r\n * Tree node model\r\n */\r\nexport class TreeNode extends Resource {\r\n  /** name */\r\n  public name: string;\r\n  /** tooltip*/\r\n  public tooltip: string;\r\n  /** description*/\r\n  public description: string;\r\n  /** datasetURL*/\r\n  public datasetURL: string;\r\n  /** metadataURL*/\r\n  public metadataURL: string;\r\n  /** order*/\r\n  public order : number;\r\n  /** whether tree node is active*/\r\n  public active: boolean;\r\n  /** parent tree node */\r\n  public radio: boolean;\r\n  /** parent tree node */\r\n  public parent: TreeNode;\r\n  /** displayed cartography */  \r\n  public cartography: Cartography;\r\n  /** tree */  \r\n  public tree: Tree;\r\n  /** filterGetFeatureInfo */  \r\n  public filterGetFeatureInfo: boolean;\r\n  /** filterGetMap */  \r\n  public filterGetMap: boolean;\r\n  /** filterSelectable */  \r\n  public filterSelectable: boolean;\r\n  /** style */  \r\n  public style: string;\r\n  \r\n\r\n}\r\n","import { TreeNode } from './tree-node.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Tree node manager service */\r\n@Injectable() \r\nexport class TreeNodeService extends RestService<TreeNode> {\r\n  \r\n  /** API resource path */\r\n  public TREE_NODE_API = 'tree-nodes';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TreeNode, \"tree-nodes\", injector);\r\n  }\r\n  \r\n  /** remove tree node*/\r\n  remove(item: TreeNode) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save tree node*/\r\n  save(item: TreeNode): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      const itemTree = item.tree;\r\n      const itemCartography = item.cartography;\r\n      const itemParent = item.parent;\r\n        \r\n      delete item.tree;\r\n      delete item.cartography;\r\n      delete item.parent;\r\n        \r\n      result = this.http.put(item._links.self.href, item);\r\n      if (itemTree !=null){\r\n          item.substituteRelation('tree',itemTree).subscribe(result => {\r\n      \r\n          }, error => console.error(error));\r\n      }\r\n      if (itemCartography !=null){\r\n          item.substituteRelation('cartography',itemCartography).subscribe(result => {\r\n      \r\n          }, error => console.error(error));\r\n      }\r\n      if (itemParent !=null){\r\n          item.substituteRelation('parent',itemParent).subscribe(result => {\r\n      \r\n          }, error => console.error(error));\r\n      }\r\n      else{\r\n          let treeNodeParent:any = {};\r\n          treeNodeParent._links= {};\r\n          treeNodeParent._links.self = {};\r\n          treeNodeParent._links.self.href=\"\";\r\n          item.deleteRelation('parent', treeNodeParent).subscribe(result => {\r\n        }, error => console.error(error));\r\n      }\r\n      \r\n    } else {\r\n      if (item.tree && item.tree._links && item.tree._links.self) {\r\n        item.tree = item.tree._links.self.href;\r\n      }\r\n      if (item.cartography && item.cartography._links && item.cartography._links.self) {\r\n        item.cartography = item.cartography._links.self.href;\r\n      }      \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TREE_NODE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Tree} from '../tree/tree.model';\r\nimport {Role} from '../role/role.model';\r\nimport {CartographyGroup} from '../cartography/cartography-group.model';\r\nimport {ApplicationParameter} from './application-parameter.model';\r\nimport {ApplicationBackground} from './application-background.model';\r\n\r\n//FIXME ensure application creation in admin app upon initialization (as it is done with Roles and default Users)\r\n/** Territorial appliction name */\r\nexport const TERRITORIAL_APP_NAME:string  = \"Aplicación Territorial\";\r\n\r\n/**\r\n * Application model\r\n */\r\nexport class Application extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  \r\n  /** name*/\r\n  public name: string;\r\n\r\n  /** type*/\r\n  public type: string;\r\n  \r\n  /** title*/\r\n  public title: string;\r\n  \r\n  /** theme*/\r\n  public theme: string;\r\n\r\n    \r\n  /** urlTemplate*/\r\n  public jspTemplate: string;\r\n  \r\n  \r\n  /** system created date*/\r\n  public createdDate: any;\r\n  \r\n  /** available roles*/\r\n  public availableRoles : Role[];\r\n  \r\n  /** trees*/\r\n  public trees : Tree[];\r\n  \r\n  /** scales (comma-separated values)*/\r\n  public scales: string[];\r\n  \r\n  /** projections(comma-separated EPSG codes)*/\r\n  public srs: string;\r\n  \r\n  /** whether application tree will auto refresh*/  \r\n  public treeAutoRefresh: Boolean;\r\n\r\n  /** backgrounds*/\r\n  public backgrounds: ApplicationBackground[];\r\n\r\n  /** situation map*/\r\n  public situationMap: CartographyGroup;    \r\n  \r\n  /** parameters*/\r\n  public parameters: ApplicationParameter[];\r\n}\r\n","import { Application } from './application.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { CartographyGroup } from '../cartography/cartography-group.model';\r\n\r\n/** Application manager service */\r\n@Injectable()\r\nexport class ApplicationService extends RestService<Application> {\r\n  \r\n\r\n  /** API resource path */\r\n  public APPLICATION_API = 'applications';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Application, \"applications\", injector);\r\n  }\r\n  \r\n  /** remove application*/\r\n  remove(item: Application) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save application*/\r\n  save(item: Application): Observable<any> {\r\n    let result: Observable<Object>;\r\n\r\n    let applicationSituationMap:any = {};\r\n    applicationSituationMap._links= {};\r\n    applicationSituationMap._links.self = {};\r\n    applicationSituationMap._links.self.href=\"\";\r\n     \r\n    if (item.situationMap!=null){\r\n        applicationSituationMap=item.situationMap;\r\n        if (typeof item.situationMap._links!= 'undefined') { \r\n            item.situationMap = item.situationMap._links.self.href;\r\n        }       \r\n     }\r\n\r\n    if (item._links!=null) {\r\n      //update relations\r\n      delete item.situationMap;        \r\n      \r\n      if (applicationSituationMap._links.self.href==''){\r\n         item.deleteRelation('situationMap',applicationSituationMap).subscribe(result => {     \r\n             \r\n             }, error => console.error(error));\r\n          \r\n      } else {\r\n          item.substituteRelation('situationMap',applicationSituationMap).subscribe(result => {\r\n         \r\n      \r\n            }, error => console.error(error));           \r\n       } \r\n       \r\n         \r\n      result = this.http.put(item._links.self.href, item);\r\n\r\n           \r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.APPLICATION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n    \r\n    \r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Background} from '../cartography/background.model';\r\nimport {Application} from './application.model'; \r\n\r\n/**\r\n * Application background model\r\n */\r\nexport class ApplicationBackground extends Resource {\r\n  /** order*/\r\n  public order: Number;\r\n  \r\n  /** background*/\r\n  public background: Background;\r\n  \r\n  /** application*/\r\n  public application: Application;\r\n\r\n}\r\n","import { ApplicationBackground } from './application-background.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Application background manager service */\r\n@Injectable() \r\nexport class ApplicationBackgroundService extends RestService<ApplicationBackground> {\r\n  \r\n\r\n  /** API resource path */\r\n  public APPLICATION_BACKGROUND_API ='application-backgrounds';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(ApplicationBackground, \"application-backgrounds\", injector);\r\n  }\r\n  \r\n  /** remove application background*/\r\n  remove(item: ApplicationBackground) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save application background*/\r\n  save(item: ApplicationBackground): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.application !=null){\r\n          item.substituteRelation('application',item.application).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      if (item.background !=null){\r\n          item.substituteRelation('background',item.background).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      \r\n    } else {\r\n      item.application = item.application._links.self.href;\r\n      item.background = item.background._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.APPLICATION_BACKGROUND_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Application} from './application.model'; \r\n\r\n/**\r\n * Application parameter model \r\n */\r\nexport class ApplicationParameter extends Resource {\r\n  /** name*/\r\n  public name: string;\r\n  \r\n  /** type*/\r\n  public type: string;\r\n  \r\n  /** value*/    \r\n  public value: string;\r\n  \r\n  /** application*/\r\n  public application: Application;\r\n\r\n}\r\n","import { ApplicationParameter } from './application-parameter.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Application parameter manager service */\r\n@Injectable() \r\nexport class ApplicationParameterService extends RestService<ApplicationParameter> {\r\n  \r\n\r\n  /** API resource path */\r\n  public APPLICATION_PARAMETER_API = 'application-parameters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(ApplicationParameter, \"application-parameters\", injector);\r\n  }\r\n  \r\n  /** remove application*/\r\n  remove(item: ApplicationParameter) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save application*/\r\n  save(item: ApplicationParameter): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.application !=null){\r\n          item.substituteRelation('application',item.application).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      \r\n    } else {\r\n      item.application = item.application._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.APPLICATION_PARAMETER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Connection model\r\n */\r\nexport class CodeList extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name*/\r\n  public codeListName: string;\r\n  /** type*/\r\n  public value: string;\r\n  /** user*/\r\n  public description: string;\r\n\r\n\r\n}\r\n","import { CodeList } from './codelist.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Connection manager service */\r\n@Injectable()\r\nexport class CodeListService extends RestService<CodeList> {\r\n  \r\n \r\n  /** API resource path */\r\n  public CODELIST_API = 'codelist-values';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CodeList, \"codelist-values\", injector);\r\n  }\r\n  \r\n  /** remove connection*/\r\n  remove(item: CodeList) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save connection*/\r\n  save(item: CodeList): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CODELIST_API ), item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, of } from 'rxjs';\r\n\r\n/** Layer model: configure Layer data and displaying configuration */ \r\nexport class Layer {\r\n  // Display data\r\n  /** layer visibility*/  \r\n  visibility: boolean = false;\r\n  /** Transparency (Transparent) 0-1 (Opaque)*/\r\n  opacity: number = 1.0;\r\n\r\n  // Configuration data\r\n  /** title*/\r\n  title: string;\r\n  \r\n  /** Id to index*/\r\n  id: any;\r\n  \r\n  /** Service Name*/\r\n  serverName: string;\r\n\r\n  /** Service attributions*/\r\n  attributions: string = \"\";\r\n\r\n  /** Request format (image/jpg, ...)*/\r\n  format: string;\r\n  \r\n  /** Request service version*/\r\n  version:string;\r\n\r\n  /** Service url*/\r\n  url: string;\r\n\r\n  /** Is base layer?*/\r\n  isBaseLayer: boolean;\r\n\r\n  /** Request layer name*/\r\n  name: string;\r\n\r\n  /** Is tiled?*/\r\n  tiled: boolean;\r\n  \r\n  /** Description*/\r\n  desc: string = \"\";\r\n  \r\n  /**  Transparent request parameter?*/\r\n  url_transparent: string = \"true\";\r\n  \r\n  /** Request Background parameter color (Hexa)*/\r\n  url_bgcolor: string = \"0x000000\";\r\n  \r\n  /** Request Exception URL*/\r\n  url_exception: string;\r\n  \r\n  /** Extent for tiled services*/\r\n  extent: any = null;\r\n\r\n  /** Tile height (if not defined, the default map is taken)*/\r\n  tileHeight?:number;\r\n  \r\n  /** Tile width (if not defined, the default map is taken)*/\r\n  tileWidth?:number;\r\n  \r\n  /** Enabled for GetFeatureInfo requests (enabled to use the viewer features information tool)*/\r\n  queryable?:boolean = false;\r\n  \r\n  /** Minimum scale*/\r\n  minimumScale?:number;\r\n  \r\n  /** Maximum scale*/\r\n  maximumScale?:number;\r\n  \r\n  /** List of available CRS*/\r\n  projections?:string;\r\n  \r\n  /** Features information URL*/\r\n  infoUrl?:string;\r\n  \r\n  /** Metadata information URL*/\r\n  metadataUrl?:string;\r\n  \r\n  /** Legend URL*/\r\n  legendUrl?:string;\r\n  \r\n  /** Array of OptionalParameter object that defines other optional parameter-value pairs for the request (TIME ...)*/\r\n  optionalParameters?:Array<OptionalParameter>;\r\n}\r\n\r\n/** Optional parameter model: configure parameter-value pair to add to the request layer URL */\r\nexport class OptionalParameter {\r\n  /** key*/key:string;\r\n  /** value*/value:string;\r\n}\r\n\r\n/** Layer configuration model: modify the configuration of a layer when interacting with the map (make visible, move the layer ...) */\r\nexport class LayerConfiguration {\r\n  /** Identifier to index*/id: any;\r\n  /** Layer visibility*/visibility: boolean;\r\n  /** Layer transparency (Transparent) 0-1 (Opaque)*/opacity: number;\r\n  /** Layer position*/position: number;\r\n}\r\n\r\n/** Layer group model*/\r\nexport class LayerGroup {\r\n  /** initially activated (all visible layers)*/active?:boolean;\r\n  /** group name*/name?: String;\r\n  /** group id*/id: String;\r\n  /** array of child Layers*/layers: Array<Layer>;\r\n}\r\n\r\n/** Map options configuration model*/\r\nexport class MapOptionsConfiguration {\r\n  /** scales*/scales?: string;\r\n  /** projections*/projections?: string;\r\n  /** minimum scale*/minScale?:number;\r\n  /** maximum scale*/maxScale?:number;\r\n  /** extent*/extent?:any;\r\n  /** maximum extent*/maxExtent?:any;\r\n  /** tile width*/tileWidth?:number;\r\n  /** tile height*/tileHeight?:number;\r\n  /** parameters*/parameters?: Array<OptionalParameter>\r\n}\r\n\r\n/** Map component status model*/\r\nexport class MapComponentStatus {\r\n    /** loaded?*/loaded: boolean = false;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\n/** Map configuration manager service*/\r\nexport class MapConfigurationManagerService {\r\n  private layersSubject = new BehaviorSubject([]);\r\n  private layers: Array<Layer> = null;\r\n\r\n  private baseLayerGroupsSubject = new BehaviorSubject([]);\r\n  private baseLayerGroups: Array<LayerGroup> = null;\r\n\r\n  private layerConfigurationSubject = new BehaviorSubject([]);\r\n\r\n  private addLayersSubject = new BehaviorSubject([]);\r\n  private removeLayersSubject = new BehaviorSubject([]);\r\n\r\n  private situationMapConfigurationSubject = new BehaviorSubject([]);\r\n  private mapOptionsConfigurationSubject = new BehaviorSubject([]);\r\n\r\n  private mapComponentStatusSubject = new BehaviorSubject([]);\r\n\r\n  /** constructor*/\r\n  constructor() { \r\n   //\r\n  }\r\n  \r\n  /** layer count */\r\n  count = 0;\r\n\r\n  /** configure the overlay layers of the map, by passing as a parameter an array of objects of type Layer objects defining the layers to load.*/\r\n  loadLayersConfiguration(configuration) {\r\n    if (this.layers != null) {\r\n      this.clearLayers(false);\r\n    }\r\n    this.setLayers(configuration);\r\n  }\r\n  \r\n  /**configure the base layers of the map by passing as a parameter an array of objects of type LayerGroup each of them with the corresponding Layer objects defining the layers to load.*/\r\n  loadBaseLayersConfiguration(configuration) {\r\n    this.setBaseLayerGroups(configuration);\r\n  }\r\n\r\n  /** get base layer groups*/\r\n  getBaseLayerGroups(): Observable<LayerGroup[]> {\r\n    return this.baseLayerGroupsSubject.asObservable();\r\n  }\r\n\r\n  /** set base layer groups*/\r\n  setBaseLayerGroups(groups:Array<LayerGroup>) {\r\n    this.baseLayerGroups = groups;\r\n    this.refreshBaseLayerGroups();\r\n  }\r\n\r\n  private refreshBaseLayerGroups() {\r\n    // Send the new values so that all subscribers are updated\r\n    this.baseLayerGroupsSubject.next(this.baseLayerGroups);\r\n  }\r\n\r\n  /** get layers*/\r\n  getLayers(): Observable<Layer[]> {\r\n    return this.layersSubject.asObservable();\r\n  }\r\n\r\n  /** remove all layers from map*/\r\n  clearLayers(refresh:boolean) {\r\n    while(this.layers.length) {\r\n      this.layers.pop();\r\n    }\r\n    if (refresh) {\r\n      this.refreshLayers();\r\n    }\r\n  }\r\n\r\n  /** set layers*/\r\n  setLayers(layers:Array<Layer>) {\r\n    this.layers = layers;\r\n    this.refreshLayers();\r\n  }\r\n\r\n  /** add given layer to map*/\r\n  addLayer(layer:Layer) {\r\n    this.layers.push(layer);\r\n    this.refreshAddLayers(layer);\r\n  }\r\n\r\n  /** add given layer to map at given index*/\r\n  addLayerAt(layer:Layer, index:number) {\r\n    if (index == 0) {\r\n      this.layers = [layer].concat(this.layers);\r\n    } else if (index >= this.layers.length) {\r\n      this.layers.push(layer);\r\n    } else {\r\n      this.layers = this.layers.slice(0, index)\r\n                    .concat([layer])\r\n                    .concat(this.layers.slice(index, this.layers.length));\r\n    }\r\n    this.refreshAddLayers(layer);\r\n    this.refreshLayerConfiguration(layer.id, null, null, index);\r\n  }\r\n\r\n  /** remove given layer from map*/\r\n  removeLayer(layer:Layer) {\r\n    var index = this.layers.indexOf(layer);\r\n    this.removeLayerIndex(index);\r\n  }\r\n\r\n  /** remove layer with given id from map */\r\n  removeLayerId(id) {\r\n    var index = -1;\r\n    for (var i = 0, iLen = this.layers.length; i < iLen; i++) {\r\n      if (this.layers[i].id == id) {\r\n        index = i;\r\n        break;\r\n      }\r\n    }\r\n    this.removeLayerIndex(index);\r\n  }\r\n\r\n  /** remove layer at given index from map */\r\n  removeLayerIndex(index:number) {\r\n    var layer = this.layers[index];\r\n    this.layers.splice(index, 1);\r\n    this.refreshRemoveLayers(layer);\r\n  }\r\n\r\n  /** refresh layers */\r\n  private refreshLayers() {\r\n    // Send the new values so that all subscribers are updated\r\n    this.layersSubject.next(this.layers);\r\n  }\r\n\r\n  /** Observable for layers added */\r\n  getLayersAdded(): Observable<Layer[]> {\r\n    return this.addLayersSubject.asObservable();\r\n  }\r\n\r\n  private refreshAddLayers(layer:Layer) {\r\n    // Send the new values so that all subscribers are updated\r\n    this.addLayersSubject.next([layer]);\r\n  }\r\n\r\n  getLayersRemoved(): Observable<Layer[]> {\r\n    return this.removeLayersSubject.asObservable();\r\n  }\r\n\r\n  private refreshRemoveLayers(layer:Layer) {\r\n    // Send the new values so that all subscribers are updated\r\n    this.removeLayersSubject.next([layer]);\r\n  }\r\n\r\n  getLayerConfigurationListener(): Observable<LayerConfiguration[]> {\r\n    return this.layerConfigurationSubject.asObservable();\r\n  }\r\n\r\n  private getLayerIndexById(id:string):number{\r\n    var index = -1;\r\n    for (var i = 0, iLen = this.layers.length; i < iLen; i++) {\r\n      if (this.layers[i].id == id) {\r\n        index = i;\r\n        break;\r\n      }\r\n    }\r\n    return index;\r\n  }\r\n  \r\n  /** move layer with given id to the given index*/\r\n  moveLayer(id, index) {\r\n    var layerIndex = this.getLayerIndexById(id);\r\n    if (layerIndex != -1) {\r\n      var layer = this.layers.splice(layerIndex, 1);\r\n      this.layers = \r\n        this.layers.slice(0, index)\r\n        .concat(layer)\r\n        .concat(this.layers.slice(index, this.layers.length));\r\n    }\r\n    this.refreshLayerConfiguration(id, null, null, index);\r\n  }\r\n\r\n  /** change visibility of layer with given id to the given value*/\r\n  changeLayerVisibility(id, visibility) {\r\n    this.refreshLayerConfiguration(id, null, visibility, null);\r\n  }\r\n\r\n  /** change opacity of layer with given id to the given value*/\r\n  changeLayerOpacity(id, opacity) {\r\n    this.refreshLayerConfiguration(id, opacity, null, null);\r\n  }\r\n\r\n  private refreshLayerConfiguration(id, opacity, visibility, position) {\r\n    // Send the new values so that all subscribers are updated\r\n    var layer = new LayerConfiguration();\r\n    layer.id = id;\r\n    layer.opacity = opacity;\r\n    layer.visibility = visibility;\r\n    layer.position = position;\r\n    this.layerConfigurationSubject.next([layer]);\r\n  }\r\n\r\n  getSituationMapConfigurationListener(): Observable<Layer[]> {\r\n    return this.situationMapConfigurationSubject.asObservable();\r\n  }\r\n\r\n  /** configure the situation map of the map component by passing as a parameter an array of objects of type LayerGroup, each of them with the corresponding Layer objects defining the layers to load as situation map.*/\r\n  loadSituationMapConfiguration(layers:Array<Layer>) {\r\n    // Send the new values so that all subscribers are updated\r\n    this.situationMapConfigurationSubject.next(layers);\r\n  }\r\n\r\n  getMapOptionsConfigurationListener(): Observable<MapOptionsConfiguration[]> {\r\n    return this.mapOptionsConfigurationSubject.asObservable();\r\n  }\r\n\r\n  /** load map options configuration */\r\n  loadMapOptionsConfiguration(configuration:MapOptionsConfiguration) {\r\n    // Send the new values so that all subscribers are updated\r\n    this.mapOptionsConfigurationSubject.next([configuration]);\r\n  }\r\n\r\n  getMapComponentStatusListener(): Observable<MapComponentStatus[]> {\r\n    return this.mapComponentStatusSubject.asObservable();\r\n  }\r\n  \r\n  /** set map component status */\r\n  setMapComponentStatus(status:MapComponentStatus) {\r\n    //Notify the map component status\r\n    this.mapComponentStatusSubject.next([status]);\r\n  }\r\n\r\n}\r\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { Principal } from './principal.service';\r\n\r\n/**\r\n * @whatItDoes Conditionally includes an HTML element if current user has any\r\n * of the authorities passed as the `expression`.\r\n *\r\n * @howToUse\r\n * ```\r\n *     <some-element *sitmunHasAnyAuthority=\"'ROLE_ADMIN'\">...</some-element>\r\n *\r\n *     <some-element *sitmunHasAnyAuthority=\"['ROLE_ADMIN', 'ROLE_USER']\">...</some-element>\r\n * ```\r\n */\r\n@Directive({\r\n    selector: '[sitmunHasAnyAuthority]'\r\n})\r\nexport class HasAnyAuthorityDirective {\r\n    \r\n    /** authorities to check */\r\n    public authorities: string[]; \r\n    \r\n    /** constructor */\r\n    constructor(private principal: Principal, private templateRef: TemplateRef<any>, private viewContainerRef: ViewContainerRef) {\r\n    }\r\n    \r\n    /** territory to check authorities*/\r\n    @Input() territory: string;\r\n    \r\n    /** Set whether current user has any of the given authorities */\r\n    @Input()\r\n    set sitmunHasAnyAuthority(value: string|string[]) {\r\n        this.authorities = typeof value === 'string' ? [ <string> value ] : <string[]> value;\r\n        this.updateView();\r\n        // Get notified each time authentication state changes.\r\n        this.principal.getAuthenticationState().subscribe((identity) => this.updateView());\r\n    }\r\n    \r\n    /** update view */\r\n    private updateView(): void {\r\n        if (this.territory){\r\n        this.principal.hasAnyAuthorityOnTerritory(this.authorities,this.territory).then((result) => {\r\n            this.viewContainerRef.clear();\r\n            if (result) {\r\n                this.viewContainerRef.createEmbeddedView(this.templateRef);\r\n            }\r\n        });\r\n\r\n        } else {\r\n        this.principal.hasAnyAuthority(this.authorities).then((result) => {\r\n            this.viewContainerRef.clear();\r\n            if (result) {\r\n                this.viewContainerRef.createEmbeddedView(this.templateRef);\r\n            }\r\n        });\r\n        }\r\n    }\r\n}\r\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { Principal } from './principal.service';\r\n\r\n/**\r\n * @whatItDoes Conditionally includes an HTML element if current user has any\r\n * of the authorities passed as the `expression`.\r\n *\r\n * @howToUse\r\n * ```\r\n *     <some-element *sitmunHasAnyAuthority=\"'ROLE_ADMIN'\">...</some-element>\r\n *\r\n *     <some-element *sitmunHasAnyAuthority=\"['ROLE_ADMIN', 'ROLE_USER']\">...</some-element>\r\n * ```\r\n */\r\n@Directive({\r\n    selector: '[sitmunHasAnyAuthorityOnTerritory]'\r\n})\r\nexport class HasAnyAuthorityOnTerritoryDirective {\r\n\r\n    /** authorities to check */\r\n    public authorities: string[]; \r\n\r\n    /** territory to check authorities*/\r\n    public territory: string; \r\n\r\n    /** constructor */\r\n    constructor(private principal: Principal, private templateRef: TemplateRef<any>, private viewContainerRef: ViewContainerRef) {\r\n    }\r\n    \r\n    /** Set whether current user has any of the given authorities on territory */\r\n    @Input()\r\n    set sitmunHasAnyAuthorityOnTerritory(opts: any) {\r\n\r\n        this.authorities = typeof opts.authorities === 'string' ? [ <string> opts.authorities ] : <string[]> opts.authorities;\r\n        this.territory = opts.territory;\r\n        this.updateView();\r\n        // Get notified each time authentication state changes.\r\n        this.principal.getAuthenticationState().subscribe((identity) => this.updateView());\r\n    }\r\n    \r\n    /** update view */\r\n    private updateView(): void {\r\n        if (this.territory){\r\n        this.principal.hasAnyAuthorityOnTerritory(this.authorities,this.territory).then((result) => {\r\n            this.viewContainerRef.clear();\r\n            if (result) {\r\n                this.viewContainerRef.createEmbeddedView(this.templateRef);\r\n            }\r\n        });\r\n\r\n        } else {\r\n        this.principal.hasAnyAuthority(this.authorities).then((result) => {\r\n            this.viewContainerRef.clear();\r\n            if (result) {\r\n                this.viewContainerRef.createEmbeddedView(this.templateRef);\r\n            }\r\n        });\r\n        }\r\n    }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { CommonModule } from '@angular/common';\r\nimport {HttpClientModule, HTTP_INTERCEPTORS, HttpClient} from '@angular/common/http';\r\nimport { RouterModule } from '@angular/router';\r\n//import { AngularHalModule } from '../../lib/angular-hal';\r\nimport {CodeListService} from './codelist/codelist.service';\r\nimport {TerritoryService} from './territory/territory.service';\r\nimport {TerritoryTypeService} from './territory/territory-type.service';\r\nimport {TerritoryGroupTypeService} from './territory/territory-group-type.service';\r\nimport {UserPositionService} from './user/user-position.service';\r\nimport {UserConfigurationService} from './user/user-configuration.service';\r\nimport {RoleService} from './role/role.service';\r\nimport {UserService} from './user/user.service';\r\nimport {ConnectionService} from './connection/connection.service';\r\nimport {TaskService} from './task/task.service';\r\nimport {TaskTypeService} from './task/task-type.service';\r\nimport {TaskGroupService} from './task/task-group.service';\r\nimport {TaskParameterService} from './task/task-parameter.service';\r\nimport {TaskAvailabilityService} from './task/task-availability.service';\r\nimport {TaskUIService} from './task/task-ui.service';\r\nimport {ServiceService} from './service/service.service';\r\nimport {ServiceParameterService} from './service/service-parameter.service';\r\nimport {CartographyService} from './cartography/cartography.service';\r\nimport {CartographyAvailabilityService} from './cartography/cartography-availability.service';\r\nimport {CartographyFilterService} from './cartography/cartography-filter.service';\r\nimport {CartographyGroupService} from './cartography/cartography-group.service';\r\nimport {CartographyParameterService} from './cartography/cartography-parameter.service';\r\nimport {BackgroundService} from './cartography/background.service';\r\nimport {TreeService} from './tree/tree.service';\r\nimport {TreeNodeService} from './tree/tree-node.service';\r\nimport {ApplicationService} from './application/application.service';\r\nimport {ApplicationParameterService} from './application/application-parameter.service';\r\nimport {ApplicationBackgroundService} from './application/application-background.service';\r\nimport { MapConfigurationManagerService } from './map/map-configuration-manager.service';\r\nimport { AuthService } from './auth/auth.service';\r\nimport { Principal } from './auth/principal.service';\r\nimport { AuthInterceptor } from './auth/auth.interceptor';\r\nimport { AuthExpiredInterceptor } from './auth/auth-expired.interceptor';\r\nimport { HasAnyAuthorityDirective } from './auth/has-any-authority.directive';\r\nimport { HasAnyAuthorityOnTerritoryDirective } from './auth/has-any-authority-on-territory.directive';\r\nimport { LoginService } from './auth/login.service';\r\nimport { AccountService } from './account/account.service';\r\nimport {TranslateHttpLoader} from '@ngx-translate/http-loader';\r\nimport {TranslateLoader, TranslateModule} from '@ngx-translate/core';\r\nimport { TranslationService } from './translation/translation.service';\r\nimport { LanguageService } from './translation/language.service';\r\nimport { DashboardService } from './dashboard/dashboard.service';\r\nimport { CapabilitiesService } from './capabilities/capabilities.service';\r\nimport { ConfigurationParametersService } from './configuration/configuration-parameters.service';\r\nimport { CartographyStyleService } from './cartography/cartography-style.service';\r\nimport { CartographySpatialSelectionParameterService } from './cartography/cartography-spatial-selection-parameter.service';\r\nimport { GetInfoService } from './getInfo/getInfo.service';\r\n/** load i18n assets*/\r\nexport function createTranslateLoader(http: HttpClient) {\r\n  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\r\n}\r\n\r\n\r\n/** SITMUN frontend core module */\r\n@NgModule({\r\n  imports: [\r\n    /*RouterModule,\r\n    HttpClientModule,\r\n    CommonModule,\r\n    AngularHalModule,*/\r\n    TranslateModule.forRoot({\r\n      loader: {\r\n        provide: TranslateLoader,\r\n        useFactory: (createTranslateLoader),\r\n        deps: [HttpClient]\r\n      }\r\n    }),\r\n  ],\r\n  declarations: [\r\n    HasAnyAuthorityDirective,\r\n    HasAnyAuthorityOnTerritoryDirective,\r\n  ],\r\n  exports: [\r\n    HasAnyAuthorityDirective,\r\n    HasAnyAuthorityOnTerritoryDirective,\r\n    TranslateModule\r\n  ]\r\n})\r\nexport class SitmunFrontendCoreModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: SitmunFrontendCoreModule,\r\n      providers: [\r\n        CodeListService,\r\n        TerritoryService,\r\n        TerritoryTypeService,\r\n        TerritoryGroupTypeService,\r\n        RoleService,\r\n        AccountService,\r\n        AuthService,\r\n        UserService,\r\n        ConnectionService,\r\n        TaskService,\r\n        TaskTypeService,\r\n        TaskUIService,\r\n        TaskGroupService,\r\n        TaskParameterService,\r\n        TaskAvailabilityService,\r\n        ServiceService,\r\n        ConfigurationParametersService,\r\n        CapabilitiesService,\r\n        GetInfoService,\r\n        ServiceParameterService,\r\n        CartographyService,\r\n        CartographyGroupService,\r\n        CartographyAvailabilityService,\r\n        CartographyParameterService,\r\n        CartographySpatialSelectionParameterService,\r\n        CartographyStyleService,\r\n        CartographyFilterService,\r\n        BackgroundService,\r\n        TreeService,\r\n        TreeNodeService,\r\n        ApplicationService,\r\n        ApplicationParameterService,\r\n        ApplicationBackgroundService,\r\n        AuthInterceptor,\r\n        AuthExpiredInterceptor,\r\n        Principal,\r\n        UserPositionService,\r\n        UserConfigurationService,\r\n        LoginService,\r\n        TranslationService,\r\n        LanguageService,\r\n        DashboardService,\r\n        MapConfigurationManagerService,\r\n        {\r\n          provide: HTTP_INTERCEPTORS,\r\n          useClass: AuthInterceptor,\r\n          multi: true\r\n        }\r\n        , {\r\n          provide: HTTP_INTERCEPTORS,\r\n          useClass: AuthExpiredInterceptor,\r\n          multi: true\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n\r\n","import {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {HttpClient, HttpClientModule} from '@angular/common/http';\r\nimport {HalParam, RestService} from './rest.service';\r\nimport {ExternalService} from './external.service';\r\nimport {ResourceService} from './resource.service';\r\nimport {ExternalConfigurationHandlerInterface} from './external-configuration.handler';\r\n\r\nimport 'rxjs';\r\n\r\nimport {SubTypeBuilder} from './subtype-builder';\r\n\r\nexport {ExternalService} from './external.service';\r\nexport {RestService} from './rest.service';\r\nexport {Resource} from './resource';\r\nexport {ResourceArray} from './resource-array';\r\nexport {ResourceService} from './resource.service';\r\nexport {Sort} from './sort';\r\nexport {ResourceHelper} from './resource-helper';\r\nexport {ExternalConfiguration} from './ExternalConfiguration';\r\nexport {ExternalConfigurationHandlerInterface} from './external-configuration.handler';\r\nexport {HalOptions, HalParam} from './rest.service';\r\nexport {SubTypeBuilder} from './subtype-builder';\r\n\r\n\r\n/** Angular HAL module */\r\n@NgModule({\r\n    imports: [HttpClientModule],\r\n    declarations: [],\r\n    exports: [HttpClientModule],\r\n    providers: [\r\n        ExternalService,\r\n        HttpClient,\r\n        {\r\n            provide: ResourceService,\r\n            useClass: ResourceService,\r\n            deps: [ExternalService]\r\n        }]\r\n})\r\nexport class AngularHalModule {\r\n    static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: AngularHalModule,\r\n            providers: [\r\n                ExternalService,\r\n                HttpClient,\r\n                {\r\n                    provide: ResourceService,\r\n                    useClass: ResourceService,\r\n                    deps: [ExternalService]\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}"],"names":["ResourceArray","prototype","addSortInfo","uri","this","sortInfo","_b","tslib_1.__values","_c","next","done","item","value","concat","path","order","replaceOrAdd","query","field","idxNextAmp","seachValue","idx","indexOf","substring","replace","push","el","_this","result","length","type","response","ResourceHelper","createEmptyResult","_embedded","instantiateResourceCollection","next_uri","getHttp","get","getProxy","headers","pipe","map","init","catchError","error","observableThrowError","prev","prev_uri","first","first_uri","last","last_uri","page","pageNumber","self_uri","urlParsed","url.parse","pageSize","toString","sortElements","sort","_i","arguments","size","optionParams","params","options","_d","param","append","key","_e","_f","s","sortString","resolveRelations","resource","array","isNullOrUndefined","className","find","Array","isArray","forEach","element","isPrimitive","resourceArray","getClassName","obj","results","exec","constructor","objProto","classNames","Object","getPrototypeOf","payload","builder","embeddedName","keys","embeddedClassName","items","items_1","items_1_1","instance","searchSubtypes","instantiateResource","totalElements","totalPages","number","_links","self","href","undefined","subtypes","from","subtypeKey","toLowerCase","startsWith","subtype","entity","p","setProxyUri","proxy_uri","setRootUri","root_uri","getURL","addSlash","uriParsed","search","url","setHttp","http","getRootUri","HttpHeaders","Resource","_subtypes","getRelationArray","relation","HttpParams","observableOf","getRelation","data","lastIndexOf","realClassName","addRelation","header","post","updateRelation","patch","substituteRelation","put","substituteAllRelation","resources","deleteRelation","relationId","link","delete","deleteAllRelation","Injectable","tslib_1.__extends","_super","User","ExternalService","updateExternalConfigurationHandlerInterface","externalConfigurationService","getProxyUri","getExternalConfiguration","Inject","args","ResourceService","getAll","subType","ignoreProjection","getResourceUrl","setUrls","id","setUrlsResource","getBySelfLink","resourceLink","searchSingle","customQuery","getByRelation","getByRelationArray","count","observe","Number","body","create","selfResource","status","update","updateCollection","headersReq","set","hasNext","hasPrev","hasFirst","hasLast","apply","__spread","endsWith","proxyUrl","externalService","rootUrl","RestService","handleError","resourceService","mergeMap","notPaged","selfLink","totalElement","injector","AccountService","ACCOUNT_API","save","changePassword","Injector","HttpClient","call","AuthService","getToken","sessionStorage","getItem","login","credentials","username","password","AUTH_API","resp","ok","jwt","id_token","storeAuthenticationToken","bind","loginWithToken","Promise","resolve","reject","setItem","isLoggedIn","isLoggedOut","logout","Observable","observer","removeItem","complete","AuthInterceptor","intercept","request","token","clone","setHeaders","Authorization","handle","Principal","authenticate","identity","userIdentity","authenticated","authenticationState","hasAnyAuthority","authorities","hasAnyAuthorityDirect","hasAnyAuthorityOnTerritory","territory","hasAnyAuthorityDirectOnTerritory","i","includes","authoritiesPerTerritory","hasAuthority","authority","then","hasAuthorityOnTerritory","force","account","toPromise","catch","err","isAuthenticated","isIdentityResolved","getAuthenticationState","asObservable","Subject","AuthExpiredInterceptor","do","event","HttpErrorResponse","authService","subscribe","principal","router","navigate","Router","LoginService","callback","cb","authServerProvider","DashboardService","DASHBOARD_API","DASHBOARD_EMBEDDED","providedIn","UserService","remove","USER_API","UserPosition","UserPositionService","user","console","USER_POSITION_API","UserConfiguration","UserConfigurationService","role","roleChildren","USER_CONFIGURATION_API","Territory","TerritoryService","territoryGroupType","territoryType","groupType","TERRITORY_API","TerritoryType","TerritoryTypeService","TERRITORYTYPE_API","TerritoryGroupType","TerritoryGroupTypeService","TERRITORYGROUPTYPE_API","Role","RoleService","ROLE_API","Connection","ConnectionService","CONNECTION_API","testConnection","Task","TaskService","service","split","cartography","connection","ui","group","roles","TaskType","TaskTypeService","TaskGroup","TaskGroupService","TaskParameter","TaskParameterService","task","TASK_PARAMETER_API","TaskAvailability","TaskAvailabilityService","TASK_AVAILABILITY_API","TaskUI","TaskUIService","Translation","TranslationService","language","TRANSLATION_API","Language","LanguageService","LANGUAGES_API","Service","ServiceService","serviceConnection","SERVICE_API","ConfigurationParameter","ConfigurationParametersService","ServiceParameter","ServiceParameterService","SERVICE_PARAMETER_API","Capabilitie","CapabilitiesService","getInfo","requestOptions","finalUrl","Charset","CAPABILITIES_API","log","Info","GetInfoService","INFO_API","Cartography","CartographyService","cartographyConnection","cartographyService","cartographySelectionService","selectionService","CARTOGRAPHY_API","CartographyGroup","CartographyGroupService","CARTOGRAPHY_GROUP_API","CartographyAvailability","CartographyAvailabilityService","CARTOGRAPHY_AVAILABILITY_API","CartographyFilter","CartographyFilterService","territorialLevel","CARTOGRAPHY_FILTER_API","CartographyParameter","CartographyParameterService","CARTOGRAPHY_PARAMETER_API","CartographySpatialSelectionParameterService","CARTOGRAPHY_SPATIAL_SELECTION_PARAMETER_API","CartographyStyle","CartographyStyleService","CARTOGRAPHY_STYLES_API","Background","BackgroundService","backgroundCartographyGroup","cartographyGroup","BACKGROUND_API","Tree","TreeService","TREE_API","TreeNode","TreeNodeService","itemCartography","itemParent","treeNodeParent","itemTree","tree","parent","TREE_NODE_API","Application","ApplicationService","applicationSituationMap","situationMap","APPLICATION_API","ApplicationBackground","ApplicationBackgroundService","application","background","APPLICATION_BACKGROUND_API","ApplicationParameter","ApplicationParameterService","APPLICATION_PARAMETER_API","CodeList","CodeListService","CODELIST_API","Layer","visibility","opacity","attributions","desc","url_transparent","url_bgcolor","extent","queryable","OptionalParameter","LayerConfiguration","LayerGroup","MapOptionsConfiguration","MapComponentStatus","loaded","MapConfigurationManagerService","loadLayersConfiguration","configuration","layers","clearLayers","setLayers","loadBaseLayersConfiguration","setBaseLayerGroups","getBaseLayerGroups","baseLayerGroupsSubject","groups","baseLayerGroups","refreshBaseLayerGroups","getLayers","layersSubject","refresh","pop","refreshLayers","addLayer","layer","refreshAddLayers","addLayerAt","index","slice","refreshLayerConfiguration","removeLayer","removeLayerIndex","removeLayerId","iLen","splice","refreshRemoveLayers","getLayersAdded","addLayersSubject","getLayersRemoved","removeLayersSubject","getLayerConfigurationListener","layerConfigurationSubject","getLayerIndexById","moveLayer","layerIndex","changeLayerVisibility","changeLayerOpacity","position","getSituationMapConfigurationListener","situationMapConfigurationSubject","loadSituationMapConfiguration","getMapOptionsConfigurationListener","mapOptionsConfigurationSubject","loadMapOptionsConfiguration","getMapComponentStatusListener","mapComponentStatusSubject","setMapComponentStatus","BehaviorSubject","defineProperty","HasAnyAuthorityDirective","updateView","viewContainerRef","clear","createEmbeddedView","templateRef","Directive","selector","TemplateRef","ViewContainerRef","Input","HasAnyAuthorityOnTerritoryDirective","opts","createTranslateLoader","TranslateHttpLoader","SitmunFrontendCoreModule","forRoot","ngModule","providers","provide","HTTP_INTERCEPTORS","useClass","multi","NgModule","imports","TranslateModule","loader","TranslateLoader","useFactory","ɵ0","deps","declarations","exports","AngularHalModule","HttpClientModule"],"mappings":"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"}