{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@sitmun/frontend-core/angular-hal/src/lib/resource-array.ts","ng://@sitmun/frontend-core/angular-hal/src/lib/resource-helper.ts","ng://@sitmun/frontend-core/angular-hal/src/lib/resource.ts","ng://@sitmun/frontend-core/user/user.model.ts","ng://@sitmun/frontend-core/angular-hal/src/lib/external.service.ts","ng://@sitmun/frontend-core/angular-hal/src/lib/resource.service.ts","ng://@sitmun/frontend-core/angular-hal/src/lib/rest.service.ts","ng://@sitmun/frontend-core/account/account.service.ts","ng://@sitmun/frontend-core/auth/auth.service.ts","ng://@sitmun/frontend-core/auth/auth.interceptor.ts","ng://@sitmun/frontend-core/auth/principal.service.ts","ng://@sitmun/frontend-core/auth/auth-expired.interceptor.ts","ng://@sitmun/frontend-core/auth/login.service.ts","ng://@sitmun/frontend-core/dashboard/dashboard.service.ts","ng://@sitmun/frontend-core/user/user.service.ts","ng://@sitmun/frontend-core/user/user-position.model.ts","ng://@sitmun/frontend-core/user/user-position.service.ts","ng://@sitmun/frontend-core/user/user-configuration.model.ts","ng://@sitmun/frontend-core/user/user-configuration.service.ts","ng://@sitmun/frontend-core/territory/territory.model.ts","ng://@sitmun/frontend-core/territory/territory.service.ts","ng://@sitmun/frontend-core/territory/territory-type.model.ts","ng://@sitmun/frontend-core/territory/territory-type.service.ts","ng://@sitmun/frontend-core/territory/territory-group-type.model.ts","ng://@sitmun/frontend-core/territory/territory-group-type.service.ts","ng://@sitmun/frontend-core/role/role.model.ts","ng://@sitmun/frontend-core/role/role.service.ts","ng://@sitmun/frontend-core/connection/connection.model.ts","ng://@sitmun/frontend-core/connection/connection.service.ts","ng://@sitmun/frontend-core/task/task.model.ts","ng://@sitmun/frontend-core/task/task.service.ts","ng://@sitmun/frontend-core/task/task-type.model.ts","ng://@sitmun/frontend-core/task/task-type.service.ts","ng://@sitmun/frontend-core/task/task-group.model.ts","ng://@sitmun/frontend-core/task/task-group.service.ts","ng://@sitmun/frontend-core/task/task-parameter.model.ts","ng://@sitmun/frontend-core/task/task-parameter.service.ts","ng://@sitmun/frontend-core/task/task-availability.model.ts","ng://@sitmun/frontend-core/task/task-availability.service.ts","ng://@sitmun/frontend-core/task/task-ui.model.ts","ng://@sitmun/frontend-core/task/task-ui.service.ts","ng://@sitmun/frontend-core/translation/translation.model.ts","ng://@sitmun/frontend-core/translation/translation.service.ts","ng://@sitmun/frontend-core/translation/language.model.ts","ng://@sitmun/frontend-core/translation/language.service.ts","ng://@sitmun/frontend-core/service/service.model.ts","ng://@sitmun/frontend-core/service/service.service.ts","ng://@sitmun/frontend-core/configuration/configuration-parameters.model.ts","ng://@sitmun/frontend-core/configuration/configuration-parameters.service.ts","ng://@sitmun/frontend-core/service/service-parameter.model.ts","ng://@sitmun/frontend-core/service/service-parameter.service.ts","ng://@sitmun/frontend-core/capabilities/capabilitie.model.ts","ng://@sitmun/frontend-core/capabilities/capabilities.service.ts","ng://@sitmun/frontend-core/getInfo/info.model.ts","ng://@sitmun/frontend-core/getInfo/getInfo.service.ts","ng://@sitmun/frontend-core/cartography/cartography.model.ts","ng://@sitmun/frontend-core/cartography/cartography.service.ts","ng://@sitmun/frontend-core/cartography/cartography-group.model.ts","ng://@sitmun/frontend-core/cartography/cartography-group.service.ts","ng://@sitmun/frontend-core/cartography/cartography-availability.model.ts","ng://@sitmun/frontend-core/cartography/cartography-availability.service.ts","ng://@sitmun/frontend-core/cartography/cartography-filter.model.ts","ng://@sitmun/frontend-core/cartography/cartography-filter.service.ts","ng://@sitmun/frontend-core/cartography/cartography-parameter.model.ts","ng://@sitmun/frontend-core/cartography/cartography-parameter.service.ts","ng://@sitmun/frontend-core/cartography/cartography-spatial-selection-parameter.service.ts","ng://@sitmun/frontend-core/cartography/cartography-style.model.ts","ng://@sitmun/frontend-core/cartography/cartography-style.service.ts","ng://@sitmun/frontend-core/cartography/background.model.ts","ng://@sitmun/frontend-core/cartography/background.service.ts","ng://@sitmun/frontend-core/tree/tree.model.ts","ng://@sitmun/frontend-core/tree/tree.service.ts","ng://@sitmun/frontend-core/tree/tree-node.model.ts","ng://@sitmun/frontend-core/tree/tree-node.service.ts","ng://@sitmun/frontend-core/application/application.model.ts","ng://@sitmun/frontend-core/application/application.service.ts","ng://@sitmun/frontend-core/application/application-background.model.ts","ng://@sitmun/frontend-core/application/application-background.service.ts","ng://@sitmun/frontend-core/application/application-parameter.model.ts","ng://@sitmun/frontend-core/application/application-parameter.service.ts","ng://@sitmun/frontend-core/codelist/codelist.model.ts","ng://@sitmun/frontend-core/codelist/codelist.service.ts","ng://@sitmun/frontend-core/map/map-configuration-manager.service.ts","ng://@sitmun/frontend-core/auth/has-any-authority.directive.ts","ng://@sitmun/frontend-core/auth/has-any-authority-on-territory.directive.ts","ng://@sitmun/frontend-core/sitmun-frontend-core.module.ts","ng://@sitmun/frontend-core/angular-hal/src/lib/angular-hal.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","__read","n","r","e","ar","push","error","__spread","arguments","concat","ResourceArray","_this","totalElements","totalPages","pageNumber","result","el","init","type","response","sortInfo","ResourceHelper","createEmptyResult","_embedded","instantiateResourceCollection","next_uri","getHttp","get","getProxy","headers","pipe","map","catchError","observableThrowError","prev","prev_uri","first","first_uri","last","last_uri","page","self_uri","replace","urlParsed","url.parse","query","replaceOrAdd","pageSize","toString","uri","addSortInfo","sortElements","sort","_i","size","_b","tslib_1.__values","_c","item","path","order","field","idx","indexOf","idxNextAmp","seachValue","substring","optionParams","params","options","_d","param","append","key","_e","_f","sortString","resolveRelations","resource","isNullOrUndefined","className","find","isArray","array","forEach","element","isPrimitive","resourceArray","getClassName","obj","results","exec","objProto","classNames","getPrototypeOf","payload","builder","embeddedName","keys","embeddedClassName","items","items_1","e_4","items_1_1","instance","searchSubtypes","instantiateResource","number","_links","self","href","undefined","subtypes","from","subtypeKey","toLowerCase","startsWith","subtype","entity","setProxyUri","proxy_uri","setRootUri","root_uri","getURL","addSlash","uriParsed","search","url","setHttp","http","getRootUri","HttpHeaders","Resource","defineProperty","_subtypes","getRelationArray","relation","HttpParams","observableOf","getRelation","data","lastIndexOf","realClassName","addRelation","header","post","updateRelation","patch","substituteRelation","put","substituteAllRelation","resources","deleteRelation","link","relationId","delete","deleteAllRelation","Injectable","User","tslib_1.__extends","ExternalService","externalConfigurationService","getProxyUri","updateExternalConfigurationHandlerInterface","getExternalConfiguration","Inject","args","ResourceService","externalService","getAll","subType","ignoreProjection","getResourceUrl","setUrls","id","setUrlsResource","getBySelfLink","resourceLink","searchSingle","customQuery","getByRelation","getByRelationArray","count","observe","Number","body","selfResource","status","update","updateCollection","headersReq","set","hasNext","hasPrev","hasFirst","hasLast","apply","endsWith","proxyUrl","rootUrl","RestService","injector","resourceService","handleError","mergeMap","notPaged","selfLink","totalElement","AccountService","_super","ACCOUNT_API","save","changePassword","Injector","HttpClient","AuthService","AUTH_API","getToken","sessionStorage","getItem","login","credentials","username","password","resp","ok","jwt","id_token","storeAuthenticationToken","bind","loginWithToken","Promise","resolve","reject","setItem","isLoggedIn","isLoggedOut","logout","Observable","observer","removeItem","complete","AuthInterceptor","intercept","request","token","clone","setHeaders","Authorization","handle","Principal","account","authenticated","authenticationState","Subject","authenticate","identity","userIdentity","hasAnyAuthority","authorities","hasAnyAuthorityDirect","hasAnyAuthorityOnTerritory","territory","hasAnyAuthorityDirectOnTerritory","includes","authoritiesPerTerritory","hasAuthority","authority","then","hasAuthorityOnTerritory","force","toPromise","catch","err","isAuthenticated","isIdentityResolved","getAuthenticationState","asObservable","AuthExpiredInterceptor","router","authService","principal","do","event","HttpErrorResponse","subscribe","navigate","Router","LoginService","authServerProvider","callback","cb","DashboardService","DASHBOARD_API","DASHBOARD_EMBEDDED","providedIn","UserService","USER_API","remove","UserPosition","UserPositionService","USER_POSITION_API","user","console","UserConfiguration","UserConfigurationService","USER_CONFIGURATION_API","role","roleChildren","Territory","TerritoryService","TERRITORY_API","territoryGroupType","territoryType","groupType","TerritoryType","TerritoryTypeService","TERRITORYTYPE_API","TerritoryGroupType","TerritoryGroupTypeService","TERRITORYGROUPTYPE_API","Role","RoleService","ROLE_API","Connection","ConnectionService","CONNECTION_API","testConnection","Task","TaskService","service","split","cartography","connection","ui","group","roles","TaskType","TaskTypeService","TaskGroup","TaskGroupService","TaskParameter","TaskParameterService","TASK_PARAMETER_API","task","TaskAvailability","TaskAvailabilityService","TASK_AVAILABILITY_API","TaskUI","TaskUIService","Translation","TranslationService","TRANSLATION_API","language","Language","LanguageService","LANGUAGES_API","Service","ServiceService","SERVICE_API","serviceConnection","ConfigurationParameter","ConfigurationParametersService","CONFIGURATION_PARAMETERS_API","ServiceParameter","ServiceParameterService","SERVICE_PARAMETER_API","Capabilitie","CapabilitiesService","CAPABILITIES_API","getInfo","requestOptions","Charset","finalUrl","log","Info","GetInfoService","INFO_API","Cartography","CartographyService","CARTOGRAPHY_API","cartographyConnection","cartographyService","cartographySelectionService","selectionService","CartographyGroup","CartographyGroupService","CARTOGRAPHY_GROUP_API","CartographyAvailability","CartographyAvailabilityService","CARTOGRAPHY_AVAILABILITY_API","CartographyFilter","CartographyFilterService","CARTOGRAPHY_FILTER_API","territorialLevel","CartographyParameter","CartographyParameterService","CARTOGRAPHY_PARAMETER_API","CartographySpatialSelectionParameterService","CARTOGRAPHY_SPATIAL_SELECTION_PARAMETER_API","CartographyStyle","CartographyStyleService","CARTOGRAPHY_STYLES_API","Background","BackgroundService","BACKGROUND_API","backgroundCartographyGroup","cartographyGroup","Tree","TreeService","TREE_API","TreeNode","TreeNodeService","TREE_NODE_API","itemTree","tree","itemCartography","itemParent","parent","treeNodeParent","Application","ApplicationService","APPLICATION_API","applicationSituationMap","situationMap","ApplicationBackground","ApplicationBackgroundService","APPLICATION_BACKGROUND_API","application","background","ApplicationParameter","ApplicationParameterService","APPLICATION_PARAMETER_API","CodeList","CodeListService","CODELIST_API","visibility","opacity","attributions","desc","url_transparent","url_bgcolor","extent","queryable","loaded","MapConfigurationManagerService","layersSubject","BehaviorSubject","layers","baseLayerGroupsSubject","baseLayerGroups","layerConfigurationSubject","addLayersSubject","removeLayersSubject","situationMapConfigurationSubject","mapOptionsConfigurationSubject","mapComponentStatusSubject","loadLayersConfiguration","configuration","clearLayers","setLayers","loadBaseLayersConfiguration","setBaseLayerGroups","getBaseLayerGroups","groups","refreshBaseLayerGroups","getLayers","refresh","pop","refreshLayers","addLayer","layer","refreshAddLayers","addLayerAt","index","slice","refreshLayerConfiguration","removeLayer","removeLayerIndex","removeLayerId","iLen","splice","refreshRemoveLayers","getLayersAdded","getLayersRemoved","getLayerConfigurationListener","getLayerIndexById","moveLayer","layerIndex","changeLayerVisibility","changeLayerOpacity","position","LayerConfiguration","getSituationMapConfigurationListener","loadSituationMapConfiguration","getMapOptionsConfigurationListener","loadMapOptionsConfiguration","getMapComponentStatusListener","setMapComponentStatus","HasAnyAuthorityDirective","templateRef","viewContainerRef","updateView","clear","createEmbeddedView","Directive","selector","TemplateRef","ViewContainerRef","Input","HasAnyAuthorityOnTerritoryDirective","opts","createTranslateLoader","TranslateHttpLoader","SitmunFrontendCoreModule","forRoot","ngModule","providers","provide","HTTP_INTERCEPTORS","useClass","multi","NgModule","imports","TranslateModule","loader","TranslateLoader","useFactory","ɵ0","deps","declarations","exports","AngularHalModule","HttpClientModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","\r\nimport {throwError as observableThrowError} from 'rxjs';\r\n\r\nimport {catchError, map} from 'rxjs/operators';\r\nimport {Sort} from './sort';\r\nimport {ArrayInterface} from './array-interface';\r\nimport {ResourceHelper} from './resource-helper';\r\nimport {Resource} from './resource';\r\nimport * as url from 'url';\r\nimport {Observable} from 'rxjs';\r\n\r\n/** REST array of resource implementation */\r\nexport class ResourceArray<T extends Resource> implements ArrayInterface<T> {\r\n    /** sorting info */\r\n    public sortInfo: Sort[];\r\n    /** proxy url */\r\n    public proxyUrl: string;\r\n    /** root url */\r\n    public rootUrl: string;\r\n\r\n    /** self url */\r\n    public self_uri: string;\r\n    /** next resource url */\r\n    public next_uri: string;\r\n    /** previous resource url */\r\n    public prev_uri: string;\r\n    /** first resource url */\r\n    public first_uri: string;\r\n    /** last resource url */\r\n    public last_uri: string;\r\n\r\n    /** embedded array list */\r\n    public _embedded;\r\n\r\n    /** total number of elements in this array */\r\n    public totalElements = 0;\r\n    /** total number of pages in the response */\r\n    public totalPages = 1;\r\n    \r\n    /** page number in the response */\r\n    public pageNumber = 1;\r\n    \r\n    /** page size */\r\n    public pageSize: number;\r\n\r\n    /** array components */\r\n    public result: T[] = [];\r\n\r\n    /** push a new resource to the array */\r\n    push = (el: T) => {\r\n        this.result.push(el);\r\n    };\r\n\r\n    /** length of the array */\r\n    length = (): number => {\r\n        return this.result.length;\r\n    };\r\n\r\n    /** load array data from REST request */\r\n    private init = (type: { new(): T }, response: any, sortInfo: Sort[]): ResourceArray<T> => {\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(this._embedded);\r\n        result.sortInfo = sortInfo;\r\n        ResourceHelper.instantiateResourceCollection(type, response, result);\r\n        return result;\r\n    };\r\n\r\n    /** Load next page */\r\n    next = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.next_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.next_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no next defined');\r\n    };\r\n\r\n    /** Load previous page */\r\n    prev = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.prev_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.prev_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no prev defined');\r\n    };\r\n\r\n    /** Load first page */\r\n    first = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.first_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.first_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no first defined');\r\n    };\r\n\r\n    /** Load last page */\r\n    last = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.last_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.last_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no last defined');\r\n    };\r\n\r\n    /** Load page with given pageNumber*/\r\n    page = (type: { new(): T }, pageNumber: number): Observable<ResourceArray<T>> => {\r\n        this.self_uri = this.self_uri.replace('{?page,size,sort}', '');\r\n        this.self_uri = this.self_uri.replace('{&sort}', '');\r\n        let urlParsed = url.parse(ResourceHelper.getProxy(this.self_uri));\r\n        let query: string = ResourceArray.replaceOrAdd(urlParsed.query, 'size', this.pageSize.toString());\r\n        query = ResourceArray.replaceOrAdd(query, 'page', pageNumber.toString());\r\n\r\n\r\n        let uri = urlParsed.query ?\r\n            ResourceHelper.getProxy(this.self_uri).replace(urlParsed.query, query) : ResourceHelper.getProxy(this.self_uri).concat(query);\r\n        uri = this.addSortInfo(uri);\r\n        return ResourceHelper.getHttp().get(uri, {headers: ResourceHelper.headers}).pipe(\r\n            map(response => this.init(type, response, this.sortInfo)),\r\n            catchError(error => observableThrowError(error)),);\r\n    };\r\n\r\n    /** Sort collection based on given sort attribute */\r\n    sortElements = (type: { new(): T }, ...sort: Sort[]): Observable<ResourceArray<T>> => {\r\n        this.self_uri = this.self_uri.replace('{?page,size,sort}', '');\r\n        this.self_uri = this.self_uri.replace('{&sort}', '');\r\n        let uri = ResourceHelper.getProxy(this.self_uri).concat('?', 'size=', this.pageSize.toString(), '&page=', this.pageNumber.toString());\r\n        uri = this.addSortInfo(uri);\r\n        return ResourceHelper.getHttp().get(uri, {headers: ResourceHelper.headers}).pipe(\r\n            map(response => this.init(type, response, sort)),\r\n            catchError(error => observableThrowError(error)),);\r\n    };\r\n\r\n    /** Load page with given size */\r\n    size = (type: { new(): T }, size: number): Observable<ResourceArray<T>> => {\r\n        let uri = ResourceHelper.getProxy(this.self_uri).concat('?', 'size=', size.toString());\r\n        uri = this.addSortInfo(uri);\r\n        return ResourceHelper.getHttp().get(uri, {headers: ResourceHelper.headers}).pipe(\r\n            map(response => this.init(type, response, this.sortInfo)),\r\n            catchError(error => observableThrowError(error)),);\r\n    };\r\n\r\n    /** Add sort info to given URI */\r\n    private addSortInfo(uri: string) {\r\n        if (this.sortInfo) {\r\n            for (const item of this.sortInfo) {\r\n                uri = uri.concat('&sort=', item.path, ',', item.order);\r\n            }\r\n        }\r\n        return uri;\r\n    }\r\n\r\n    /** Add replace or add param value to query string */\r\n    private static replaceOrAdd(query: string, field: string, value: string): string {\r\n        if (query) {\r\n            let idx: number = query.indexOf(field);\r\n            let idxNextAmp: number = query.indexOf('&', idx) == -1 ? query.indexOf('/', idx) : query.indexOf('&', idx);\r\n\r\n            if (idx != -1) {\r\n                let seachValue = query.substring(idx, idxNextAmp);\r\n                query = query.replace(seachValue, field + '=' + value);\r\n            } else {\r\n                query = query.concat(\"&\" + field + '=' + value);\r\n            }\r\n        } else {\r\n            query = \"?\" + field + '=' + value;\r\n        }\r\n        return query;\r\n    }\r\n}\r\n","import {HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';\r\nimport {Resource} from './resource';\r\nimport {ResourceArray} from './resource-array';\r\nimport {HalOptions} from './rest.service';\r\nimport {SubTypeBuilder} from './subtype-builder';\r\nimport {isNullOrUndefined, isPrimitive} from 'util';\r\nimport * as url from 'url';\r\n\r\n/** REST API access helper */\r\nexport class ResourceHelper {\r\n\r\n    /** HttpHeaders */\r\n    public static headers: HttpHeaders = new HttpHeaders();\r\n    /** Proxy URL */\r\n    private static proxy_uri: string = null;\r\n    /** Root URL */\r\n    private static root_uri: string = null;\r\n    /** HttpClient */\r\n    private static http: HttpClient = null;\r\n\r\n    /** get request headers */\r\n    /*public static get headers(): HttpHeaders {\r\n        if (isNullOrUndefined(this._headers))\r\n          ResourceHelper._headers = new HttpHeaders();\r\n        return ResourceHelper._headers;\r\n    }*/\r\n\r\n    /** set request headers */\r\n    /*public static set headers(headers: HttpHeaders) {\r\n      ResourceHelper._headers = headers;\r\n    }*/\r\n\r\n    /** get request option params */\r\n    static optionParams(params: HttpParams, options?: HalOptions): HttpParams {\r\n        if (options) {\r\n\r\n            if (options.params) {\r\n                for (const param of options.params) {\r\n                    params = params.append(param.key, param.value.toString());\r\n                }\r\n            }\r\n\r\n            if (options.size) {\r\n                params = params.append('size', options.size.toString());\r\n            }\r\n\r\n            if (options.sort) {\r\n                for (const s of options.sort) {\r\n                    let sortString = '';\r\n                    sortString = s.path ? sortString.concat(s.path) : sortString;\r\n                    sortString = s.order ? sortString.concat(',').concat(s.order) : sortString;\r\n                    params = params.append('sort', sortString);\r\n                }\r\n            }\r\n\r\n        }\r\n        return params;\r\n    }\r\n\r\n    /** resolve resource relations */\r\n    static resolveRelations(resource: Resource): Object {\r\n        const result: any = {};\r\n        for (const key in resource) {\r\n            if (!isNullOrUndefined(resource[key])) {\r\n                if (ResourceHelper.className(resource[key])\r\n                    .find((className: string) => className == 'Resource')) {\r\n                    if (resource[key]['_links'])\r\n                        result[key] = resource[key]['_links']['self']['href'];\r\n                } else if (Array.isArray(resource[key])) {\r\n                    let array: any[] = resource[key];\r\n                    if (array) {\r\n                        result[key] = new Array();\r\n                        array.forEach((element) => {\r\n                            if (isPrimitive(element)) {\r\n                                result[key].push(element);\r\n                            }\r\n                            else {\r\n                                result[key].push(this.resolveRelations(element));\r\n                            }\r\n                        });\r\n                    }\r\n                } else {\r\n                    result[key] = resource[key];\r\n                }\r\n            }\r\n        }\r\n        return result as Object;\r\n    }\r\n\r\n    /** create an empty resource from embedded data*/\r\n    static createEmptyResult<T extends Resource>(_embedded: string): ResourceArray<T> {\r\n        let resourceArray: ResourceArray<T> = new ResourceArray<T>();\r\n        resourceArray._embedded = _embedded;\r\n        return resourceArray;\r\n    }\r\n\r\n    /** get resource class name*/\r\n    static getClassName(obj: any): string {\r\n        var funcNameRegex = /function (.+?)\\(/;\r\n        var results = (funcNameRegex).exec(obj.constructor.toString());\r\n        return (results && results.length > 1) ? results[1] : '';\r\n    }\r\n\r\n    \r\n    /** get resource class name from a prototype object*/\r\n    static className(objProto: any): string[] {\r\n        let classNames = [];\r\n        let obj = Object.getPrototypeOf(objProto);\r\n        let className: string;\r\n\r\n        while ((className = ResourceHelper.getClassName(obj)) !== 'Object') {\r\n            classNames.push(className);\r\n            obj = Object.getPrototypeOf(obj);\r\n        }\r\n\r\n        return classNames;\r\n    }\r\n\r\n    /** instantiate a ResourceCollection from response embedded data*/\r\n    static instantiateResourceCollection<T extends Resource>(type: { new(): T }, payload: any,\r\n                                                             result: ResourceArray<T>, builder?: SubTypeBuilder,embeddedName?:String): ResourceArray<T> {\r\n        for (const embeddedClassName of Object.keys(payload[result._embedded])) {\r\n            if(!embeddedName || (embeddedName && embeddedClassName==embeddedName)){\r\n                let embedded: any = payload[result._embedded];\r\n                const items = embedded[embeddedClassName];\r\n                for (let item of items) {\r\n                    let instance: T = new type();\r\n                    instance = this.searchSubtypes(builder, embeddedClassName, instance);\r\n\r\n                    this.instantiateResource(instance, item);\r\n                    result.push(instance);\r\n                }\r\n            }\r\n        }\r\n\r\n        result.totalElements = payload.page ? payload.page.totalElements : result.length;\r\n        result.totalPages = payload.page ? payload.page.totalPages : 1;\r\n        result.pageNumber = payload.page ? payload.page.number : 1;\r\n        result.pageSize = payload.page ? payload.page.size : 20;\r\n\r\n        result.self_uri = payload._links && payload._links.self ? payload._links.self.href : undefined;\r\n        result.next_uri = payload._links && payload._links.next ? payload._links.next.href : undefined;\r\n        result.prev_uri = payload._links && payload._links.prev ? payload._links.prev.href : undefined;\r\n        result.first_uri = payload._links && payload._links.first ? payload._links.first.href : undefined;\r\n        result.last_uri = payload._links && payload._links.last ? payload._links.last.href : undefined;\r\n        return result;\r\n    }\r\n\r\n    /** search subtypes*/\r\n    static searchSubtypes<T extends Resource>(builder: SubTypeBuilder, embeddedClassName: string, instance: T) {\r\n        if (builder && builder.subtypes) {\r\n            let keys = builder.subtypes.keys();\r\n            Array.from(keys).forEach((subtypeKey: string) => {\r\n                if (embeddedClassName.toLowerCase().startsWith(subtypeKey.toLowerCase())) {\r\n                    let subtype: { new(): any } = builder.subtypes.get(subtypeKey);\r\n                    instance = new subtype();\r\n                }\r\n            });\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    /** instantiate a Resource from response */\r\n    static instantiateResource<T extends Resource>(entity: T, payload: Object): T {\r\n        for (const p in payload) {\r\n            //TODO array init\r\n            /* if(entity[p].constructor === Array && isNullOrUndefined(payload[p]))\r\n                 entity[p] = [];\r\n             else*/\r\n            entity[p] = payload[p];\r\n        }\r\n        return entity;\r\n    }\r\n\r\n    /** set proxy URL */\r\n    static setProxyUri(proxy_uri: string) {\r\n        ResourceHelper.proxy_uri = proxy_uri;\r\n    }\r\n\r\n    /** set Root URI */\r\n    static setRootUri(root_uri: string) {\r\n        ResourceHelper.root_uri = root_uri;\r\n    }\r\n\r\n    /** get proxy URL */\r\n    public static getURL(): string {\r\n        return ResourceHelper.proxy_uri && ResourceHelper.proxy_uri != '' ?\r\n            ResourceHelper.addSlash(ResourceHelper.proxy_uri) :\r\n            ResourceHelper.addSlash(ResourceHelper.root_uri);\r\n    }\r\n\r\n    /** add slash to URI */\r\n    private static addSlash(uri: string): string {\r\n        let uriParsed = url.parse(uri);\r\n        if (isNullOrUndefined(uriParsed.search) && uri && uri[uri.length - 1] != '/')\r\n            return uri + '/';\r\n        return uri;\r\n    }\r\n\r\n    /** get proxy from URL */\r\n    public static getProxy(url: string): string {\r\n        if (!ResourceHelper.proxy_uri || ResourceHelper.proxy_uri == '')\r\n            return url;\r\n        return ResourceHelper.addSlash(url.replace(ResourceHelper.root_uri, ResourceHelper.proxy_uri));\r\n    }\r\n\r\n    /** set HttpClient*/\r\n    public static setHttp(http: HttpClient) {\r\n        ResourceHelper.http = http;\r\n    }\r\n\r\n    /** get HttpClient*/\r\n    public static getHttp(): HttpClient {\r\n        return ResourceHelper.http;\r\n    }\r\n\r\n    /** get root URI*/\r\n    static getRootUri() {\r\n        return ResourceHelper.root_uri;\r\n    }\r\n}\r\n","\r\nimport {throwError as observableThrowError, of as observableOf} from 'rxjs';\r\n\r\nimport {map} from 'rxjs/operators';\r\n\r\n\r\nimport {HttpParams} from '@angular/common/http';\r\nimport {ResourceHelper} from './resource-helper';\r\nimport {ResourceArray} from './resource-array';\r\nimport {isNullOrUndefined} from 'util';\r\n\r\nimport {HalOptions} from './rest.service';\r\nimport {SubTypeBuilder} from './subtype-builder';\r\nimport {Injectable} from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\n\r\n/** Abstract resource class*/\r\n@Injectable()\r\nexport abstract class Resource {\r\n\r\n    /** proxy URL */\r\n    public proxyUrl: string;\r\n    /** root URL */\r\n    public rootUrl: string;\r\n\r\n    /** links */\r\n    public _links: any;\r\n    /** subtypes */\r\n    public _subtypes: Map<string, any>;\r\n\r\n    \r\n    /** get subtypes */    \r\n    public get subtypes(): Map<string, any> {\r\n        return this._subtypes;\r\n    }\r\n\r\n    /** set subtypes */\r\n    public set subtypes(_subtypes: Map<string, any>) {\r\n        this._subtypes = _subtypes;\r\n    }\r\n\r\n    /** constructor*/\r\n    constructor() {\r\n    }\r\n\r\n    /** Get collection of related resources */\r\n    public getRelationArray<T extends Resource>(type: { new(): T }, relation: string, _embedded?: string, options?: HalOptions, builder?: SubTypeBuilder): Observable<T[]> {\r\n\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(isNullOrUndefined(_embedded) ? \"_embedded\" : _embedded);\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let observable = ResourceHelper.getHttp().get(ResourceHelper.getProxy(this._links[relation].href), {\r\n                headers: ResourceHelper.headers,\r\n                params: params\r\n            });\r\n            return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection<T>(type, response, result, builder)),\r\n                map((array: ResourceArray<T>) => array.result),);\r\n        } else {\r\n            return observableOf([]);\r\n        }\r\n    }\r\n\r\n    /** Get related resource */\r\n    public getRelation<T extends Resource>(type: { new(): T }, relation: string, builder?: SubTypeBuilder): Observable<T> {\r\n        let result: T = new type();\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let observable = ResourceHelper.getHttp().get(ResourceHelper.getProxy(this._links[relation].href), {headers: ResourceHelper.headers});\r\n            return observable.pipe(map((data: any) => {\r\n                if (builder) {\r\n                    for (const embeddedClassName of Object.keys(data['_links'])) {\r\n                        if (embeddedClassName == 'self') {\r\n                            let href: string = data._links[embeddedClassName].href;\r\n                            let idx: number = href.lastIndexOf('/');\r\n                            let realClassName = href.replace(ResourceHelper.getRootUri(), \"\").substring(0, idx);\r\n                            result = ResourceHelper.searchSubtypes(builder, realClassName, result);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                return ResourceHelper.instantiateResource(result, data);\r\n            }));\r\n        } else {\r\n            return observableOf(null);\r\n        }\r\n    }\r\n\r\n    /** Adds the given resource to the bound collection by the relation */\r\n    public addRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().post(ResourceHelper.getProxy(this._links[relation].href), resource._links.self.href, {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n\r\n    /** Bind the given resource to this resource by the given relation*/\r\n    public updateRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().patch(ResourceHelper.getProxy(this._links[relation].href), resource._links.self.href, {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n\r\n    /** Bind the given resource to this resource by the given relation*/\r\n    public substituteRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().put(ResourceHelper.getProxy(this._links[relation].href), resource._links.self.href, {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n    \r\n    \r\n    /** Bind the given resource to this resource by the given relation*/\r\n    public substituteAllRelation<T extends Resource>(relation: string, resources: Resource[]): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().put(ResourceHelper.getProxy(this._links[relation].href), resources.map((resource) => resource._links.self.href), {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /** Unbind the resource with the given relation from this resource*/\r\n    public deleteRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(resource._links)) {\r\n            let link: string = resource._links['self'].href;\r\n            let idx: number = link.lastIndexOf('/') + 1;\r\n\r\n            if (idx == -1)\r\n                return observableThrowError('no relation found');\r\n\r\n            let relationId: string = link.substring(idx);\r\n            return ResourceHelper.getHttp().delete(ResourceHelper.getProxy(this._links[relation].href + '/' + relationId), {headers: ResourceHelper.headers});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n    \r\n    /** Unbind the resource with the given relation from this resource*/\r\n    public deleteAllRelation<T extends Resource>(relation: string): Observable<any> {\r\n        return ResourceHelper.getHttp().delete(ResourceHelper.getProxy(this._links[relation].href ), {headers: ResourceHelper.headers});\r\n        \r\n    }\r\n\r\n}","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { UserConfiguration } from './user-configuration.model';\r\nimport { UserPosition } from './user-position.model';\r\n\r\n/**\r\n * User model\r\n */\r\nexport class User extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** username */\r\n  public username: string;\r\n  /** password */\r\n  public password: string;\r\n  /** first name */\r\n  public firstName: string;\r\n  /** last name */\r\n  public lastName: string;\r\n  /** whether user is blocked */\r\n  public blocked: boolean;\r\n  /** whether user is administrator */\r\n  public administrator: boolean;\r\n  /** Is passwordSet */\r\n  public passwordSet: boolean;\r\n  /** user positions */\r\n  public positions: UserPosition[];\r\n  /** user permissions */\r\n  public permissions: UserConfiguration[];\r\n}\r\n","import {HttpClient} from '@angular/common/http';\r\nimport {Inject, Injectable} from '@angular/core';\r\nimport {ResourceHelper} from './resource-helper';\r\nimport {ExternalConfigurationHandlerInterface} from './external-configuration.handler';\r\nimport {ExternalConfiguration} from './ExternalConfiguration';\r\n\r\n\r\n/** ExternalService */\r\n@Injectable()\r\nexport class ExternalService {\r\n\r\n    /** constructor */\r\n    constructor(@Inject('ExternalConfigurationService') private externalConfigurationService: ExternalConfigurationHandlerInterface) {\r\n        ResourceHelper.setProxyUri(externalConfigurationService.getProxyUri());\r\n        ResourceHelper.setRootUri(externalConfigurationService.getRootUri());\r\n        ResourceHelper.setHttp(externalConfigurationService.getHttp());\r\n    }\r\n\r\n    /** update ExternalConfigurationHandler */\r\n    public updateExternalConfigurationHandlerInterface(externalConfigurationService: ExternalConfigurationHandlerInterface) {\r\n\tthis.externalConfigurationService = externalConfigurationService;\r\n\r\n        ResourceHelper.setProxyUri(externalConfigurationService.getProxyUri());\r\n        ResourceHelper.setRootUri(externalConfigurationService.getRootUri());\r\n        ResourceHelper.setHttp(externalConfigurationService.getHttp());\r\n    }\r\n\r\n    /** get ExternalConfiguration */\r\n    public getExternalConfiguration(): ExternalConfiguration {\r\n        return this.externalConfigurationService.getExternalConfiguration();\r\n    }\r\n\r\n    /** get proxy URL */\r\n    public getProxyUri(): string {\r\n        return this.externalConfigurationService.getProxyUri();\r\n    }\r\n\r\n    /** get Root URI */\r\n    public getRootUri(): string {\r\n        return this.externalConfigurationService.getRootUri();\r\n    }\r\n\r\n    /** get URL */\r\n    public getURL(): string {\r\n        return ResourceHelper.getURL();\r\n    }\r\n\r\n    /** get HttpClient */\r\n    public getHttp(): HttpClient {\r\n        return ResourceHelper.getHttp();\r\n    }\r\n}\r\n","\r\nimport { throwError as observableThrowError } from 'rxjs';\r\n\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { Resource } from './resource';\r\nimport { ResourceHelper } from './resource-helper';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Sort } from './sort';\r\nimport { ResourceArray } from './resource-array';\r\nimport { ExternalService } from './external.service';\r\nimport { HalOptions } from './rest.service';\r\nimport { SubTypeBuilder } from './subtype-builder';\r\nimport { Observable } from 'rxjs';\r\n\r\n/** ResourceService */\r\n@Injectable()\r\nexport class ResourceService {\r\n\r\n\r\n    /** constructor */\r\n    constructor(private externalService: ExternalService) { }\r\n\r\n\r\n    /** get URL */\r\n    private static getURL(): string {\r\n        return ResourceHelper.getURL();\r\n    }\r\n\r\n    /** get all resources from a base URI of a given type */\r\n    public getAll<T extends Resource>(type: { new(): T }, resource: string, _embedded: string, options?: HalOptions, subType?: SubTypeBuilder, embeddedName?:String, ignoreProjection?:boolean): Observable<ResourceArray<T>> {\r\n        let uri = this.getResourceUrl(resource);\r\n        if(!ignoreProjection){\r\n            uri = uri.concat('?projection=view');\r\n        }\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        result.sortInfo = options ? options.sort : undefined;\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, params: params });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result, subType,embeddedName)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** get resource from a base URI and a given id */\r\n    public get<T extends Resource>(type: { new(): T }, resource: string, id: any): Observable<T> {\r\n        const uri = this.getResourceUrl(resource).concat('/', id, '?projection=view');\r\n        const result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers });\r\n        return observable.pipe(map(data => ResourceHelper.instantiateResource(result, data)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** get resource from its selflink */\r\n    public getBySelfLink<T extends Resource>(type: { new(): T }, resourceLink: string): Observable<T> {\r\n        const result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(ResourceHelper.getProxy(resourceLink), { headers: ResourceHelper.headers });\r\n        return observable.pipe(map(data => ResourceHelper.instantiateResource(result, data)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** search resources from a given base path, query and options */\r\n    public search<T extends Resource>(type: { new(): T }, query: string, resource: string, _embedded: string, options?: HalOptions): Observable<ResourceArray<T>> {\r\n        const uri = this.getResourceUrl(resource).concat('/search/', query);\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, params: params });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** search a single resource from a given base path, query and options */\r\n    public searchSingle<T extends Resource>(type: { new(): T }, query: string, resource: string, options?: HalOptions): Observable<T> {\r\n        const uri = this.getResourceUrl(resource).concat('/search/', query);\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, params: params });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResource(result, response)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** search resources from a given base path, custom query and options */\r\n    public customQuery<T extends Resource>(type: { new(): T }, query: string, resource: string, _embedded: string, options?: HalOptions): Observable<ResourceArray<T>> {\r\n        const uri = this.getResourceUrl(resource + query);\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, params: params });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** get resource given a relation link */\r\n    public getByRelation<T extends Resource>(type: { new(): T }, resourceLink: string): Observable<T> {\r\n        let result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(resourceLink, { headers: ResourceHelper.headers });\r\n        return observable.pipe(map(data => ResourceHelper.instantiateResource(result, data)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** get resource array given a relation link */\r\n    public getByRelationArray<T extends Resource>(type: { new(): T }, resourceLink: string, _embedded: string, builder?: SubTypeBuilder): Observable<ResourceArray<T>> {\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        let observable = ResourceHelper.getHttp().get(resourceLink, { headers: ResourceHelper.headers });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result, builder)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** count resources given a path */\r\n    public count(resource: string): Observable<number> {\r\n        const uri = this.getResourceUrl(resource).concat('/search/countAll');\r\n\r\n        return ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, observe: 'body' }).pipe(\r\n            map((response: Response) => Number(response.body)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** create resource from self link and entity data*/\r\n    public create<T extends Resource>(selfResource: string, entity: T) {\r\n        const uri = ResourceHelper.getURL() + selfResource;\r\n        const payload = ResourceHelper.resolveRelations(entity);\r\n\r\n        this.setUrlsResource(entity);\r\n        let observable = ResourceHelper.getHttp().post(uri, payload, { headers: ResourceHelper.headers, observe: 'response' });\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return ResourceHelper.instantiateResource(entity, response.body);\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }), catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** update resource from a given entity data*/\r\n    public update<T extends Resource>(entity: T) {\r\n        const uri = ResourceHelper.getProxy(entity._links.self.href);\r\n        const payload = ResourceHelper.resolveRelations(entity);\r\n        this.setUrlsResource(entity);\r\n        let observable = ResourceHelper.getHttp().put(uri, payload, { headers: ResourceHelper.headers, observe: 'response' });\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return ResourceHelper.instantiateResource(entity, response.body);\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }), catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** update resource from a given entity data*/\r\n    public updateCollection<T extends Resource>(resourceArray: ResourceArray<T>, resourceLink: string) {\r\n        const uri = ResourceHelper.getProxy(resourceLink);\r\n        //const payload = ResourceHelper.resolveRelations(entity);\r\n        //this.setUrlsResource(entity);\r\n        var headersReq = ResourceHelper.headers;\r\n        headersReq.set(\"Content-Type\", \"text/uri-list\");\r\n        let observable = ResourceHelper.getHttp().put(uri, resourceArray, { headers: headersReq, observe: 'response' });\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return \"\";\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }), catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** patch resource from a given entity data*/\r\n    public patch<T extends Resource>(entity: T) {\r\n        const uri = ResourceHelper.getProxy(entity._links.self.href);\r\n        const payload = ResourceHelper.resolveRelations(entity);\r\n        this.setUrlsResource(entity);\r\n        let observable = ResourceHelper.getHttp().patch(uri, payload, { headers: ResourceHelper.headers, observe: 'response' });\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return ResourceHelper.instantiateResource(entity, response.body);\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }), catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** delete resource from a given entity data*/\r\n    public delete<T extends Resource>(entity: T): Observable<Object> {\r\n        const uri = ResourceHelper.getProxy(entity._links.self.href);\r\n        return ResourceHelper.getHttp().delete(uri, { headers: ResourceHelper.headers }).pipe(catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** whether a resource array has next page of results*/\r\n    public hasNext<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.next_uri != undefined;\r\n    }\r\n\r\n    /** whether a resource array has previous page of results*/\r\n    public hasPrev<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.prev_uri != undefined;\r\n    }\r\n\r\n    /** whether a resource array has first page of results*/\r\n    public hasFirst<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.first_uri != undefined;\r\n    }\r\n\r\n    /** whether a resource array has last page of results*/\r\n    public hasLast<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.last_uri != undefined;\r\n    }\r\n\r\n    /** get resource array next page of results*/\r\n    public next<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.next(type);\r\n    }\r\n\r\n    /** get resource array previous page of results*/\r\n    public prev<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.prev(type);\r\n    }\r\n\r\n    /** get resource array first page of results*/\r\n    public first<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.first(type);\r\n    }\r\n\r\n    /** get resource array last page of results*/\r\n    public last<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.last(type);\r\n    }\r\n\r\n    /** get resource array page of results given a page number*/\r\n    public page<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }, id: number): Observable<ResourceArray<T>> {\r\n        return resourceArray.page(type, id);\r\n    }\r\n\r\n    /** sort resource array with a given sorting params */\r\n    public sortElements<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }, ...sort: Sort[]): Observable<ResourceArray<T>> {\r\n        return resourceArray.sortElements(type, ...sort);\r\n    }\r\n\r\n    /** get resource array size*/\r\n    public size<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }, size: number): Observable<ResourceArray<T>> {\r\n        return resourceArray.size(type, size);\r\n    }\r\n\r\n    /** get resource URL from a given path*/\r\n    public getResourceUrl(resource?: string): string {\r\n        let url = ResourceService.getURL();\r\n        if (!url.endsWith('/')) {\r\n            url = url.concat('/');\r\n        }\r\n        if (resource) {\r\n            return url.concat(resource);\r\n        }\r\n        return url;\r\n    }\r\n\r\n    /** set proxy and root urls of given resource array */\r\n    private setUrls<T extends Resource>(result: ResourceArray<T>) {\r\n        result.proxyUrl = this.externalService.getProxyUri();\r\n        result.rootUrl = this.externalService.getRootUri();\r\n    }\r\n\r\n    /** set proxy and root urls of given resource */\r\n    private setUrlsResource<T extends Resource>(result: T) {\r\n        result.proxyUrl = this.externalService.getProxyUri();\r\n        result.rootUrl = this.externalService.getRootUri();\r\n    }\r\n}","import {of as observableOf, throwError as observableThrowError} from 'rxjs';\r\nimport {map, mergeMap} from 'rxjs/operators';\r\nimport {Resource} from './resource';\r\nimport {ResourceArray} from './resource-array';\r\nimport {Sort} from './sort';\r\nimport {ResourceService} from './resource.service';\r\nimport {SubTypeBuilder} from './subtype-builder';\r\nimport {isNullOrUndefined} from 'util';\r\nimport {Observable} from 'rxjs';\r\nimport {Injector} from \"@angular/core\";\r\n\r\n/** HAL param data model */\r\nexport type HalParam = { key: string, value: string | number | boolean };\r\n/** HAL option data model */\r\nexport type HalOptions = { notPaged?: boolean, size?: number, sort?: Sort[], params?: HalParam[] };\r\n\r\n/** REST API access interface */\r\nexport class RestService<T extends Resource> {\r\n    /** resource type */\r\n    private type: any;\r\n    /** resource path */\r\n    private resource: string;\r\n    /** resource array */\r\n    public resourceArray: ResourceArray<T>;\r\n    /** resource service */\r\n    public resourceService: ResourceService;\r\n    /** _embedded field name */\r\n    private _embedded: string = '_embedded';\r\n\r\n    /** constructor */\r\n    constructor(type: { new(): T },\r\n                resource: string,\r\n                private injector: Injector,\r\n                _embedded?: string) {\r\n        this.type = type;\r\n        this.resource = resource;\r\n        this.resourceService = injector.get(ResourceService);\r\n        if (!isNullOrUndefined(_embedded))\r\n            this._embedded = _embedded;\r\n    }\r\n\r\n    /** error handler */\r\n    protected handleError(error: any):Observable<never> {\r\n        return RestService.handleError(error);\r\n    }\r\n\r\n    /** error handler */\r\n    protected static handleError(error: any):Observable<never> {\r\n        return observableThrowError(error);\r\n    }\r\n\r\n    /** get all resources with optional options an subType params */\r\n    public getAll(options?: HalOptions, subType?: SubTypeBuilder, embeddedName?:String, ignoreProjection?:boolean): Observable<T[]> {\r\n        return this.resourceService.getAll(this.type, this.resource, this._embedded, options, subType,embeddedName, ignoreProjection).pipe(\r\n            mergeMap((resourceArray: ResourceArray<T>) => {\r\n                if (options && options.notPaged && !isNullOrUndefined(resourceArray.first_uri)) {\r\n                    options.notPaged = false;\r\n                    options.size = resourceArray.totalElements;\r\n                    return this.getAll(options);\r\n                } else {\r\n                    this.resourceArray = resourceArray;\r\n                    return observableOf(resourceArray.result);\r\n                }\r\n            }));\r\n    }\r\n\r\n    /** get resource from a given id */\r\n    public get(id: any): Observable<T> {\r\n        return this.resourceService.get(this.type, this.resource, id);\r\n    }\r\n\r\n    /** get resource from self link */\r\n    public getBySelfLink(selfLink: string): Observable<T> {\r\n        return this.resourceService.getBySelfLink(this.type, selfLink);\r\n    }\r\n\r\n    /** search resources from a given query string and optional options params */\r\n    public search(query: string, options?: HalOptions): Observable<T[]> {\r\n        return this.resourceService.search(this.type, query, this.resource, this._embedded, options).pipe(\r\n            mergeMap((resourceArray: ResourceArray<T>) => {\r\n                if (options && options.notPaged && !isNullOrUndefined(resourceArray.first_uri)) {\r\n                    options.notPaged = false;\r\n                    options.size = resourceArray.totalElements;\r\n                    return this.search(query, options);\r\n                } else {\r\n                    this.resourceArray = resourceArray;\r\n                    return observableOf(resourceArray.result);\r\n                }\r\n            }));\r\n    }\r\n\r\n    /** search resource from a given query string and optional options params */\r\n    public searchSingle(query: string, options?: HalOptions): Observable<T> {\r\n        return this.resourceService.searchSingle(this.type, query, this.resource, options);\r\n    }\r\n\r\n    /** search resources from a given custom query string and optional options params */\r\n    public customQuery(query: string, options?: HalOptions): Observable<T[]> {\r\n        return this.resourceService.customQuery(this.type, query, this.resource, this._embedded, options).pipe(\r\n            mergeMap((resourceArray: ResourceArray<T>) => {\r\n                if (options && options.notPaged && !isNullOrUndefined(resourceArray.first_uri)) {\r\n                    options.notPaged = false;\r\n                    options.size = resourceArray.totalElements;\r\n                    return this.customQuery(query, options);\r\n                } else {\r\n                    this.resourceArray = resourceArray;\r\n                    return observableOf(resourceArray.result);\r\n                }\r\n            }));\r\n    }\r\n\r\n\r\n    /** get resource array given a relation link */\r\n    public getByRelationArray(relation: string, builder?: SubTypeBuilder): Observable<T[]> {\r\n        return this.resourceService.getByRelationArray(this.type, relation, this._embedded, builder).pipe(\r\n            map((resourceArray: ResourceArray<T>) => {\r\n                this.resourceArray = resourceArray;\r\n                return resourceArray.result;\r\n            }));\r\n    }\r\n\r\n    /** get resource given a relation link */\r\n    public getByRelation(relation: string): Observable<T> {\r\n        return this.resourceService.getByRelation(this.type, relation);\r\n    }\r\n\r\n    /** count resources given a path */\r\n    public count(): Observable<number> {\r\n        return this.resourceService.count(this.resource);\r\n    }\r\n\r\n    /** create resource from self link and entity data*/\r\n    public create(entity: T) {\r\n        return this.resourceService.create(this.resource, entity);\r\n    }\r\n\r\n    /** update resource from a given entity data*/\r\n    public update(entity: T) {\r\n        return this.resourceService.update(entity);\r\n    }\r\n\r\n    /** patch resource from a given entity data*/\r\n    public patch(entity: T) {\r\n        return this.resourceService.patch(entity);\r\n    }\r\n\r\n    /** delete resource from a given entity data*/\r\n    public delete(entity: T): Observable<Object> {\r\n        return this.resourceService.delete(entity);\r\n    }\r\n\r\n    /** get total number of elements of resource array */\r\n    public totalElement(): number {\r\n        if (this.resourceArray && this.resourceArray.totalElements)\r\n            return this.resourceArray.totalElements;\r\n        return 0;\r\n    }\r\n\r\n    /** whether a resource array has first page of results*/\r\n    public hasFirst(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasFirst(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** whether a resource array has next page of results*/\r\n    public hasNext(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasNext(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** whether a resource array has previous page of results*/\r\n    public hasPrev(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasPrev(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** whether a resource array has last page of results*/\r\n    public hasLast(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasLast(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** get resource array next page of results*/\r\n    public next(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.next(this.resourceArray, this.type).pipe(\r\n                map((resourceArray: ResourceArray<T>) => {\r\n                    this.resourceArray = resourceArray;\r\n                    return resourceArray.result;\r\n                }));\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array previous page of results*/\r\n    public prev(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.prev(this.resourceArray, this.type).pipe(\r\n                map((resourceArray: ResourceArray<T>) => {\r\n                    this.resourceArray = resourceArray;\r\n                    return resourceArray.result;\r\n                }));\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array first page of results*/\r\n    public first(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.first(this.resourceArray, this.type)\r\n                .pipe(\r\n                    map((resourceArray: ResourceArray<T>) => {\r\n                        this.resourceArray = resourceArray;\r\n                        return resourceArray.result;\r\n                    })\r\n                );\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array last page of results*/\r\n    public last(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.last(this.resourceArray, this.type)\r\n                .pipe(\r\n                    map((resourceArray: ResourceArray<T>) => {\r\n                        this.resourceArray = resourceArray;\r\n                        return resourceArray.result;\r\n                    })\r\n                );\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array page of results given a page number*/\r\n    public page(pageNumber: number): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.page(this.resourceArray, this.type, pageNumber).pipe(\r\n                map((resourceArray: ResourceArray<T>) => {\r\n                    this.resourceArray = resourceArray;\r\n                    return resourceArray.result;\r\n                }));\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n}\r\n","import { User } from '../user/user.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n\r\n/** Account manager service */\r\n@Injectable()\r\nexport class AccountService extends RestService<User> {\r\n  \r\n\r\n  /** API resource path */\r\n  public ACCOUNT_API = 'account';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(User, \"account\", injector);\r\n  }\r\n\r\n  /** get logged in user account*/\r\n  get(): Observable<any> {\r\n    let result: Observable<Object>;\r\n    result = this.http.get(this.resourceService.getResourceUrl(this.ACCOUNT_API));\r\n    return result;\r\n  }\r\n  \r\n  /** save account*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    result = this.http.post(this.resourceService.getResourceUrl(this.ACCOUNT_API) , item);\r\n\r\n    return result;\r\n  }\r\n\r\n  /** change logged in user account*/  \r\n  changePassword(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    result = this.http.post(this.resourceService.getResourceUrl(this.ACCOUNT_API+\"/change-password\") , item);\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable} from 'rxjs-compat';\r\nimport {ResourceService} from '../angular-hal/src/lib/resource.service';\r\n//import * as moment from 'moment';\r\n\r\n/** Authentication service*/\r\n@Injectable()\r\nexport class AuthService {\r\n    \r\n  /** API resource path */\r\n  public AUTH_API = 'authenticate';\r\n\r\n    /** constructor*/\r\n    constructor(\r\n        private http: HttpClient,\r\n        private resourceService: ResourceService\r\n    ) {}\r\n    \r\n    /** get current user jwt token from session storage*/\r\n    getToken() {\r\n        return  sessionStorage.getItem('authenticationToken');\r\n    }\r\n\r\n    /** login operation */\r\n    login(credentials): Observable<any> {\r\n\r\n        const data = {\r\n            username: credentials.username,\r\n            password: credentials.password\r\n        };\r\n        return this.http.post(this.resourceService.getResourceUrl(this.AUTH_API), data, {observe : 'response'}).map(authenticateSuccess.bind(this));\r\n\r\n        function authenticateSuccess(resp) {\r\n            if (resp.ok) {\r\n                const jwt = resp.body.id_token;\r\n                this.storeAuthenticationToken(jwt);\r\n                //const expiresAt = moment().add( resp.headers.get('Token-Validity'),'milisecond');\r\n                //sessionStorage.setItem('expires_at', JSON.stringify(expiresAt.valueOf()));\r\n                return jwt;\r\n            }                    \r\n        }\r\n    }\r\n    \r\n    /** login operation with jwt token */\r\n    loginWithToken(jwt) {\r\n        if (jwt) {\r\n            this.storeAuthenticationToken(jwt);\r\n            return Promise.resolve(jwt);\r\n        } else {\r\n            return Promise.reject('auth-jwt-service Promise reject'); // Put appropriate error message here\r\n        }\r\n    }\r\n\r\n    /** store jwt token in session storage*/\r\n    storeAuthenticationToken(jwt) {\r\n       sessionStorage.setItem('authenticationToken', jwt);\r\n        \r\n    }\r\n    \r\n    /** check whether current user is logged in*/\r\n    public isLoggedIn() {\r\n        //return moment().isBefore(this.getExpiration());\r\n        return this.getToken();\r\n    }\r\n    \r\n    /** check whether current user is logged out*/\r\n    isLoggedOut() {\r\n        return !this.isLoggedIn();\r\n    }\r\n\r\n    /** logout operation */\r\n    logout(): Observable<any> {\r\n\r\n        return new Observable((observer) => {\r\n            //localStorage.removeItem('authenticationToken');\r\n            sessionStorage.removeItem('authenticationToken');\r\n            //sessionStorage.removeItem('expires_at');\r\n            observer.complete();\r\n        });\r\n    }\r\n\r\n\r\n    \r\n}\r\n","import { Observable } from 'rxjs';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\r\n\r\n/** Interceptor for authentication token in API requests */\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n\r\n    /** constructor*/\r\n    constructor(\r\n    ) {\r\n    }\r\n    \r\n    /** request handler */\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n        const token = sessionStorage.getItem('authenticationToken');\r\n        if (!!token) {\r\n            request = request.clone({\r\n                setHeaders: {\r\n                    Authorization: 'Bearer ' + token\r\n                }\r\n            });\r\n        }\r\n        return next.handle(request);\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport { AccountService } from '../account/account.service';\r\n\r\n/** Principal service*/\r\n@Injectable()\r\nexport class Principal {\r\n    private userIdentity: any;\r\n    private authenticated = false;\r\n    private authenticationState = new Subject<any>();\r\n\r\n    /** constructor */\r\n    constructor(\r\n        private account: AccountService\r\n    ) {}\r\n\r\n    /** authenticate with given identity*/\r\n    authenticate(identity) {\r\n        this.userIdentity = identity;\r\n        this.authenticated = identity !== null;\r\n        this.authenticationState.next(this.userIdentity);\r\n    }\r\n\r\n    /** check whether current user has any of the given authorities */\r\n    hasAnyAuthority(authorities: string[]): Promise<boolean> {\r\n        return Promise.resolve(this.hasAnyAuthorityDirect(authorities));\r\n    }\r\n\r\n    /** check whether current user has any of the given authorities on the given territory */\r\n    hasAnyAuthorityOnTerritory(authorities: string[],territory: string ): Promise<boolean> {\r\n        return Promise.resolve(this.hasAnyAuthorityDirectOnTerritory(authorities,territory));\r\n    }\r\n\r\n    /** check whether current user has any of the given authorities without resolving promises*/\r\n    hasAnyAuthorityDirect(authorities: string[]): boolean {\r\n        if (!this.authenticated || !this.userIdentity || !this.userIdentity.authorities) {\r\n            return false;\r\n        }\r\n\r\n        for (let i = 0; i < authorities.length; i++) {\r\n            if (this.userIdentity.authorities.includes(authorities[i])) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** check whether current user has any of the given authorities on the given territory without resolving promises */\r\n    hasAnyAuthorityDirectOnTerritory(authorities: string[],territory: string): boolean {\r\n        if (!this.authenticated || !this.userIdentity || !this.userIdentity.authorities) {\r\n            return false;\r\n        }\r\n\r\n        for (let i = 0; i < authorities.length; i++) {\r\n\r\n            if (this.userIdentity.authoritiesPerTerritory[territory] && this.userIdentity.authoritiesPerTerritory[territory].includes(authorities[i])) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** check whether current user has the given authority */\r\n    hasAuthority(authority: string): Promise<boolean> {\r\n        if (!this.authenticated) {\r\n           return Promise.resolve(false);\r\n        }\r\n\r\n        return this.identity().then((id) => {\r\n            return Promise.resolve(id.authorities && id.authorities.includes(authority));\r\n        }, () => {\r\n            return Promise.resolve(false);\r\n        });\r\n    }\r\n\r\n    /** check whether current user has the given authority on the given territory*/\r\n    hasAuthorityOnTerritory(authority: string,territory: string): Promise<boolean> {\r\n        if (!this.authenticated) {\r\n           return Promise.resolve(false);\r\n        }\r\n\r\n        return this.identity().then((id) => {\r\n            return Promise.resolve(id.authoritiesPerTerritory && id.authoritiesPerTerritory[territory] && id.authoritiesPerTerritory[territory].includes(authority));\r\n        }, () => {\r\n            return Promise.resolve(false);\r\n        });\r\n    }\r\n\r\n    /** check user identity*/\r\n    identity(force?: boolean): Promise<any> {\r\n        if (force === true) {\r\n            this.userIdentity = undefined;\r\n        }\r\n\r\n        // check and see if we have retrieved the userIdentity data from the server.\r\n        // if we have, reuse it by immediately resolving\r\n        if (this.userIdentity) {\r\n            return Promise.resolve(this.userIdentity);\r\n        }\r\n\r\n        // retrieve the userIdentity data from the server, update the identity object, and then resolve.\r\n        return this.account.get().toPromise().then((response) => {\r\n            const account = response;\r\n            if (account) {\r\n                this.userIdentity = account;\r\n                this.authenticated = true;\r\n            } else {\r\n                this.userIdentity = null;\r\n                this.authenticated = false;\r\n            }\r\n            this.authenticationState.next(this.userIdentity);\r\n            return this.userIdentity;\r\n        }).catch((err) => {\r\n            this.userIdentity = null;\r\n            this.authenticated = false;\r\n            this.authenticationState.next(this.userIdentity);\r\n            return null;\r\n        });\r\n    }\r\n\r\n    /** check whether current user is authenticated */\r\n    isAuthenticated(): boolean {\r\n        return this.authenticated;\r\n    }\r\n\r\n    /** check whether current user identity is resolved */\r\n    isIdentityResolved(): boolean {\r\n        return this.userIdentity !== undefined;\r\n    }\r\n\r\n    /** get current user authentication state */\r\n    getAuthenticationState(): Observable<any> {\r\n        return this.authenticationState.asObservable();\r\n    }\r\n\r\n\r\n}\r\n","import { Injector, Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from './auth.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Principal } from './principal.service';\r\n\r\n/** Interceptor for authentication expired response in API requests */\r\n@Injectable()\r\nexport class AuthExpiredInterceptor implements HttpInterceptor {\r\n\r\n    /** constructor */\r\n    constructor(\r\n        private router: Router,     \r\n        private authService: AuthService, \r\n        private principal: Principal\r\n    ) {}\r\n\r\n    /** request handler */\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        return next.handle(request).do((event: HttpEvent<any>) => {}, (err: any) => {\r\n            const intercept: boolean = request.url.indexOf(\"/api/\") != -1;\r\n            //tractem request\r\n            if (intercept) {\r\n                if (err instanceof HttpErrorResponse) {\r\n                    if (err.status === 401) {                    \r\n                        this.authService.logout().subscribe();\r\n                        this.principal.authenticate(null);\r\n                        this.router.navigate(['/']);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AuthService } from './auth.service';\r\nimport { Principal } from './principal.service';\r\n\r\n/** Login service*/\r\n@Injectable()\r\nexport class LoginService {\r\n    \r\n    /** constructor */\r\n    constructor(\r\n        private authServerProvider: AuthService, \r\n        private principal: Principal\r\n    ) {}\r\n\r\n    /**Login operation*/\r\n    login(credentials, callback?) {\r\n        const cb = callback || function() {};\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.authServerProvider.login(credentials).subscribe((data) => {\r\n                this.principal.identity(true).then((account) => {\r\n                    // After the login the language will be changed to\r\n                    // the language selected by the user during his registration\r\n                    resolve(data);\r\n                });\r\n                \r\n                \r\n                return cb();\r\n            }, (err) => {\r\n                this.logout();\r\n                reject(err);\r\n                return cb(err);\r\n            });\r\n        });\r\n    }\r\n    /**login with jwt token */\r\n    loginWithToken(jwt) {\r\n        return this.authServerProvider.loginWithToken(jwt);\r\n    }\r\n\r\n    /** logout operation */\r\n    logout() {\r\n       this.authServerProvider.logout().subscribe();\r\n       this.principal.authenticate(null);\r\n    }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {ResourceService} from '../angular-hal/src/lib/resource.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DashboardService{\r\n\r\n    /** API resource path */\r\n    public DASHBOARD_API = 'dashboard/info';\r\n    public DASHBOARD_EMBEDDED= 'dashboard';\r\n    /** constructor */\r\n    constructor(       \r\n      private http: HttpClient,\r\n      private resourceService: ResourceService) {\r\n    }\r\n  \r\n    /** get all kpi */\r\n    getAll(): Observable<any> {\r\n      return this.http.get(this.resourceService.getResourceUrl(this.DASHBOARD_API)).map(response => response[this.DASHBOARD_EMBEDDED]);\r\n    }\r\n}\r\n","import {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { User } from './user.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n/** User manager service */\r\n@Injectable()\r\nexport class UserService extends RestService<User> {\r\n  \r\n  /** API resource path */\r\n  public USER_API ='users';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(User, \"users\", injector);\r\n  }\r\n  \r\n  /** remove user*/\r\n  remove(item: User) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save user*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.USER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n    \r\n  /** change password o given user id */\r\n  changePassword(id,item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    result = this.http.post(this.resourceService.getResourceUrl(this.USER_API+\"/\"+id+\"/change-password\") , item);\r\n    return result;\r\n  }\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { Territory } from '../territory/territory.model';\r\nimport { User } from './user.model';\r\n/**\r\n * User position model\r\n */\r\nexport class UserPosition extends Resource {\r\n  /** name */\r\n  public name: string;\r\n  /** email */\r\n  public email: string;\r\n  /** organization name*/\r\n  public organization: string;\r\n  /** system created date*/\r\n  public createdDate: any;\r\n  /** system dated date*/\r\n  public datedDate: any;\r\n  /** position territory*/\r\n  public territory: Territory;\r\n  /** user*/\r\n  public user: User;\r\n}\r\n","import {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { UserPosition } from './user-position.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n/** User position manager service */\r\n@Injectable()\r\nexport class UserPositionService  extends RestService<UserPosition> {\r\n  \r\n\r\n  /** API resource path */\r\n  public USER_POSITION_API = 'user-positions';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(UserPosition, \"user-positions\", injector);\r\n  }\r\n  \r\n  /** remove user position*/\r\n  remove(item: UserPosition) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save user position*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.user !=null){\r\n          item.substituteRelation('user',item.user).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      if (item.territory !=null){\r\n          item.substituteRelation('territory',item.territory).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n    } else {\r\n      item.territory = item.territory._links.self.href;\r\n      item.user = item.user._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.USER_POSITION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { Role } from '../role/role.model';\r\nimport { Territory } from '../territory/territory.model';\r\nimport { User } from './user.model';\r\n\r\n/**\r\n * User permission model\r\n */\r\nexport class UserConfiguration extends Resource {\r\n  /** role */  \r\n  public role: Role;\r\n\r\n  /** role Children */  \r\n  public roleChildren: Role;\r\n  \r\n  /** territory */ \r\n  public territory: Territory;\r\n  /** user */\r\n  public user: User;\r\n}\r\n","import { RestService } from '../angular-hal/src/lib/rest.service';\r\nimport { UserConfiguration } from './user-configuration.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n/** User configuration manager service */\r\n@Injectable()\r\nexport class UserConfigurationService extends RestService<UserConfiguration> {\r\n\r\n  /** API resource path */\r\n  public USER_CONFIGURATION_API = 'user-configurations';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector, private http: HttpClient) {\r\n    super(UserConfiguration, \"user-configurations\", injector);\r\n  }\r\n\r\n  /** remove user configuration*/\r\n  remove(item: UserConfiguration) {\r\n    return this.http.delete(item._links.self.href);\r\n\r\n  }\r\n\r\n  /** save user configuration*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links != null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      item.territory = item.territory._links.self.href;\r\n      item.role = item.role!=null?item.role._links.self.href:null;\r\n      item.user = item.user._links.self.href;\r\n      item.roleChildren = item.roleChildren!=null?item.roleChildren._links.self.href:null;\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.USER_CONFIGURATION_API), item);\r\n    }\r\n    return result;\r\n  }\r\n\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { TerritoryGroupType } from './territory-group-type.model';\r\nimport { TerritoryType } from './territory-type.model';\r\n\r\n/**\r\n * Territory model\r\n */\r\nexport class Territory extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** code */\r\n  public code: string;\r\n  /** name */\r\n  public name: string;\r\n  /** address*/\r\n  public territorialAuthorityAddress: string;\r\n  /** admin */\r\n  public territorialAuthorityName: string;\r\n  /** whether territory is blocked*/\r\n  public blocked: boolean;\r\n  /** comments*/\r\n  public note: string;\r\n  /** system created date*/\r\n  public createdDate: any;\r\n  /** contact email */  \r\n  public territorialAuthorityEmail: string;\r\n  /** extension */\r\n  public extent: string;\r\n  /** logo image URL */\r\n  public territorialAuthorityLogo: string;\r\n  /** contact organization name */\r\n  // public organizationName: string;\r\n  /** scope*/\r\n  public scope: string;\r\n  /** type */  \r\n  public type: TerritoryType;\r\n  /** group type */\r\n  public groupType: TerritoryGroupType;\r\n  /** territory members*/\r\n  public members: Territory[];\r\n\r\n}\r\n","import { Territory } from './territory.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { RestService } from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Territory manager service */\r\n@Injectable()\r\nexport class TerritoryService extends RestService<Territory> {\r\n\r\n  /** API resource path */\r\n  public TERRITORY_API = 'territories';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector, private http: HttpClient) {\r\n    super(Territory, \"territories\", injector);\r\n  }\r\n\r\n  /** remove territory*/\r\n  remove(item: Territory) {\r\n    return this.http.delete(item._links.self.href);\r\n\r\n  }\r\n\r\n  /** save territory*/\r\n  save(item: Territory): Observable<any> {\r\n    let result: Observable<Object>;\r\n\r\n    let territoryGroupType:any = {}\r\n    territoryGroupType._links = {};\r\n    territoryGroupType._links.self = {};\r\n    territoryGroupType._links.self.href = \"\";\r\n\r\n    let territoryType:any = {}\r\n    territoryType._links = {};\r\n    territoryType._links.self = {};\r\n    territoryType._links.self.href = \"\";\r\n\r\n    if (item.type != null) {\r\n      territoryType = item.type;\r\n      if (typeof item.type._links != 'undefined') {\r\n        item.type = item.type._links.self.href;\r\n      } \r\n    }\r\n\r\n    if (item._links != null) {\r\n      //update relations\r\n      delete item.groupType;\r\n\r\n\r\n      // if (territoryGroupType._links.self.href == '') {\r\n      //   item.deleteRelation('groupType', territoryGroupType).subscribe(result => {\r\n      //   }, error => console.error(error));\r\n\r\n      // } else {\r\n      //   item.substituteRelation('groupType', territoryGroupType).subscribe(result => {\r\n      //   }, error => console.error(error));\r\n      // }\r\n\r\n      if (territoryType._links.self.href == '') {\r\n        item.deleteRelation('type', territoryType).subscribe(result => {\r\n        }, error => console.error(error));\r\n\r\n      } else {\r\n        item.substituteRelation('type', territoryType).subscribe(result => {\r\n        }, error => console.error(error));\r\n      }\r\n\r\n      delete item.type;\r\n      // if (item.type != null)\r\n      //   item.type = item.type._links.self.href;\r\n\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TERRITORY_API), item);\r\n    }\r\n    return result;\r\n  }\r\n\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n\r\n/**\r\n * Territory type model\r\n */\r\nexport class TerritoryType extends Resource {\r\n   /** id */\r\n   public id: number;  \r\n  /** name */\r\n  public name: string;\r\n}\r\n","import { Territory } from './territory.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { TerritoryType } from './territory-type.model';\r\n\r\n/** TerritoryType manager service */\r\n@Injectable()\r\nexport class TerritoryTypeService extends RestService<TerritoryType> {\r\n  \r\n\r\n  /** API resource path */\r\n  public TERRITORYTYPE_API = 'territory-types';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TerritoryType, \"territory-types\", injector);\r\n  }\r\n  \r\n  /** remove territory type*/\r\n  remove(item: TerritoryType) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save territory type*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TERRITORYTYPE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n\r\n/**\r\n * Territory type model\r\n */\r\nexport class TerritoryGroupType extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** name */\r\n  public name: string;\r\n}\r\n","import { TerritoryGroupType } from './territory-group-type.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TerritoryGroupTypeService extends RestService<TerritoryGroupType> {\r\n  \r\n  /** API resource path */\r\n  public TERRITORYGROUPTYPE_API = 'territory-group-types';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TerritoryGroupType, \"territory-group-types\", injector);\r\n  }\r\n  \r\n  /** remove territory*/\r\n  remove(item: TerritoryGroupType) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save territory*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TERRITORYGROUPTYPE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}","import {Resource} from '../angular-hal/src/lib/resource';\r\n\r\n/**\r\n * Role model\r\n */\r\nexport class Role extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name*/\r\n  public name: string;\r\n  /** comments*/\r\n  public description: string;\r\n\r\n}\r\n","import { Role } from './role.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Role manager service */\r\n@Injectable()\r\nexport class RoleService extends RestService<Role> {\r\n  \r\n  /** API resource path */\r\n  public ROLE_API = 'roles';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Role, \"roles\", injector);\r\n  }\r\n  \r\n  /** remove role*/\r\n  remove(item: Role) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save role*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.ROLE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Connection model\r\n */\r\nexport class Connection extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name*/\r\n  public name: string;\r\n  /** type*/\r\n  public type: string;\r\n  /** user*/\r\n  public user: string;\r\n  /** password*/\r\n  public password: string;\r\n  /** connection string*/\r\n  public connectionString: string;\r\n\r\n}\r\n","import { Connection } from './connection.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Connection manager service */\r\n@Injectable()\r\nexport class ConnectionService extends RestService<Connection> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CONNECTION_API = 'connections';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Connection, \"connections\", injector);\r\n  }\r\n  \r\n  /** remove connection*/\r\n  remove(item: Connection) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save connection*/\r\n  save(item: Connection): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  testConnection(item:any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    result=this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API)+\"/test\" , item);\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n\r\nimport { Connection } from '../connection/connection.model';\r\nimport { Role } from '../role/role.model';\r\nimport { TaskType } from './task-type.model';\r\nimport { TaskGroup } from './task-group.model';\r\nimport { TaskAvailability } from './task-availability.model';\r\nimport { TaskParameter } from './task-parameter.model';\r\n\r\n//FIXME ensure task creation in admin app upon initialization (as it is done with Roles and default Users)\r\n/** GEOADMIN_task id */\r\nexport const GEOADMIN_TREE_TASK_ID:string  = \"geoadmin\";\r\n\r\nimport { TaskUI } from './task-ui.model';\r\nimport { Cartography } from '../cartography/cartography.model';\r\nimport { Service } from '../service/service.model';\r\n/** Task model */\r\nexport class Task extends Resource {\r\n  /** id */\r\n  public id?: number;\r\n  /** name */  \r\n  public name?: string;\r\n  /** order*/\r\n  public order?: Number;\r\n  /** system created date*/\r\n  public createdDate?: any;\r\n  /** task group*/\r\n  public group?: TaskGroup;\r\n  /** task type*/\r\n  public type?: TaskType;\r\n  /** task UI*/\r\n  public ui?: TaskUI;\r\n  /** parameters*/\r\n  public parameters?: TaskParameter[];\r\n  /** connection*/\r\n  public connection?: Connection;\r\n  /** roles*/\r\n  public roles?: Role[];\r\n  /** availabilities*/\r\n  public availabilities?: TaskAvailability[];\r\n\r\n  public cartography?: Cartography;\r\n\r\n  public service?: Service;\r\n\r\n  public properties?;\r\n}\r\n","import { Task } from './task.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Task manager service */\r\n@Injectable()\r\nexport class TaskService extends RestService<Task> {\r\n\r\n    /** API resource path */\r\n    public CONNECTION_API = 'tasks';\r\n\r\n    /** constructor */\r\n    constructor(injector: Injector, private http: HttpClient) {\r\n        super(Task, \"tasks\", injector);\r\n    }\r\n\r\n    /** remove task*/\r\n    remove(item: Task) {\r\n        return this.http.delete(item._links.self.href);\r\n    }\r\n    \r\n    /** save task*/\r\n    save(item: Task): Observable<any> {\r\n        let result: Observable<Object>;\r\n\r\n        if (item._links != null) {\r\n\r\n            if (!item.service) {\r\n                let service:any = {}\r\n                service._links = {};\r\n                service._links.self = {};\r\n                service._links.self.href = \"\";\r\n                item.deleteRelation('service', service).subscribe(result => {\r\n                }, error => console.error(error)); \r\n            }else {\r\n                item.service._links.self.href=item.service._links.self.href.split(\"{\")[0]\r\n                item.substituteRelation('service', item.service).subscribe(result => {\r\n                }, error => console.error(error));\r\n                item.service = item.service._links.self.href\r\n            }\r\n            if (!item.cartography) {\r\n                let cartography:any = {}\r\n                cartography._links = {};\r\n                cartography._links.self = {};\r\n                cartography._links.self.href = \"\";\r\n                item.deleteRelation('cartography', cartography).subscribe(result => {\r\n                }, error => console.error(error)); \r\n            }else {\r\n                item.cartography._links.self.href=item.cartography._links.self.href.split(\"{\")[0]\r\n                item.substituteRelation('cartography', item.cartography).subscribe(result => {\r\n                }, error => console.error(error));\r\n                item.cartography = item.cartography._links.self.href\r\n            }\r\n\r\n            if (!item.connection) {\r\n                let connection:any = {}\r\n                connection._links = {};\r\n                connection._links.self = {};\r\n                connection._links.self.href = \"\";\r\n                item.deleteRelation('connection', connection).subscribe(result => {\r\n                }, error => console.error(error)); \r\n            }else {\r\n                item.connection._links.self.href=item.connection._links.self.href.split(\"{\")[0]\r\n                item.substituteRelation('connection', item.connection).subscribe(result => {\r\n                }, error => console.error(error));\r\n                item.connection = item.connection._links.self.href\r\n            }\r\n\r\n            if (!item.ui) {\r\n                // item.deleteRelation('ui', item.ui).subscribe(result => {\r\n                // }, error => console.error(error)); \r\n            }else {\r\n                item.ui._links.self.href=item.ui._links.self.href.split(\"{\")[0]\r\n                item.substituteRelation('ui', item.ui).subscribe(result => {\r\n                }, error => console.error(error));\r\n                item.ui = item.ui._links.self.href\r\n            }\r\n\r\n            if (!item.group) {\r\n                // item.deleteRelation('group', item.group).subscribe(result => {\r\n                // }, error => console.error(error)); \r\n            }else {\r\n                item.group._links.self.href=item.group._links.self.href.split(\"{\")[0]\r\n                item.substituteRelation('group', item.group).subscribe(result => {\r\n                }, error => console.error(error));\r\n                item.group = item.group._links.self.href\r\n            }\r\n\r\n            if (!item.type) {\r\n                // item.deleteRelation('type', item.type).subscribe(result => {\r\n                // }, error => console.error(error)); \r\n            }else {\r\n                item.type._links.self.href=item.type._links.self.href.split(\"{\")[0]\r\n                item.substituteRelation('type', item.type).subscribe(result => {\r\n                }, error => console.error(error));\r\n                item.type = item.type._links.self.href\r\n            }\r\n\r\n            if(item.roles){\r\n                let roles = [...item.roles];\r\n                delete item.roles;\r\n                item.substituteAllRelation('roles',roles).subscribe(result => {\r\n                }, error => console.error(error));\r\n            }\r\n\r\n            result = this.http.put(item._links.self.href, item);            \r\n        } else {\r\n            if(item.cartography){\r\n                item.cartography = item.cartography._links.self.href\r\n            }\r\n            if(item.connection){\r\n                item.connection = item.connection._links.self.href\r\n            }\r\n            if(item.service){\r\n                item.service = item.service._links.self.href\r\n            }\r\n            if(item.ui){\r\n                item.ui = item.ui._links.self.href\r\n            }\r\n            if(item.group){\r\n                item.group = item.group._links.self.href\r\n            }\r\n            if(item.type){\r\n                item.type = item.type._links.self.href\r\n            }\r\n            result = this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API), item);\r\n        }\r\n        return result;\r\n    }\r\n\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Task type model\r\n */\r\nexport class TaskType extends Resource {\r\n  /** name*/  \r\n  public name: string;\r\n\r\n}\r\n","import { TaskType } from './task-type.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** TaskType manager service */\r\n@Injectable()\r\nexport class TaskTypeService extends RestService<TaskType> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CONNECTION_API = 'task-types';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TaskType, \"task-types\", injector);\r\n  }\r\n  \r\n  /** remove task type*/\r\n  remove(item: TaskType) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save task type*/\r\n  save(item: TaskType): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Task group model\r\n */\r\nexport class TaskGroup extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** name*/  \r\n  public name: string;\r\n\r\n}\r\n","import { TaskGroup } from './task-group.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Task group manager service */\r\n@Injectable()\r\nexport class TaskGroupService extends RestService<TaskGroup> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CONNECTION_API = 'task-groups';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TaskGroup, \"task-groups\", injector);\r\n  }\r\n  \r\n  /** remove task group*/\r\n  remove(item: TaskGroup) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save task group*/\r\n  save(item: TaskGroup): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Task} from './task.model';  \r\n/**\r\n * Task parameter model\r\n */\r\nexport class TaskParameter extends Resource {\r\n  /** name*/  \r\n  public name: string;\r\n  \r\n  /** type*/\r\n  public type: string;\r\n    \r\n  /** value*/\r\n  public value: string;\r\n  \r\n  /** order*/  \r\n  public order: Number;\r\n  \r\n  /** task*/  \r\n  public task:Task;\r\n\r\n}\r\n","import { TaskParameter } from './task-parameter.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Task parameter manager service */\r\n@Injectable() \r\nexport class TaskParameterService extends RestService<TaskParameter> {\r\n  \r\n\r\n  /** API resource path */\r\n  public TASK_PARAMETER_API = 'task-parameters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TaskParameter, \"task-parameters\", injector);\r\n  }\r\n  \r\n  /** remove task parameter*/\r\n  remove(item: TaskParameter) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save task parameter*/\r\n  save(item: TaskParameter): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.task !=null){\r\n          item.substituteRelation('task',item.task).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      \r\n    } else {\r\n      item.task = item.task._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TASK_PARAMETER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { Territory } from '../territory/territory.model';\r\nimport { Task } from './task.model';\r\n/**\r\n * Task availability model\r\n */\r\nexport class TaskAvailability extends Resource {\r\n  /** territory*/\r\n  public territory: Territory;\r\n  /** task*/\r\n  public task: Task;\r\n}\r\n","import { TaskAvailability } from './task-availability.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Task availability manager service */\r\n@Injectable() \r\nexport class TaskAvailabilityService extends RestService<TaskAvailability> {\r\n  \r\n\r\n  /** API resource path */\r\n  public TASK_AVAILABILITY_API = 'task-availabilities';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TaskAvailability, \"task-availabilities\", injector);\r\n  }\r\n  \r\n  /** remove task availability*/\r\n  remove(item: TaskAvailability) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save task availability*/\r\n  save(item: TaskAvailability): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.task !=null){\r\n          item.substituteRelation('task',item.task).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      if (item.territory !=null){\r\n          item.substituteRelation('territory',item.territory).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n    } else {\r\n      item.territory = item.territory._links.self.href;\r\n      item.task = item.task._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TASK_AVAILABILITY_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Task UI model\r\n */\r\nexport class TaskUI extends Resource {\r\n  /** name*/\r\n  public name: string;\r\n  \r\n  /** tooltip*/  \r\n  public tooltip: string;\r\n    \r\n  /** order*/ \r\n  public order: number;\r\n\r\n}\r\n","import { TaskUI } from './task-ui.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Task UI manager service */\r\n@Injectable()\r\nexport class TaskUIService extends RestService<TaskUI> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CONNECTION_API = 'task-uis';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TaskUI, \"task-uis\", injector);\r\n  }\r\n  \r\n  /** remove task UI*/\r\n  remove(item: TaskUI) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save task UI*/\r\n  save(item: TaskUI): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { Language } from './language.model';\r\n\r\n\r\n/** Task model */\r\nexport class Translation extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** id */\r\n  public element: number;\r\n  /** name */\r\n  public translation: string;\r\n  /** column */\r\n  public column: string;\r\n  /** name */\r\n  public language: Language;\r\n  /** name */\r\n  public languageName?: string;\r\n  /** name */\r\n  public languageShortname?: string;\r\n\r\n\r\n\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { Translation } from './translation.model';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TranslationService extends RestService<Translation> {\r\n\r\n  /** API resource path */\r\n  public TRANSLATION_API = 'translations';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Translation, \"translations\", injector);\r\n  }\r\n  \r\n  /** remove translation*/\r\n  remove(item: Translation) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save translation*/\r\n  save(item: Translation): Observable<any> {\r\n    let result: Observable<Object>;\r\n\r\n    let language:any = {}\r\n    language._links = {};\r\n    language._links.self = {};\r\n    language._links.self.href = \"\";\r\n\r\n    if (item.language != null) {\r\n      language = item.language;\r\n      if (typeof item.language._links != 'undefined') {\r\n        item.language = item.language._links.self.href;\r\n      } \r\n    }\r\n\r\n    if (item._links!=null) {\r\n      delete item.language;\r\n      // if (language._links.self.href == '') {\r\n      //   item.deleteRelation('language', language).subscribe(result => {\r\n      //   }, error => console.error(error));\r\n\r\n      // } else {\r\n      //   item.substituteRelation('language', language).subscribe(result => {\r\n      //   }, error => console.error(error));\r\n      // }\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TRANSLATION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n\r\n\r\n/** Task model */\r\nexport class Language extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name */\r\n  public shortname: string;\r\n  /** name */\r\n  public name: string;\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { Language } from './language.model';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LanguageService extends RestService<Language> {\r\n\r\n  /** API resource path */\r\n  public LANGUAGES_API = 'languages';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Language, \"languages\", injector);\r\n  }\r\n  \r\n  /** remove translation*/\r\n  remove(item: Language) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save translation*/\r\n  save(item: Language): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.LANGUAGES_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Connection} from '../connection/connection.model';\r\nimport {ServiceParameter} from './service-parameter.model';\r\n/**\r\n * Service model\r\n */\r\nexport class Service extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name*/\r\n  public name: string;\r\n    \r\n  /** type*/\r\n  public type: string;\r\n\r\n  /** url*/  \r\n  public serviceURL: string;\r\n\r\n  /** projections*/  \r\n  public supportedSRS: string;\r\n  \r\n  /** legend*/\r\n  public legend: string;\r\n\r\n  /** infoUrl*/  \r\n  public infoUrl: string;\r\n  \r\n  /** system created date*/\r\n  public createdDate: any;\r\n\r\n  /** connection*/\r\n  public connection: Connection;\r\n  \r\n  /** parameters*/  \r\n  public parameters: ServiceParameter[];\r\n\r\n  /** whether service is blocked*/\r\n  public blocked: boolean;\r\n}\r\n","import { Service } from './service.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Service manager service */\r\n@Injectable()\r\nexport class ServiceService extends RestService<Service> {\r\n\r\n  /** API resource path */\r\n  public SERVICE_API = 'services';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Service, \"services\", injector);\r\n  }\r\n  \r\n  /** remove service*/\r\n  remove(item: Service) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save service*/\r\n  save(item: Service): Observable<any> {\r\n    let result: Observable<Object>;\r\n    let serviceConnection = item.connection;\r\n\r\n    if (item.connection!=null){\r\n        if (typeof item.connection._links!= 'undefined') { \r\n            item.connection = item.connection._links.self.href;\r\n        } else {\r\n            serviceConnection._links= {};\r\n            serviceConnection._links.self = {};\r\n            serviceConnection._links.self.href=\"\";\r\n        }        \r\n     }\r\n\r\n    if (item._links!=null) {     \r\n      result = this.http.put(item._links.self.href, item);       \r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.SERVICE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n\r\n/**\r\n * Service model\r\n */\r\nexport class ConfigurationParameter extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name*/\r\n  public name: string;\r\n    \r\n  /** value*/\r\n  public value: string;\r\n\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { ConfigurationParameter } from './configuration-parameters.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ConfigurationParametersService extends RestService<ConfigurationParameter> {\r\n\r\n  /** API resource path */\r\n  public CONFIGURATION_PARAMETERS_API = 'configuration-parameters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(ConfigurationParameter, \"configuration-parameters\", injector);\r\n  }\r\n  \r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Service} from './service.model'; \r\n/**\r\n * Service parameter model\r\n */\r\nexport class ServiceParameter extends Resource {\r\n  /** name*/\r\n  public name: string;\r\n  \r\n  /** type*/\r\n  public type: string;\r\n    \r\n  /** value*/  \r\n  public value: string;\r\n  \r\n  /** service*/\r\n  public service: Service;\r\n\r\n}\r\n","import { ServiceParameter } from './service-parameter.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Service parameter manager service */\r\n@Injectable() \r\nexport class ServiceParameterService extends RestService<ServiceParameter> {\r\n\r\n  /** API resource path */\r\n  public SERVICE_PARAMETER_API = 'service-parameters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(ServiceParameter, \"service-parameters\", injector);\r\n  }\r\n  \r\n  /** remove service parameter*/\r\n  remove(item: ServiceParameter) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save service parameter*/\r\n  save(item: ServiceParameter): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      \r\n      if (item.service !=null){\r\n          let service =  item.service;\r\n          delete item.service;\r\n          item.substituteRelation('service',service).subscribe(result => {            \r\n          \r\n      }, error => console.error(error));\r\n      }\r\n      result = this.http.put(item._links.self.href, item);\r\n      \r\n      \r\n    } else {\r\n      item.service = item.service._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.SERVICE_PARAMETER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Capabilitie model\r\n */\r\nexport class Capabilitie extends Resource {\r\n  /** url */\r\n  public url: string;\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { Capabilitie } from './capabilitie.model';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CapabilitiesService extends RestService<Capabilitie>  {\r\n\r\n  /** API resource path */\r\n  public CAPABILITIES_API = 'helpers/capabilities?url=';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Capabilitie, \"helpers/capabilities?url=\", injector);\r\n  }\r\n\r\n    /** save service*/\r\n    getInfo(url: string): Observable<any> {\r\n      let result: Observable<Object>;\r\n      if(url){\r\n        const headerDict = {\r\n          'Charset': 'UTF-8'\r\n        }\r\n        \r\n        const requestOptions = {                                                                                                                                                                                 \r\n          headers: new HttpHeaders(headerDict), \r\n        };\r\n        let finalUrl = this.resourceService.getResourceUrl(this.CAPABILITIES_API);\r\n        finalUrl = finalUrl.concat(url);\r\n        console.log(finalUrl);\r\n        result = this.http.get(finalUrl, requestOptions);\r\n      }\r\n      return result;\r\n \r\n    }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Info model\r\n */\r\nexport class Info extends Resource {\r\n  /** url */\r\n  public url: string;\r\n}","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { Info } from './info.model';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GetInfoService extends RestService<Info>  {\r\n\r\n  /** API resource path */\r\n  public INFO_API = 'helpers/feature-type?url=';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Info, \"helpers/feature-type?url=\", injector);\r\n  }\r\n\r\n    /** save service*/\r\n    getInfo(url: string): Observable<any> {\r\n      let result: Observable<Object>;\r\n      if(url){\r\n        const headerDict = {\r\n          'Charset': 'UTF-8'\r\n        }\r\n        \r\n        const requestOptions = {                                                                                                                                                                                 \r\n          headers: new HttpHeaders(headerDict), \r\n        };\r\n        let finalUrl = this.resourceService.getResourceUrl(this.INFO_API);\r\n        finalUrl = finalUrl.concat(url);\r\n        console.log(finalUrl);\r\n        result = this.http.get(finalUrl, requestOptions);\r\n      }\r\n      return result;\r\n \r\n    }\r\n  \r\n}","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Service} from '../service/service.model';\r\nimport {Connection} from '../connection/connection.model';\r\nimport {CartographyAvailability} from './cartography-availability.model';\r\nimport { CartographyStyle } from './cartography-style.model';\r\n/**\r\n * Cartography\r\n */\r\nexport class Cartography extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** name*/\r\n  public name: string;\r\n  \r\n  /** type*/\r\n  public type : string;\r\n\r\n  /** service*/\r\n  public service : Service;\r\n\r\n  /** order*/  \r\n  public order: Number; \r\n\r\n  /** description*/  \r\n  public description: String;\r\n\r\n  /** source*/  \r\n  public source: String;\r\n\r\n  /** whether cartography is blocked*/\r\n  public blocked: boolean;  \r\n\r\n  /** apply filter to get map*/\r\n  public applyFilterToGetMap: boolean;  \r\n\r\n  /** apply filter to get feature information*/\r\n  public applyFilterToGetFeatureInfo: boolean;  \r\n\r\n  /** apply filter to spatial selection*/\r\n  public applyFilterToSpatialSelection: boolean;  \r\n\r\n  /** selectable layers*/\r\n  public selectableLayers: string[];\r\n\r\n  /** transparency*/ \r\n  public transparency: Number;\r\n\r\n  /** whether layer is queryable*/  \r\n  public queryable: Boolean;\r\n\r\n  /** whether layer is queryable*/ \r\n  public queryAct: Boolean;\r\n\r\n  /** query layer*/\r\n  public queryLay: string;\r\n\r\n  /** system created date*/\r\n  public createdDate: any;\r\n\r\n  /** minimum scale*/\r\n  public minimumScale: Number;\r\n\r\n  /** maximum scale*/\r\n  public maximumScale: Number;\r\n\r\n  /** layers*/  \r\n  public layers: string;\r\n  \r\n  /** connection*/\r\n  public connection: Connection;\r\n\r\n  /** queryableFeatureEnabled */\r\n  public queryableFeatureEnabled: Boolean;\r\n\r\n    /** queryableLayers */\r\n  public queryableFeatureAvailable: Boolean;\r\n\r\n    /** queryableLayers */\r\n  public queryableLayers: string[];\r\n\r\n  /** availabilities*/\r\n  public availabilities : CartographyAvailability[];\r\n\r\n  /** whether layer is queryable*/ \r\n  public selectableFeatureEnabled: Boolean;\r\n\r\n  /** selection layer*/\r\n  public selectionLayer: string;\r\n\r\n  /** selection service*/  \r\n  public selectionService: Service;\r\n\r\n  /** legend tip*/  \r\n  public legendType: string;\r\n  \r\n  /** legend url*/\r\n  public legendURL: string;\r\n\r\n  /** whether layer is editable*/\r\n  public editable: Boolean;\r\n\r\n  /** metadata URL*/\r\n  public metadataURL: string;\r\n\r\n  /** metadata URL*/\r\n  public datasetURL: string;\r\n\r\n  /** whether layer is themable*/\r\n  public thematic: Boolean;\r\n  \r\n  /** geometry type*/\r\n  public geometryType: string;\r\n\r\n  public styles?: CartographyStyle[]\r\n\r\n  public useAllStyles: boolean;\r\n  \r\n\r\n}\r\n","import { Cartography } from './cartography.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { RestService } from '../angular-hal/src/lib/rest.service';\r\nimport { Connection } from '../connection/connection.model';\r\nimport { Service } from '../service/service.model';\r\n\r\n/** Cartography manager service */\r\n@Injectable()\r\nexport class CartographyService extends RestService<Cartography> {\r\n\r\n  /** API resource path */\r\n  public CARTOGRAPHY_API = 'cartographies';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector, private http: HttpClient) {\r\n    super(Cartography, \"cartographies\", injector);\r\n  }\r\n\r\n  /** remove cartography*/\r\n  remove(item: Cartography) {\r\n    return this.http.delete(item._links.self.href);\r\n\r\n  }\r\n\r\n  /** save cartography*/\r\n  save(item: Cartography): Observable<any> {\r\n    let result: Observable<Object>;\r\n\r\n    let cartographyConnection:any={};\r\n    cartographyConnection._links = {};\r\n    cartographyConnection._links.self = {};\r\n    cartographyConnection._links.self.href = \"\";\r\n     \r\n    let cartographyService:any={};\r\n    cartographyService._links = {};\r\n    cartographyService._links.self = {};\r\n    cartographyService._links.self.href = \"\";\r\n    \r\n    let cartographySelectionService:any = {};\r\n    cartographySelectionService._links = {};\r\n    cartographySelectionService._links.self = {};\r\n    cartographySelectionService._links.self.href = \"\";\r\n\r\n    if (item.service != null) {\r\n      cartographyService=  item.service;\r\n      if (typeof item.service._links != 'undefined') {\r\n        item.service = item.service._links.self.href;\r\n      }\r\n    }\r\n\r\n    if (item.selectionService != null) {\r\n      cartographySelectionService = item.selectionService\r\n      if (typeof item.selectionService._links != 'undefined') {\r\n        item.selectionService = item.selectionService._links.self.href;\r\n      }\r\n    }\r\n\r\n    if (item.connection != null) {\r\n      cartographyConnection=  item.connection;\r\n      if (typeof item.connection._links != 'undefined') {\r\n        item.connection = item.connection._links.self.href;\r\n      }\r\n    }\r\n\r\n    if (item._links != null) {\r\n\r\n      //update relations\r\n      delete item.connection;\r\n      delete item.service;\r\n      delete item.selectionService;\r\n\r\n      // if (cartographyConnection._links.self.href == '' && cartographyConnection) {\r\n      //   item.deleteRelation('spatialSelectionConnection', cartographyConnection).subscribe(result => {\r\n      //   }, error => console.error(error));\r\n      // } else {\r\n      //   item.substituteRelation('spatialSelectionConnection', cartographyConnection).subscribe(result => {\r\n      //   }, error => console.error(error));\r\n      // }\r\n\r\n      if (cartographyService._links.self.href == '') {\r\n        item.deleteRelation('service', cartographyService).subscribe(result => {\r\n        }, error => console.error(error));\r\n      } else {\r\n        item.substituteRelation('service', cartographyService).subscribe(result => {\r\n        }, error => console.error(error));\r\n      }\r\n\r\n      if (cartographySelectionService._links.self.href == '' && cartographySelectionService) {\r\n        item.deleteRelation('spatialSelectionService', cartographySelectionService).subscribe(result => {\r\n        }, error => console.error(error));\r\n      } else {\r\n        item.substituteRelation('spatialSelectionService', cartographySelectionService).subscribe(result => {\r\n        }, error => console.error(error));\r\n      }\r\n\r\n      result = this.http.put(item._links.self.href, item);\r\n\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_API), item);\r\n    }\r\n    return result;\r\n  }\r\n\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Cartography} from './cartography.model';\r\nimport {Role} from '../role/role.model';\r\n/**\r\n * Cartography group\r\n */\r\nexport class CartographyGroup extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** name*/\r\n  public name: string;\r\n  /** type*/\r\n  public type: string;\r\n  /** members*/\r\n  public members: Cartography[];\r\n  /** roles*/\r\n  public roles: Role[];\r\n\r\n}\r\n","import { CartographyGroup } from './cartography-group.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** CartographyGroup manager service */\r\n@Injectable()\r\nexport class CartographyGroupService extends RestService<CartographyGroup> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CARTOGRAPHY_GROUP_API ='cartography-groups';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CartographyGroup, \"cartography-groups\", injector);\r\n  }\r\n  \r\n  /** remove cartography group*/\r\n  remove(item: CartographyGroup) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save cartography group*/\r\n  save(item: CartographyGroup): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_GROUP_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { Territory } from '../territory/territory.model';\r\nimport { Cartography } from './cartography.model';\r\n/**\r\n * Cartography availability model\r\n */\r\nexport class CartographyAvailability extends Resource {\r\n  /** territory*/\r\n  public territory: Territory;\r\n  \r\n  /** system created date*/\r\n  public createdDate: any;\r\n  \r\n  /** cartography*/\r\n  public cartography: Cartography;\r\n}\r\n","import { CartographyAvailability } from './cartography-availability.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** CartographyAvailability manager service */\r\n@Injectable() \r\nexport class CartographyAvailabilityService extends RestService<CartographyAvailability> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CARTOGRAPHY_AVAILABILITY_API = 'cartography-availabilities';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CartographyAvailability, \"cartography-availabilities\", injector);\r\n  }\r\n  \r\n  /** remove cartography availability*/\r\n  remove(item: CartographyAvailability) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save cartography availability*/\r\n  save(item: CartographyAvailability): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.cartography !=null){\r\n          item.substituteRelation('cartography',item.cartography).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      if (item.territory !=null){\r\n          item.substituteRelation('territory',item.territory).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n    } else {\r\n      item.territory = item.territory._links.self.href;\r\n      item.cartography = item.cartography._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_AVAILABILITY_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { TerritoryType } from '../territory/territory-type.model';\r\nimport { Cartography } from './cartography.model';\r\n/**\r\n * Cartography availability model\r\n */\r\nexport class CartographyFilter extends Resource {\r\n \r\n  /** name*/\r\n  public name: string;\r\n\r\n  /** required */\r\n  public required: boolean;\r\n\r\n  /** type*/\r\n  public type: string;\r\n\r\n  /** Territorial level. */\r\n  public territorialLevel: TerritoryType;\r\n  \r\n  /** column */\r\n  public column: string;\r\n\r\n  /** values*/  \r\n  public values: string;\r\n\r\n  /** value*/  \r\n  public valueType: string;\r\n\r\n  /** cartography*/\r\n  public cartography: Cartography;\r\n\r\n\r\n}\r\n","import { CartographyFilter } from './cartography-filter.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** CartographyFilter manager service */\r\n@Injectable() \r\nexport class CartographyFilterService extends RestService<CartographyFilter> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CARTOGRAPHY_FILTER_API = 'cartography-filters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CartographyFilter, \"cartography-filters\", injector);\r\n  }\r\n  \r\n  /** remove cartography filter*/\r\n  remove(item: CartographyFilter) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save cartography availability*/\r\n  save(item: CartographyFilter): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.cartography !=null){\r\n          item.substituteRelation('cartography',item.cartography).subscribe(result => {\r\n      }, error => console.error(error));\r\n      }\r\n\r\n      if(item.territorialLevel != null && item.territorialLevel != undefined ){\r\n        item.substituteRelation('territorialLevel',item.territorialLevel).subscribe(result => {\r\n        }, error => console.error(error));\r\n      }\r\n     \r\n    } else {\r\n      \r\n      item.cartography = item.cartography._links.self.href;\r\n      item.territorialLevel=item.territorialLevel._links.self.href;\r\n      \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_FILTER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Cartography} from './cartography.model'; \r\n/**\r\n * Service parameter model\r\n */\r\nexport class CartographyParameter extends Resource {\r\n  /** name*/\r\n  public name: string;\r\n  \r\n  /** type*/\r\n  public type: string;\r\n    \r\n  /** value*/  \r\n  public value: string;\r\n  \r\n  /** order*/  \r\n  public order: string;\r\n\r\n  /** cartography*/\r\n  public cartography: Cartography;\r\n\r\n}\r\n","import { CartographyParameter } from './cartography-parameter.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Service parameter manager service */\r\n@Injectable() \r\nexport class CartographyParameterService extends RestService<CartographyParameter> {\r\n\r\n  /** API resource path */\r\n  public CARTOGRAPHY_PARAMETER_API = 'cartography-parameters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CartographyParameter, \"cartography-parameters\", injector);\r\n  }\r\n  \r\n  /** remove service parameter*/\r\n  remove(item: CartographyParameter) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save service parameter*/\r\n  save(item: CartographyParameter): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      \r\n      if (item.cartography !=null){\r\n          let cartography =  item.cartography;\r\n          delete item.cartography;\r\n          item.substituteRelation('cartography',cartography).subscribe(result => {            \r\n          \r\n      }, error => console.error(error));\r\n      }\r\n      result = this.http.put(item._links.self.href, item);\r\n      \r\n      \r\n    } else {\r\n      item.cartography = item.cartography._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_PARAMETER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import { CartographyParameter } from './cartography-parameter.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Service parameter manager service */\r\n@Injectable() \r\nexport class CartographySpatialSelectionParameterService extends RestService<CartographyParameter> {\r\n\r\n  /** API resource path */\r\n  public CARTOGRAPHY_SPATIAL_SELECTION_PARAMETER_API = 'cartography-spatial-selection-parameters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CartographyParameter, \"cartography-spatial-selection-parameters\", injector);\r\n  }\r\n  \r\n  /** remove service parameter*/\r\n  remove(item: CartographyParameter) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save service parameter*/\r\n  save(item: CartographyParameter): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      \r\n      if (item.cartography !=null){\r\n          let cartography =  item.cartography;\r\n          delete item.cartography;\r\n          item.substituteRelation('cartography',cartography).subscribe(result => {            \r\n          \r\n      }, error => console.error(error));\r\n      }\r\n      result = this.http.put(item._links.self.href, item);\r\n      \r\n      \r\n    } else {\r\n      item.cartography = item.cartography._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_SPATIAL_SELECTION_PARAMETER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Cartography} from './cartography.model'; \r\n/**\r\n * Cartography style model\r\n */\r\nexport class CartographyStyle extends Resource {\r\n  /** name*/\r\n  public name: string;\r\n  \r\n  /** title*/\r\n  public title: string;\r\n    \r\n  /** description*/  \r\n  public description: string;\r\n  \r\n  /** format*/  \r\n  public format: string;\r\n  \r\n  /** width*/  \r\n  public width: number;\r\n  \r\n  /** height*/  \r\n  public height: number;\r\n  \r\n  /** url*/  \r\n  public url: string;\r\n\r\n  /** cartography*/\r\n  public cartography: Cartography;\r\n\r\n  public defaultStyle: boolean;\r\n\r\n  public legendURL: any;\r\n  \r\n\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { CartographyStyle } from './cartography-style.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CartographyStyleService extends RestService<CartographyStyle> {\r\n\r\n /** API resource path */\r\n  public CARTOGRAPHY_STYLES_API = 'cartography-styles';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CartographyStyle, \"cartography-styles\", injector);\r\n  }\r\n  \r\n  /** remove service parameter*/\r\n  remove(item: CartographyStyle) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save service parameter*/\r\n  save(item: CartographyStyle): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      \r\n      if (item.cartography !=null){\r\n          let cartography =  item.cartography;\r\n          delete item.cartography;\r\n          item.substituteRelation('cartography',cartography).subscribe(result => {            \r\n          \r\n      }, error => console.error(error));\r\n      }\r\n      result = this.http.put(item._links.self.href, item);\r\n      \r\n      \r\n    } else {\r\n      item.cartography = item.cartography._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_STYLES_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {CartographyGroup} from './cartography-group.model';\r\n/**\r\n * Background model\r\n */\r\nexport class Background extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  \r\n  /** name*/\r\n  public name: string;\r\n\r\n  /** description*/\r\n  public description: string;\r\n\r\n  /** image */\r\n  public image: string;\r\n\r\n  /** whether background is active*/\r\n  public active: Boolean;\r\n  \r\n  /** system created date*/\r\n  public createdDate: any;\r\n\r\n  /** cartography group*/\r\n  public cartographyGroup: CartographyGroup;\r\n}\r\n","import { Background } from './background.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Background manager service */\r\n@Injectable()\r\nexport class BackgroundService extends RestService<Background> {\r\n\r\n  /** API resource path */\r\n  public BACKGROUND_API = 'backgrounds';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Background, \"backgrounds\", injector);\r\n  }\r\n  \r\n  /** remove background*/\r\n  remove(item: Background) {\r\n    return this.http.delete(item._links.self.href);   \r\n  }\r\n  \r\n  /** save background*/\r\n  save(item: Background): Observable<any> {\r\n    let result: Observable<Object>;\r\n    let backgroundCartographyGroup:any = {}         \r\n    \r\n    backgroundCartographyGroup._links= {};\r\n    backgroundCartographyGroup._links.self = {};\r\n    backgroundCartographyGroup._links.self.href=\"\";\r\n    item.cartographyGroup;\r\n\r\n    if (item.cartographyGroup!=null){\r\n      backgroundCartographyGroup = item.cartographyGroup;\r\n        if (typeof item.cartographyGroup._links!= 'undefined') { \r\n            item.cartographyGroup = item.cartographyGroup._links.self.href;\r\n        }    \r\n     }\r\n\r\n    if (item._links!=null) {\r\n      //update relations\r\n      delete item.cartographyGroup;        \r\n      \r\n      if (backgroundCartographyGroup._links.self.href==''){\r\n         item.deleteRelation('cartographyGroup',backgroundCartographyGroup).subscribe(result => {     \r\n\r\n          \r\n             }, error => console.error(error));\r\n          \r\n      } else {\r\n          item.substituteRelation('cartographyGroup',backgroundCartographyGroup).subscribe(result => {\r\n         \r\n\r\n      \r\n            }, error => console.error(error));           \r\n       } \r\n       \r\n         \r\n      result = this.http.put(item._links.self.href, item);\r\n\r\n           \r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.BACKGROUND_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {TreeNode} from './tree-node.model';\r\nimport {Role} from '../role/role.model';    \r\n/**\r\n * Tree model\r\n */\r\nexport class Tree extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name */\r\n  public name: string;\r\n  /** description */\r\n  public description: string;\r\n  /** image */\r\n  public image: string;\r\n  /** nodes */\r\n  public nodes: TreeNode[];\r\n  /** available roles */\r\n  public availableRoles : Role[];\r\n\r\n}\r\n","import { Tree } from './tree.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Tree manager service */\r\n@Injectable()\r\nexport class TreeService extends RestService<Tree> {\r\n  \r\n  /** API resource path */\r\n  public TREE_API = 'trees';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Tree, \"trees\", injector);\r\n  }\r\n  \r\n  /** remove tree*/\r\n  remove(item: Tree) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save tree*/\r\n  save(item: Tree): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TREE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Cartography} from '../cartography/cartography.model';\r\nimport {Tree} from './tree.model';\r\n/**\r\n * Tree node model\r\n */\r\nexport class TreeNode extends Resource {\r\n  /** name */\r\n  public name: string;\r\n  /** tooltip*/\r\n  public tooltip: string;\r\n  /** description*/\r\n  public description: string;\r\n  /** datasetURL*/\r\n  public datasetURL: string;\r\n  /** metadataURL*/\r\n  public metadataURL: string;\r\n  /** order*/\r\n  public order : number;\r\n  /** whether tree node is active*/\r\n  public active: boolean;\r\n  /** parent tree node */\r\n  public radio: boolean;\r\n  /** parent tree node */\r\n  public parent: TreeNode;\r\n  /** displayed cartography */  \r\n  public cartography: Cartography;\r\n  /** tree */  \r\n  public tree: Tree;\r\n  /** filterGetFeatureInfo */  \r\n  public filterGetFeatureInfo: boolean;\r\n  /** filterGetMap */  \r\n  public filterGetMap: boolean;\r\n  /** filterSelectable */  \r\n  public filterSelectable: boolean;\r\n  /** style */  \r\n  public style: string;\r\n  \r\n\r\n}\r\n","import { TreeNode } from './tree-node.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Tree node manager service */\r\n@Injectable() \r\nexport class TreeNodeService extends RestService<TreeNode> {\r\n  \r\n  /** API resource path */\r\n  public TREE_NODE_API = 'tree-nodes';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TreeNode, \"tree-nodes\", injector);\r\n  }\r\n  \r\n  /** remove tree node*/\r\n  remove(item: TreeNode) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save tree node*/\r\n  save(item: TreeNode): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      const itemTree = item.tree;\r\n      const itemCartography = item.cartography;\r\n      const itemParent = item.parent;\r\n        \r\n      delete item.tree;\r\n      delete item.cartography;\r\n      delete item.parent;\r\n        \r\n      result = this.http.put(item._links.self.href, item);\r\n      if (itemTree !=null){\r\n          item.substituteRelation('tree',itemTree).subscribe(result => {\r\n      \r\n          }, error => console.error(error));\r\n      }\r\n      if (itemCartography !=null){\r\n          item.substituteRelation('cartography',itemCartography).subscribe(result => {\r\n      \r\n          }, error => console.error(error));\r\n      }\r\n      if (itemParent !=null){\r\n          item.substituteRelation('parent',itemParent).subscribe(result => {\r\n      \r\n          }, error => console.error(error));\r\n      }\r\n      else{\r\n          let treeNodeParent:any = {};\r\n          treeNodeParent._links= {};\r\n          treeNodeParent._links.self = {};\r\n          treeNodeParent._links.self.href=\"\";\r\n          item.deleteRelation('parent', treeNodeParent).subscribe(result => {\r\n        }, error => console.error(error));\r\n      }\r\n      \r\n    } else {\r\n      if (item.tree && item.tree._links && item.tree._links.self) {\r\n        item.tree = item.tree._links.self.href;\r\n      }\r\n      if (item.cartography && item.cartography._links && item.cartography._links.self) {\r\n        item.cartography = item.cartography._links.self.href;\r\n      }      \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TREE_NODE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Tree} from '../tree/tree.model';\r\nimport {Role} from '../role/role.model';\r\nimport {CartographyGroup} from '../cartography/cartography-group.model';\r\nimport {ApplicationParameter} from './application-parameter.model';\r\nimport {ApplicationBackground} from './application-background.model';\r\n\r\n//FIXME ensure application creation in admin app upon initialization (as it is done with Roles and default Users)\r\n/** Territorial appliction name */\r\nexport const TERRITORIAL_APP_NAME:string  = \"Aplicación Territorial\";\r\n\r\n/**\r\n * Application model\r\n */\r\nexport class Application extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  \r\n  /** name*/\r\n  public name: string;\r\n\r\n  /** type*/\r\n  public type: string;\r\n  \r\n  /** title*/\r\n  public title: string;\r\n  \r\n  /** theme*/\r\n  public theme: string;\r\n\r\n    \r\n  /** urlTemplate*/\r\n  public jspTemplate: string;\r\n  \r\n  \r\n  /** system created date*/\r\n  public createdDate: any;\r\n  \r\n  /** available roles*/\r\n  public availableRoles : Role[];\r\n  \r\n  /** trees*/\r\n  public trees : Tree[];\r\n  \r\n  /** scales (comma-separated values)*/\r\n  public scales: string[];\r\n  \r\n  /** projections(comma-separated EPSG codes)*/\r\n  public srs: string;\r\n  \r\n  /** whether application tree will auto refresh*/  \r\n  public treeAutoRefresh: Boolean;\r\n\r\n  /** backgrounds*/\r\n  public backgrounds: ApplicationBackground[];\r\n\r\n  /** situation map*/\r\n  public situationMap: CartographyGroup;    \r\n  \r\n  /** parameters*/\r\n  public parameters: ApplicationParameter[];\r\n}\r\n","import { Application } from './application.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { CartographyGroup } from '../cartography/cartography-group.model';\r\n\r\n/** Application manager service */\r\n@Injectable()\r\nexport class ApplicationService extends RestService<Application> {\r\n  \r\n\r\n  /** API resource path */\r\n  public APPLICATION_API = 'applications';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Application, \"applications\", injector);\r\n  }\r\n  \r\n  /** remove application*/\r\n  remove(item: Application) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save application*/\r\n  save(item: Application): Observable<any> {\r\n    let result: Observable<Object>;\r\n\r\n    let applicationSituationMap:any = {};\r\n    applicationSituationMap._links= {};\r\n    applicationSituationMap._links.self = {};\r\n    applicationSituationMap._links.self.href=\"\";\r\n     \r\n    if (item.situationMap!=null){\r\n        applicationSituationMap=item.situationMap;\r\n        if (typeof item.situationMap._links!= 'undefined') { \r\n            item.situationMap = item.situationMap._links.self.href;\r\n        }       \r\n     }\r\n\r\n    if (item._links!=null) {\r\n      //update relations\r\n      delete item.situationMap;        \r\n      \r\n      if (applicationSituationMap._links.self.href==''){\r\n         item.deleteRelation('situationMap',applicationSituationMap).subscribe(result => {     \r\n             \r\n             }, error => console.error(error));\r\n          \r\n      } else {\r\n          item.substituteRelation('situationMap',applicationSituationMap).subscribe(result => {\r\n         \r\n      \r\n            }, error => console.error(error));           \r\n       } \r\n       \r\n         \r\n      result = this.http.put(item._links.self.href, item);\r\n\r\n           \r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.APPLICATION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n    \r\n    \r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Background} from '../cartography/background.model';\r\nimport {Application} from './application.model'; \r\n\r\n/**\r\n * Application background model\r\n */\r\nexport class ApplicationBackground extends Resource {\r\n  /** order*/\r\n  public order: Number;\r\n  \r\n  /** background*/\r\n  public background: Background;\r\n  \r\n  /** application*/\r\n  public application: Application;\r\n\r\n}\r\n","import { ApplicationBackground } from './application-background.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Application background manager service */\r\n@Injectable() \r\nexport class ApplicationBackgroundService extends RestService<ApplicationBackground> {\r\n  \r\n\r\n  /** API resource path */\r\n  public APPLICATION_BACKGROUND_API ='application-backgrounds';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(ApplicationBackground, \"application-backgrounds\", injector);\r\n  }\r\n  \r\n  /** remove application background*/\r\n  remove(item: ApplicationBackground) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save application background*/\r\n  save(item: ApplicationBackground): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.application !=null){\r\n          item.substituteRelation('application',item.application).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      if (item.background !=null){\r\n          item.substituteRelation('background',item.background).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      \r\n    } else {\r\n      item.application = item.application._links.self.href;\r\n      item.background = item.background._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.APPLICATION_BACKGROUND_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Application} from './application.model'; \r\n\r\n/**\r\n * Application parameter model \r\n */\r\nexport class ApplicationParameter extends Resource {\r\n  /** name*/\r\n  public name: string;\r\n  \r\n  /** type*/\r\n  public type: string;\r\n  \r\n  /** value*/    \r\n  public value: string;\r\n  \r\n  /** application*/\r\n  public application: Application;\r\n\r\n}\r\n","import { ApplicationParameter } from './application-parameter.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Application parameter manager service */\r\n@Injectable() \r\nexport class ApplicationParameterService extends RestService<ApplicationParameter> {\r\n  \r\n\r\n  /** API resource path */\r\n  public APPLICATION_PARAMETER_API = 'application-parameters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(ApplicationParameter, \"application-parameters\", injector);\r\n  }\r\n  \r\n  /** remove application*/\r\n  remove(item: ApplicationParameter) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save application*/\r\n  save(item: ApplicationParameter): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.application !=null){\r\n          item.substituteRelation('application',item.application).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      \r\n    } else {\r\n      item.application = item.application._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.APPLICATION_PARAMETER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Connection model\r\n */\r\nexport class CodeList extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name*/\r\n  public codeListName: string;\r\n  /** type*/\r\n  public value: string;\r\n  /** user*/\r\n  public description: string;\r\n\r\n\r\n}\r\n","import { CodeList } from './codelist.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Connection manager service */\r\n@Injectable()\r\nexport class CodeListService extends RestService<CodeList> {\r\n  \r\n \r\n  /** API resource path */\r\n  public CODELIST_API = 'codelist-values';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CodeList, \"codelist-values\", injector);\r\n  }\r\n  \r\n  /** remove connection*/\r\n  remove(item: CodeList) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save connection*/\r\n  save(item: CodeList): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CODELIST_API ), item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, of } from 'rxjs';\r\n\r\n/** Layer model: configure Layer data and displaying configuration */ \r\nexport class Layer {\r\n  // Display data\r\n  /** layer visibility*/  \r\n  visibility: boolean = false;\r\n  /** Transparency (Transparent) 0-1 (Opaque)*/\r\n  opacity: number = 1.0;\r\n\r\n  // Configuration data\r\n  /** title*/\r\n  title: string;\r\n  \r\n  /** Id to index*/\r\n  id: any;\r\n  \r\n  /** Service Name*/\r\n  serverName: string;\r\n\r\n  /** Service attributions*/\r\n  attributions: string = \"\";\r\n\r\n  /** Request format (image/jpg, ...)*/\r\n  format: string;\r\n  \r\n  /** Request service version*/\r\n  version:string;\r\n\r\n  /** Service url*/\r\n  url: string;\r\n\r\n  /** Is base layer?*/\r\n  isBaseLayer: boolean;\r\n\r\n  /** Request layer name*/\r\n  name: string;\r\n\r\n  /** Is tiled?*/\r\n  tiled: boolean;\r\n  \r\n  /** Description*/\r\n  desc: string = \"\";\r\n  \r\n  /**  Transparent request parameter?*/\r\n  url_transparent: string = \"true\";\r\n  \r\n  /** Request Background parameter color (Hexa)*/\r\n  url_bgcolor: string = \"0x000000\";\r\n  \r\n  /** Request Exception URL*/\r\n  url_exception: string;\r\n  \r\n  /** Extent for tiled services*/\r\n  extent: any = null;\r\n\r\n  /** Tile height (if not defined, the default map is taken)*/\r\n  tileHeight?:number;\r\n  \r\n  /** Tile width (if not defined, the default map is taken)*/\r\n  tileWidth?:number;\r\n  \r\n  /** Enabled for GetFeatureInfo requests (enabled to use the viewer features information tool)*/\r\n  queryable?:boolean = false;\r\n  \r\n  /** Minimum scale*/\r\n  minimumScale?:number;\r\n  \r\n  /** Maximum scale*/\r\n  maximumScale?:number;\r\n  \r\n  /** List of available CRS*/\r\n  projections?:string;\r\n  \r\n  /** Features information URL*/\r\n  infoUrl?:string;\r\n  \r\n  /** Metadata information URL*/\r\n  metadataUrl?:string;\r\n  \r\n  /** Legend URL*/\r\n  legendUrl?:string;\r\n  \r\n  /** Array of OptionalParameter object that defines other optional parameter-value pairs for the request (TIME ...)*/\r\n  optionalParameters?:Array<OptionalParameter>;\r\n}\r\n\r\n/** Optional parameter model: configure parameter-value pair to add to the request layer URL */\r\nexport class OptionalParameter {\r\n  /** key*/key:string;\r\n  /** value*/value:string;\r\n}\r\n\r\n/** Layer configuration model: modify the configuration of a layer when interacting with the map (make visible, move the layer ...) */\r\nexport class LayerConfiguration {\r\n  /** Identifier to index*/id: any;\r\n  /** Layer visibility*/visibility: boolean;\r\n  /** Layer transparency (Transparent) 0-1 (Opaque)*/opacity: number;\r\n  /** Layer position*/position: number;\r\n}\r\n\r\n/** Layer group model*/\r\nexport class LayerGroup {\r\n  /** initially activated (all visible layers)*/active?:boolean;\r\n  /** group name*/name?: String;\r\n  /** group id*/id: String;\r\n  /** array of child Layers*/layers: Array<Layer>;\r\n}\r\n\r\n/** Map options configuration model*/\r\nexport class MapOptionsConfiguration {\r\n  /** scales*/scales?: string;\r\n  /** projections*/projections?: string;\r\n  /** minimum scale*/minScale?:number;\r\n  /** maximum scale*/maxScale?:number;\r\n  /** extent*/extent?:any;\r\n  /** maximum extent*/maxExtent?:any;\r\n  /** tile width*/tileWidth?:number;\r\n  /** tile height*/tileHeight?:number;\r\n  /** parameters*/parameters?: Array<OptionalParameter>\r\n}\r\n\r\n/** Map component status model*/\r\nexport class MapComponentStatus {\r\n    /** loaded?*/loaded: boolean = false;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\n/** Map configuration manager service*/\r\nexport class MapConfigurationManagerService {\r\n  private layersSubject = new BehaviorSubject([]);\r\n  private layers: Array<Layer> = null;\r\n\r\n  private baseLayerGroupsSubject = new BehaviorSubject([]);\r\n  private baseLayerGroups: Array<LayerGroup> = null;\r\n\r\n  private layerConfigurationSubject = new BehaviorSubject([]);\r\n\r\n  private addLayersSubject = new BehaviorSubject([]);\r\n  private removeLayersSubject = new BehaviorSubject([]);\r\n\r\n  private situationMapConfigurationSubject = new BehaviorSubject([]);\r\n  private mapOptionsConfigurationSubject = new BehaviorSubject([]);\r\n\r\n  private mapComponentStatusSubject = new BehaviorSubject([]);\r\n\r\n  /** constructor*/\r\n  constructor() { \r\n   //\r\n  }\r\n  \r\n  /** layer count */\r\n  count = 0;\r\n\r\n  /** configure the overlay layers of the map, by passing as a parameter an array of objects of type Layer objects defining the layers to load.*/\r\n  loadLayersConfiguration(configuration) {\r\n    if (this.layers != null) {\r\n      this.clearLayers(false);\r\n    }\r\n    this.setLayers(configuration);\r\n  }\r\n  \r\n  /**configure the base layers of the map by passing as a parameter an array of objects of type LayerGroup each of them with the corresponding Layer objects defining the layers to load.*/\r\n  loadBaseLayersConfiguration(configuration) {\r\n    this.setBaseLayerGroups(configuration);\r\n  }\r\n\r\n  /** get base layer groups*/\r\n  getBaseLayerGroups(): Observable<LayerGroup[]> {\r\n    return this.baseLayerGroupsSubject.asObservable();\r\n  }\r\n\r\n  /** set base layer groups*/\r\n  setBaseLayerGroups(groups:Array<LayerGroup>) {\r\n    this.baseLayerGroups = groups;\r\n    this.refreshBaseLayerGroups();\r\n  }\r\n\r\n  private refreshBaseLayerGroups() {\r\n    // Send the new values so that all subscribers are updated\r\n    this.baseLayerGroupsSubject.next(this.baseLayerGroups);\r\n  }\r\n\r\n  /** get layers*/\r\n  getLayers(): Observable<Layer[]> {\r\n    return this.layersSubject.asObservable();\r\n  }\r\n\r\n  /** remove all layers from map*/\r\n  clearLayers(refresh:boolean) {\r\n    while(this.layers.length) {\r\n      this.layers.pop();\r\n    }\r\n    if (refresh) {\r\n      this.refreshLayers();\r\n    }\r\n  }\r\n\r\n  /** set layers*/\r\n  setLayers(layers:Array<Layer>) {\r\n    this.layers = layers;\r\n    this.refreshLayers();\r\n  }\r\n\r\n  /** add given layer to map*/\r\n  addLayer(layer:Layer) {\r\n    this.layers.push(layer);\r\n    this.refreshAddLayers(layer);\r\n  }\r\n\r\n  /** add given layer to map at given index*/\r\n  addLayerAt(layer:Layer, index:number) {\r\n    if (index == 0) {\r\n      this.layers = [layer].concat(this.layers);\r\n    } else if (index >= this.layers.length) {\r\n      this.layers.push(layer);\r\n    } else {\r\n      this.layers = this.layers.slice(0, index)\r\n                    .concat([layer])\r\n                    .concat(this.layers.slice(index, this.layers.length));\r\n    }\r\n    this.refreshAddLayers(layer);\r\n    this.refreshLayerConfiguration(layer.id, null, null, index);\r\n  }\r\n\r\n  /** remove given layer from map*/\r\n  removeLayer(layer:Layer) {\r\n    var index = this.layers.indexOf(layer);\r\n    this.removeLayerIndex(index);\r\n  }\r\n\r\n  /** remove layer with given id from map */\r\n  removeLayerId(id) {\r\n    var index = -1;\r\n    for (var i = 0, iLen = this.layers.length; i < iLen; i++) {\r\n      if (this.layers[i].id == id) {\r\n        index = i;\r\n        break;\r\n      }\r\n    }\r\n    this.removeLayerIndex(index);\r\n  }\r\n\r\n  /** remove layer at given index from map */\r\n  removeLayerIndex(index:number) {\r\n    var layer = this.layers[index];\r\n    this.layers.splice(index, 1);\r\n    this.refreshRemoveLayers(layer);\r\n  }\r\n\r\n  /** refresh layers */\r\n  private refreshLayers() {\r\n    // Send the new values so that all subscribers are updated\r\n    this.layersSubject.next(this.layers);\r\n  }\r\n\r\n  /** Observable for layers added */\r\n  getLayersAdded(): Observable<Layer[]> {\r\n    return this.addLayersSubject.asObservable();\r\n  }\r\n\r\n  private refreshAddLayers(layer:Layer) {\r\n    // Send the new values so that all subscribers are updated\r\n    this.addLayersSubject.next([layer]);\r\n  }\r\n\r\n  getLayersRemoved(): Observable<Layer[]> {\r\n    return this.removeLayersSubject.asObservable();\r\n  }\r\n\r\n  private refreshRemoveLayers(layer:Layer) {\r\n    // Send the new values so that all subscribers are updated\r\n    this.removeLayersSubject.next([layer]);\r\n  }\r\n\r\n  getLayerConfigurationListener(): Observable<LayerConfiguration[]> {\r\n    return this.layerConfigurationSubject.asObservable();\r\n  }\r\n\r\n  private getLayerIndexById(id:string):number{\r\n    var index = -1;\r\n    for (var i = 0, iLen = this.layers.length; i < iLen; i++) {\r\n      if (this.layers[i].id == id) {\r\n        index = i;\r\n        break;\r\n      }\r\n    }\r\n    return index;\r\n  }\r\n  \r\n  /** move layer with given id to the given index*/\r\n  moveLayer(id, index) {\r\n    var layerIndex = this.getLayerIndexById(id);\r\n    if (layerIndex != -1) {\r\n      var layer = this.layers.splice(layerIndex, 1);\r\n      this.layers = \r\n        this.layers.slice(0, index)\r\n        .concat(layer)\r\n        .concat(this.layers.slice(index, this.layers.length));\r\n    }\r\n    this.refreshLayerConfiguration(id, null, null, index);\r\n  }\r\n\r\n  /** change visibility of layer with given id to the given value*/\r\n  changeLayerVisibility(id, visibility) {\r\n    this.refreshLayerConfiguration(id, null, visibility, null);\r\n  }\r\n\r\n  /** change opacity of layer with given id to the given value*/\r\n  changeLayerOpacity(id, opacity) {\r\n    this.refreshLayerConfiguration(id, opacity, null, null);\r\n  }\r\n\r\n  private refreshLayerConfiguration(id, opacity, visibility, position) {\r\n    // Send the new values so that all subscribers are updated\r\n    var layer = new LayerConfiguration();\r\n    layer.id = id;\r\n    layer.opacity = opacity;\r\n    layer.visibility = visibility;\r\n    layer.position = position;\r\n    this.layerConfigurationSubject.next([layer]);\r\n  }\r\n\r\n  getSituationMapConfigurationListener(): Observable<Layer[]> {\r\n    return this.situationMapConfigurationSubject.asObservable();\r\n  }\r\n\r\n  /** configure the situation map of the map component by passing as a parameter an array of objects of type LayerGroup, each of them with the corresponding Layer objects defining the layers to load as situation map.*/\r\n  loadSituationMapConfiguration(layers:Array<Layer>) {\r\n    // Send the new values so that all subscribers are updated\r\n    this.situationMapConfigurationSubject.next(layers);\r\n  }\r\n\r\n  getMapOptionsConfigurationListener(): Observable<MapOptionsConfiguration[]> {\r\n    return this.mapOptionsConfigurationSubject.asObservable();\r\n  }\r\n\r\n  /** load map options configuration */\r\n  loadMapOptionsConfiguration(configuration:MapOptionsConfiguration) {\r\n    // Send the new values so that all subscribers are updated\r\n    this.mapOptionsConfigurationSubject.next([configuration]);\r\n  }\r\n\r\n  getMapComponentStatusListener(): Observable<MapComponentStatus[]> {\r\n    return this.mapComponentStatusSubject.asObservable();\r\n  }\r\n  \r\n  /** set map component status */\r\n  setMapComponentStatus(status:MapComponentStatus) {\r\n    //Notify the map component status\r\n    this.mapComponentStatusSubject.next([status]);\r\n  }\r\n\r\n}\r\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { Principal } from './principal.service';\r\n\r\n/**\r\n * @whatItDoes Conditionally includes an HTML element if current user has any\r\n * of the authorities passed as the `expression`.\r\n *\r\n * @howToUse\r\n * ```\r\n *     <some-element *sitmunHasAnyAuthority=\"'ROLE_ADMIN'\">...</some-element>\r\n *\r\n *     <some-element *sitmunHasAnyAuthority=\"['ROLE_ADMIN', 'ROLE_USER']\">...</some-element>\r\n * ```\r\n */\r\n@Directive({\r\n    selector: '[sitmunHasAnyAuthority]'\r\n})\r\nexport class HasAnyAuthorityDirective {\r\n    \r\n    /** authorities to check */\r\n    public authorities: string[]; \r\n    \r\n    /** constructor */\r\n    constructor(private principal: Principal, private templateRef: TemplateRef<any>, private viewContainerRef: ViewContainerRef) {\r\n    }\r\n    \r\n    /** territory to check authorities*/\r\n    @Input() territory: string;\r\n    \r\n    /** Set whether current user has any of the given authorities */\r\n    @Input()\r\n    set sitmunHasAnyAuthority(value: string|string[]) {\r\n        this.authorities = typeof value === 'string' ? [ <string> value ] : <string[]> value;\r\n        this.updateView();\r\n        // Get notified each time authentication state changes.\r\n        this.principal.getAuthenticationState().subscribe((identity) => this.updateView());\r\n    }\r\n    \r\n    /** update view */\r\n    private updateView(): void {\r\n        if (this.territory){\r\n        this.principal.hasAnyAuthorityOnTerritory(this.authorities,this.territory).then((result) => {\r\n            this.viewContainerRef.clear();\r\n            if (result) {\r\n                this.viewContainerRef.createEmbeddedView(this.templateRef);\r\n            }\r\n        });\r\n\r\n        } else {\r\n        this.principal.hasAnyAuthority(this.authorities).then((result) => {\r\n            this.viewContainerRef.clear();\r\n            if (result) {\r\n                this.viewContainerRef.createEmbeddedView(this.templateRef);\r\n            }\r\n        });\r\n        }\r\n    }\r\n}\r\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { Principal } from './principal.service';\r\n\r\n/**\r\n * @whatItDoes Conditionally includes an HTML element if current user has any\r\n * of the authorities passed as the `expression`.\r\n *\r\n * @howToUse\r\n * ```\r\n *     <some-element *sitmunHasAnyAuthority=\"'ROLE_ADMIN'\">...</some-element>\r\n *\r\n *     <some-element *sitmunHasAnyAuthority=\"['ROLE_ADMIN', 'ROLE_USER']\">...</some-element>\r\n * ```\r\n */\r\n@Directive({\r\n    selector: '[sitmunHasAnyAuthorityOnTerritory]'\r\n})\r\nexport class HasAnyAuthorityOnTerritoryDirective {\r\n\r\n    /** authorities to check */\r\n    public authorities: string[]; \r\n\r\n    /** territory to check authorities*/\r\n    public territory: string; \r\n\r\n    /** constructor */\r\n    constructor(private principal: Principal, private templateRef: TemplateRef<any>, private viewContainerRef: ViewContainerRef) {\r\n    }\r\n    \r\n    /** Set whether current user has any of the given authorities on territory */\r\n    @Input()\r\n    set sitmunHasAnyAuthorityOnTerritory(opts: any) {\r\n\r\n        this.authorities = typeof opts.authorities === 'string' ? [ <string> opts.authorities ] : <string[]> opts.authorities;\r\n        this.territory = opts.territory;\r\n        this.updateView();\r\n        // Get notified each time authentication state changes.\r\n        this.principal.getAuthenticationState().subscribe((identity) => this.updateView());\r\n    }\r\n    \r\n    /** update view */\r\n    private updateView(): void {\r\n        if (this.territory){\r\n        this.principal.hasAnyAuthorityOnTerritory(this.authorities,this.territory).then((result) => {\r\n            this.viewContainerRef.clear();\r\n            if (result) {\r\n                this.viewContainerRef.createEmbeddedView(this.templateRef);\r\n            }\r\n        });\r\n\r\n        } else {\r\n        this.principal.hasAnyAuthority(this.authorities).then((result) => {\r\n            this.viewContainerRef.clear();\r\n            if (result) {\r\n                this.viewContainerRef.createEmbeddedView(this.templateRef);\r\n            }\r\n        });\r\n        }\r\n    }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { CommonModule } from '@angular/common';\r\nimport {HttpClientModule, HTTP_INTERCEPTORS, HttpClient} from '@angular/common/http';\r\nimport { RouterModule } from '@angular/router';\r\n//import { AngularHalModule } from '../../lib/angular-hal';\r\nimport {CodeListService} from './codelist/codelist.service';\r\nimport {TerritoryService} from './territory/territory.service';\r\nimport {TerritoryTypeService} from './territory/territory-type.service';\r\nimport {TerritoryGroupTypeService} from './territory/territory-group-type.service';\r\nimport {UserPositionService} from './user/user-position.service';\r\nimport {UserConfigurationService} from './user/user-configuration.service';\r\nimport {RoleService} from './role/role.service';\r\nimport {UserService} from './user/user.service';\r\nimport {ConnectionService} from './connection/connection.service';\r\nimport {TaskService} from './task/task.service';\r\nimport {TaskTypeService} from './task/task-type.service';\r\nimport {TaskGroupService} from './task/task-group.service';\r\nimport {TaskParameterService} from './task/task-parameter.service';\r\nimport {TaskAvailabilityService} from './task/task-availability.service';\r\nimport {TaskUIService} from './task/task-ui.service';\r\nimport {ServiceService} from './service/service.service';\r\nimport {ServiceParameterService} from './service/service-parameter.service';\r\nimport {CartographyService} from './cartography/cartography.service';\r\nimport {CartographyAvailabilityService} from './cartography/cartography-availability.service';\r\nimport {CartographyFilterService} from './cartography/cartography-filter.service';\r\nimport {CartographyGroupService} from './cartography/cartography-group.service';\r\nimport {CartographyParameterService} from './cartography/cartography-parameter.service';\r\nimport {BackgroundService} from './cartography/background.service';\r\nimport {TreeService} from './tree/tree.service';\r\nimport {TreeNodeService} from './tree/tree-node.service';\r\nimport {ApplicationService} from './application/application.service';\r\nimport {ApplicationParameterService} from './application/application-parameter.service';\r\nimport {ApplicationBackgroundService} from './application/application-background.service';\r\nimport { MapConfigurationManagerService } from './map/map-configuration-manager.service';\r\nimport { AuthService } from './auth/auth.service';\r\nimport { Principal } from './auth/principal.service';\r\nimport { AuthInterceptor } from './auth/auth.interceptor';\r\nimport { AuthExpiredInterceptor } from './auth/auth-expired.interceptor';\r\nimport { HasAnyAuthorityDirective } from './auth/has-any-authority.directive';\r\nimport { HasAnyAuthorityOnTerritoryDirective } from './auth/has-any-authority-on-territory.directive';\r\nimport { LoginService } from './auth/login.service';\r\nimport { AccountService } from './account/account.service';\r\nimport {TranslateHttpLoader} from '@ngx-translate/http-loader';\r\nimport {TranslateLoader, TranslateModule} from '@ngx-translate/core';\r\nimport { TranslationService } from './translation/translation.service';\r\nimport { LanguageService } from './translation/language.service';\r\nimport { DashboardService } from './dashboard/dashboard.service';\r\nimport { CapabilitiesService } from './capabilities/capabilities.service';\r\nimport { ConfigurationParametersService } from './configuration/configuration-parameters.service';\r\nimport { CartographyStyleService } from './cartography/cartography-style.service';\r\nimport { CartographySpatialSelectionParameterService } from './cartography/cartography-spatial-selection-parameter.service';\r\nimport { GetInfoService } from './getInfo/getInfo.service';\r\n/** load i18n assets*/\r\nexport function createTranslateLoader(http: HttpClient) {\r\n  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\r\n}\r\n\r\n\r\n/** SITMUN frontend core module */\r\n@NgModule({\r\n  imports: [\r\n    /*RouterModule,\r\n    HttpClientModule,\r\n    CommonModule,\r\n    AngularHalModule,*/\r\n    TranslateModule.forRoot({\r\n      loader: {\r\n        provide: TranslateLoader,\r\n        useFactory: (createTranslateLoader),\r\n        deps: [HttpClient]\r\n      }\r\n    }),\r\n  ],\r\n  declarations: [\r\n    HasAnyAuthorityDirective,\r\n    HasAnyAuthorityOnTerritoryDirective,\r\n  ],\r\n  exports: [\r\n    HasAnyAuthorityDirective,\r\n    HasAnyAuthorityOnTerritoryDirective,\r\n    TranslateModule\r\n  ]\r\n})\r\nexport class SitmunFrontendCoreModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: SitmunFrontendCoreModule,\r\n      providers: [\r\n        CodeListService,\r\n        TerritoryService,\r\n        TerritoryTypeService,\r\n        TerritoryGroupTypeService,\r\n        RoleService,\r\n        AccountService,\r\n        AuthService,\r\n        UserService,\r\n        ConnectionService,\r\n        TaskService,\r\n        TaskTypeService,\r\n        TaskUIService,\r\n        TaskGroupService,\r\n        TaskParameterService,\r\n        TaskAvailabilityService,\r\n        ServiceService,\r\n        ConfigurationParametersService,\r\n        CapabilitiesService,\r\n        GetInfoService,\r\n        ServiceParameterService,\r\n        CartographyService,\r\n        CartographyGroupService,\r\n        CartographyAvailabilityService,\r\n        CartographyParameterService,\r\n        CartographySpatialSelectionParameterService,\r\n        CartographyStyleService,\r\n        CartographyFilterService,\r\n        BackgroundService,\r\n        TreeService,\r\n        TreeNodeService,\r\n        ApplicationService,\r\n        ApplicationParameterService,\r\n        ApplicationBackgroundService,\r\n        AuthInterceptor,\r\n        AuthExpiredInterceptor,\r\n        Principal,\r\n        UserPositionService,\r\n        UserConfigurationService,\r\n        LoginService,\r\n        TranslationService,\r\n        LanguageService,\r\n        DashboardService,\r\n        MapConfigurationManagerService,\r\n        {\r\n          provide: HTTP_INTERCEPTORS,\r\n          useClass: AuthInterceptor,\r\n          multi: true\r\n        }\r\n        , {\r\n          provide: HTTP_INTERCEPTORS,\r\n          useClass: AuthExpiredInterceptor,\r\n          multi: true\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n\r\n","import {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {HttpClient, HttpClientModule} from '@angular/common/http';\r\nimport {HalParam, RestService} from './rest.service';\r\nimport {ExternalService} from './external.service';\r\nimport {ResourceService} from './resource.service';\r\nimport {ExternalConfigurationHandlerInterface} from './external-configuration.handler';\r\n\r\nimport 'rxjs';\r\n\r\nimport {SubTypeBuilder} from './subtype-builder';\r\n\r\nexport {ExternalService} from './external.service';\r\nexport {RestService} from './rest.service';\r\nexport {Resource} from './resource';\r\nexport {ResourceArray} from './resource-array';\r\nexport {ResourceService} from './resource.service';\r\nexport {Sort} from './sort';\r\nexport {ResourceHelper} from './resource-helper';\r\nexport {ExternalConfiguration} from './ExternalConfiguration';\r\nexport {ExternalConfigurationHandlerInterface} from './external-configuration.handler';\r\nexport {HalOptions, HalParam} from './rest.service';\r\nexport {SubTypeBuilder} from './subtype-builder';\r\n\r\n\r\n/** Angular HAL module */\r\n@NgModule({\r\n    imports: [HttpClientModule],\r\n    declarations: [],\r\n    exports: [HttpClientModule],\r\n    providers: [\r\n        ExternalService,\r\n        HttpClient,\r\n        {\r\n            provide: ResourceService,\r\n            useClass: ResourceService,\r\n            deps: [ExternalService]\r\n        }]\r\n})\r\nexport class AngularHalModule {\r\n    static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: AngularHalModule,\r\n            providers: [\r\n                ExternalService,\r\n                HttpClient,\r\n                {\r\n                    provide: ResourceService,\r\n                    useClass: ResourceService,\r\n                    deps: [ExternalService]\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}"]}