{"version":3,"sources":["ng://@sitmun/frontend-core/src/lib/angular-hal/lib/resource-array.ts","ng://@sitmun/frontend-core/src/lib/angular-hal/lib/resource-helper.ts","ng://@sitmun/frontend-core/src/lib/angular-hal/lib/external.service.ts","ng://@sitmun/frontend-core/src/lib/angular-hal/lib/resource.service.ts","ng://@sitmun/frontend-core/src/lib/angular-hal/lib/rest.service.ts","ng://@sitmun/frontend-core/src/lib/angular-hal/lib/resource.ts","ng://@sitmun/frontend-core/src/lib/angular-hal/lib/angular-hal.module.ts"],"sourcesContent":["\r\nimport {throwError as observableThrowError} from 'rxjs';\r\n\r\nimport {catchError, map} from 'rxjs/operators';\r\nimport {Sort} from './sort';\r\nimport {ArrayInterface} from './array-interface';\r\nimport {ResourceHelper} from './resource-helper';\r\nimport {Resource} from './resource';\r\nimport * as url from 'url';\r\nimport {Observable} from 'rxjs';\r\n\r\n/** REST array of resource implementation */\r\nexport class ResourceArray<T extends Resource> implements ArrayInterface<T> {\r\n    /** sorting info */\r\n    public sortInfo: Sort[];\r\n    /** proxy url */\r\n    public proxyUrl: string;\r\n    /** root url */\r\n    public rootUrl: string;\r\n\r\n    /** self url */\r\n    public self_uri: string;\r\n    /** next resource url */\r\n    public next_uri: string;\r\n    /** previous resource url */\r\n    public prev_uri: string;\r\n    /** first resource url */\r\n    public first_uri: string;\r\n    /** last resource url */\r\n    public last_uri: string;\r\n\r\n    /** embedded array list */\r\n    public _embedded;\r\n\r\n    /** total number of elements in this array */\r\n    public totalElements = 0;\r\n    /** total number of pages in the response */\r\n    public totalPages = 1;\r\n    \r\n    /** page number in the response */\r\n    public pageNumber = 1;\r\n    \r\n    /** page size */\r\n    public pageSize: number;\r\n\r\n    /** array components */\r\n    public result: T[] = [];\r\n\r\n    /** push a new resource to the array */\r\n    push = (el: T) => {\r\n        this.result.push(el);\r\n    };\r\n\r\n    /** length of the array */\r\n    length = (): number => {\r\n        return this.result.length;\r\n    };\r\n\r\n    /** load array data from REST request */\r\n    private init = (type: { new(): T }, response: any, sortInfo: Sort[]): ResourceArray<T> => {\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(this._embedded);\r\n        result.sortInfo = sortInfo;\r\n        ResourceHelper.instantiateResourceCollection(type, response, result);\r\n        return result;\r\n    };\r\n\r\n    /** Load next page */\r\n    next = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.next_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.next_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no next defined');\r\n    };\r\n\r\n    /** Load previous page */\r\n    prev = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.prev_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.prev_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no prev defined');\r\n    };\r\n\r\n    /** Load first page */\r\n    first = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.first_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.first_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no first defined');\r\n    };\r\n\r\n    /** Load last page */\r\n    last = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.last_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.last_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no last defined');\r\n    };\r\n\r\n    /** Load page with given pageNumber*/\r\n    page = (type: { new(): T }, pageNumber: number): Observable<ResourceArray<T>> => {\r\n        this.self_uri = this.self_uri.replace('{?page,size,sort}', '');\r\n        this.self_uri = this.self_uri.replace('{&sort}', '');\r\n        let urlParsed = url.parse(ResourceHelper.getProxy(this.self_uri));\r\n        let query: string = ResourceArray.replaceOrAdd(urlParsed.query, 'size', this.pageSize.toString());\r\n        query = ResourceArray.replaceOrAdd(query, 'page', pageNumber.toString());\r\n\r\n\r\n        let uri = urlParsed.query ?\r\n            ResourceHelper.getProxy(this.self_uri).replace(urlParsed.query, query) : ResourceHelper.getProxy(this.self_uri).concat(query);\r\n        uri = this.addSortInfo(uri);\r\n        return ResourceHelper.getHttp().get(uri, {headers: ResourceHelper.headers}).pipe(\r\n            map(response => this.init(type, response, this.sortInfo)),\r\n            catchError(error => observableThrowError(error)),);\r\n    };\r\n\r\n    /** Sort collection based on given sort attribute */\r\n    sortElements = (type: { new(): T }, ...sort: Sort[]): Observable<ResourceArray<T>> => {\r\n        this.self_uri = this.self_uri.replace('{?page,size,sort}', '');\r\n        this.self_uri = this.self_uri.replace('{&sort}', '');\r\n        let uri = ResourceHelper.getProxy(this.self_uri).concat('?', 'size=', this.pageSize.toString(), '&page=', this.pageNumber.toString());\r\n        uri = this.addSortInfo(uri);\r\n        return ResourceHelper.getHttp().get(uri, {headers: ResourceHelper.headers}).pipe(\r\n            map(response => this.init(type, response, sort)),\r\n            catchError(error => observableThrowError(error)),);\r\n    };\r\n\r\n    /** Load page with given size */\r\n    size = (type: { new(): T }, size: number): Observable<ResourceArray<T>> => {\r\n        let uri = ResourceHelper.getProxy(this.self_uri).concat('?', 'size=', size.toString());\r\n        uri = this.addSortInfo(uri);\r\n        return ResourceHelper.getHttp().get(uri, {headers: ResourceHelper.headers}).pipe(\r\n            map(response => this.init(type, response, this.sortInfo)),\r\n            catchError(error => observableThrowError(error)),);\r\n    };\r\n\r\n    /** Add sort info to given URI */\r\n    private addSortInfo(uri: string) {\r\n        if (this.sortInfo) {\r\n            for (const item of this.sortInfo) {\r\n                uri = uri.concat('&sort=', item.path, ',', item.order);\r\n            }\r\n        }\r\n        return uri;\r\n    }\r\n\r\n    /** Add replace or add param value to query string */\r\n    private static replaceOrAdd(query: string, field: string, value: string): string {\r\n        if (query) {\r\n            let idx: number = query.indexOf(field);\r\n            let idxNextAmp: number = query.indexOf('&', idx) == -1 ? query.indexOf('/', idx) : query.indexOf('&', idx);\r\n\r\n            if (idx != -1) {\r\n                let seachValue = query.substring(idx, idxNextAmp);\r\n                query = query.replace(seachValue, field + '=' + value);\r\n            } else {\r\n                query = query.concat(\"&\" + field + '=' + value);\r\n            }\r\n        } else {\r\n            query = \"?\" + field + '=' + value;\r\n        }\r\n        return query;\r\n    }\r\n}\r\n","import {HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';\r\nimport {Resource} from './resource';\r\nimport {ResourceArray} from './resource-array';\r\nimport {HalOptions} from './rest.service';\r\nimport {SubTypeBuilder} from './subtype-builder';\r\nimport {isNullOrUndefined, isPrimitive} from 'util';\r\nimport * as url from 'url';\r\n\r\n/** REST API access helper */\r\nexport class ResourceHelper {\r\n\r\n    /** HttpHeaders */\r\n    public static headers: HttpHeaders = new HttpHeaders();\r\n    /** Proxy URL */\r\n    private static proxy_uri: string = null;\r\n    /** Root URL */\r\n    private static root_uri: string = null;\r\n    /** HttpClient */\r\n    private static http: HttpClient = null;\r\n\r\n    /** get request headers */\r\n    /*public static get headers(): HttpHeaders {\r\n        if (isNullOrUndefined(this._headers))\r\n          ResourceHelper._headers = new HttpHeaders();\r\n        return ResourceHelper._headers;\r\n    }*/\r\n\r\n    /** set request headers */\r\n    /*public static set headers(headers: HttpHeaders) {\r\n      ResourceHelper._headers = headers;\r\n    }*/\r\n\r\n    /** get request option params */\r\n    static optionParams(params: HttpParams, options?: HalOptions): HttpParams {\r\n        if (options) {\r\n\r\n            if (options.params) {\r\n                for (const param of options.params) {\r\n                    params = params.append(param.key, param.value.toString());\r\n                }\r\n            }\r\n\r\n            if (options.size) {\r\n                params = params.append('size', options.size.toString());\r\n            }\r\n\r\n            if (options.sort) {\r\n                for (const s of options.sort) {\r\n                    let sortString = '';\r\n                    sortString = s.path ? sortString.concat(s.path) : sortString;\r\n                    sortString = s.order ? sortString.concat(',').concat(s.order) : sortString;\r\n                    params = params.append('sort', sortString);\r\n                }\r\n            }\r\n\r\n        }\r\n        return params;\r\n    }\r\n\r\n    /** resolve resource relations */\r\n    static resolveRelations(resource: Resource): Object {\r\n        const result: any = {};\r\n        for (const key in resource) {\r\n            if (!isNullOrUndefined(resource[key])) {\r\n                if (ResourceHelper.className(resource[key])\r\n                    .find((className: string) => className == 'Resource')) {\r\n                    if (resource[key]['_links'])\r\n                        result[key] = resource[key]['_links']['self']['href'];\r\n                } else if (Array.isArray(resource[key])) {\r\n                    let array: any[] = resource[key];\r\n                    if (array) {\r\n                        result[key] = new Array();\r\n                        array.forEach((element) => {\r\n                            if (isPrimitive(element)) {\r\n                                result[key].push(element);\r\n                            }\r\n                            else {\r\n                                result[key].push(this.resolveRelations(element));\r\n                            }\r\n                        });\r\n                    }\r\n                } else {\r\n                    result[key] = resource[key];\r\n                }\r\n            }\r\n        }\r\n        return result as Object;\r\n    }\r\n\r\n    /** create an empty resource from embedded data*/\r\n    static createEmptyResult<T extends Resource>(_embedded: string): ResourceArray<T> {\r\n        let resourceArray: ResourceArray<T> = new ResourceArray<T>();\r\n        resourceArray._embedded = _embedded;\r\n        return resourceArray;\r\n    }\r\n\r\n    /** get resource class name*/\r\n    static getClassName(obj: any): string {\r\n        var funcNameRegex = /function (.+?)\\(/;\r\n        var results = (funcNameRegex).exec(obj.constructor.toString());\r\n        return (results && results.length > 1) ? results[1] : '';\r\n    }\r\n\r\n    \r\n    /** get resource class name from a prototype object*/\r\n    static className(objProto: any): string[] {\r\n        let classNames = [];\r\n        let obj = Object.getPrototypeOf(objProto);\r\n        let className: string;\r\n\r\n        while ((className = ResourceHelper.getClassName(obj)) !== 'Object') {\r\n            classNames.push(className);\r\n            obj = Object.getPrototypeOf(obj);\r\n        }\r\n\r\n        return classNames;\r\n    }\r\n\r\n    /** instantiate a ResourceCollection from response embedded data*/\r\n    static instantiateResourceCollection<T extends Resource>(type: { new(): T }, payload: any,\r\n                                                             result: ResourceArray<T>, builder?: SubTypeBuilder,embeddedName?:String): ResourceArray<T> {\r\n        for (const embeddedClassName of Object.keys(payload[result._embedded])) {\r\n            if(!embeddedName || (embeddedName && embeddedClassName==embeddedName)){\r\n                let embedded: any = payload[result._embedded];\r\n                const items = embedded[embeddedClassName];\r\n                for (let item of items) {\r\n                    let instance: T = new type();\r\n                    instance = this.searchSubtypes(builder, embeddedClassName, instance);\r\n\r\n                    this.instantiateResource(instance, item);\r\n                    result.push(instance);\r\n                }\r\n            }\r\n        }\r\n\r\n        result.totalElements = payload.page ? payload.page.totalElements : result.length;\r\n        result.totalPages = payload.page ? payload.page.totalPages : 1;\r\n        result.pageNumber = payload.page ? payload.page.number : 1;\r\n        result.pageSize = payload.page ? payload.page.size : 20;\r\n\r\n        result.self_uri = payload._links && payload._links.self ? payload._links.self.href : undefined;\r\n        result.next_uri = payload._links && payload._links.next ? payload._links.next.href : undefined;\r\n        result.prev_uri = payload._links && payload._links.prev ? payload._links.prev.href : undefined;\r\n        result.first_uri = payload._links && payload._links.first ? payload._links.first.href : undefined;\r\n        result.last_uri = payload._links && payload._links.last ? payload._links.last.href : undefined;\r\n        return result;\r\n    }\r\n\r\n    /** search subtypes*/\r\n    static searchSubtypes<T extends Resource>(builder: SubTypeBuilder, embeddedClassName: string, instance: T) {\r\n        if (builder && builder.subtypes) {\r\n            let keys = builder.subtypes.keys();\r\n            Array.from(keys).forEach((subtypeKey: string) => {\r\n                if (embeddedClassName.toLowerCase().startsWith(subtypeKey.toLowerCase())) {\r\n                    let subtype: { new(): any } = builder.subtypes.get(subtypeKey);\r\n                    instance = new subtype();\r\n                }\r\n            });\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    /** instantiate a Resource from response */\r\n    static instantiateResource<T extends Resource>(entity: T, payload: Object): T {\r\n        for (const p in payload) {\r\n            //TODO array init\r\n            /* if(entity[p].constructor === Array && isNullOrUndefined(payload[p]))\r\n                 entity[p] = [];\r\n             else*/\r\n            entity[p] = payload[p];\r\n        }\r\n        return entity;\r\n    }\r\n\r\n    /** set proxy URL */\r\n    static setProxyUri(proxy_uri: string) {\r\n        ResourceHelper.proxy_uri = proxy_uri;\r\n    }\r\n\r\n    /** set Root URI */\r\n    static setRootUri(root_uri: string) {\r\n        ResourceHelper.root_uri = root_uri;\r\n    }\r\n\r\n    /** get proxy URL */\r\n    public static getURL(): string {\r\n        return ResourceHelper.proxy_uri && ResourceHelper.proxy_uri != '' ?\r\n            ResourceHelper.addSlash(ResourceHelper.proxy_uri) :\r\n            ResourceHelper.addSlash(ResourceHelper.root_uri);\r\n    }\r\n\r\n    /** add slash to URI */\r\n    private static addSlash(uri: string): string {\r\n        let uriParsed = url.parse(uri);\r\n        if (isNullOrUndefined(uriParsed.search) && uri && uri[uri.length - 1] != '/')\r\n            return uri + '/';\r\n        return uri;\r\n    }\r\n\r\n    /** get proxy from URL */\r\n    public static getProxy(url: string): string {\r\n        if (!ResourceHelper.proxy_uri || ResourceHelper.proxy_uri == '')\r\n            return url;\r\n        return ResourceHelper.addSlash(url.replace(ResourceHelper.root_uri, ResourceHelper.proxy_uri));\r\n    }\r\n\r\n    /** set HttpClient*/\r\n    public static setHttp(http: HttpClient) {\r\n        ResourceHelper.http = http;\r\n    }\r\n\r\n    /** get HttpClient*/\r\n    public static getHttp(): HttpClient {\r\n        return ResourceHelper.http;\r\n    }\r\n\r\n    /** get root URI*/\r\n    static getRootUri() {\r\n        return ResourceHelper.root_uri;\r\n    }\r\n}\r\n","import {HttpClient} from '@angular/common/http';\r\nimport {Inject, Injectable} from '@angular/core';\r\nimport {ResourceHelper} from './resource-helper';\r\nimport {ExternalConfigurationHandlerInterface} from './external-configuration.handler';\r\nimport {ExternalConfiguration} from './ExternalConfiguration';\r\n\r\n\r\n/** ExternalService */\r\n@Injectable()\r\nexport class ExternalService {\r\n\r\n    /** constructor */\r\n    constructor(@Inject('ExternalConfigurationService') private externalConfigurationService: ExternalConfigurationHandlerInterface) {\r\n        ResourceHelper.setProxyUri(externalConfigurationService.getProxyUri());\r\n        ResourceHelper.setRootUri(externalConfigurationService.getRootUri());\r\n        ResourceHelper.setHttp(externalConfigurationService.getHttp());\r\n    }\r\n\r\n    /** update ExternalConfigurationHandler */\r\n    public updateExternalConfigurationHandlerInterface(externalConfigurationService: ExternalConfigurationHandlerInterface) {\r\n\tthis.externalConfigurationService = externalConfigurationService;\r\n\r\n        ResourceHelper.setProxyUri(externalConfigurationService.getProxyUri());\r\n        ResourceHelper.setRootUri(externalConfigurationService.getRootUri());\r\n        ResourceHelper.setHttp(externalConfigurationService.getHttp());\r\n    }\r\n\r\n    /** get ExternalConfiguration */\r\n    public getExternalConfiguration(): ExternalConfiguration {\r\n        return this.externalConfigurationService.getExternalConfiguration();\r\n    }\r\n\r\n    /** get proxy URL */\r\n    public getProxyUri(): string {\r\n        return this.externalConfigurationService.getProxyUri();\r\n    }\r\n\r\n    /** get Root URI */\r\n    public getRootUri(): string {\r\n        return this.externalConfigurationService.getRootUri();\r\n    }\r\n\r\n    /** get URL */\r\n    public getURL(): string {\r\n        return ResourceHelper.getURL();\r\n    }\r\n\r\n    /** get HttpClient */\r\n    public getHttp(): HttpClient {\r\n        return ResourceHelper.getHttp();\r\n    }\r\n}\r\n","\r\nimport { throwError as observableThrowError } from 'rxjs';\r\n\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { Resource } from './resource';\r\nimport { ResourceHelper } from './resource-helper';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Sort } from './sort';\r\nimport { ResourceArray } from './resource-array';\r\nimport { ExternalService } from './external.service';\r\nimport { HalOptions } from './rest.service';\r\nimport { SubTypeBuilder } from './subtype-builder';\r\nimport { Observable } from 'rxjs';\r\n\r\n/** ResourceService */\r\n@Injectable()\r\nexport class ResourceService {\r\n\r\n\r\n    /** constructor */\r\n    constructor(private externalService: ExternalService) { }\r\n\r\n\r\n    /** get URL */\r\n    private static getURL(): string {\r\n        return ResourceHelper.getURL();\r\n    }\r\n\r\n    /** get all resources from a base URI of a given type */\r\n    public getAll<T extends Resource>(type: { new(): T }, resource: string, _embedded: string, options?: HalOptions, subType?: SubTypeBuilder, embeddedName?:String, ignoreProjection?:boolean): Observable<ResourceArray<T>> {\r\n        let uri = this.getResourceUrl(resource);\r\n        if(!ignoreProjection){\r\n            uri = uri.concat('?projection=view');\r\n        }\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        result.sortInfo = options ? options.sort : undefined;\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, params: params });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result, subType,embeddedName)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** get resource from a base URI and a given id */\r\n    public get<T extends Resource>(type: { new(): T }, resource: string, id: any): Observable<T> {\r\n        const uri = this.getResourceUrl(resource).concat('/', id, '?projection=view');\r\n        const result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers });\r\n        return observable.pipe(map(data => ResourceHelper.instantiateResource(result, data)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** get resource from its selflink */\r\n    public getBySelfLink<T extends Resource>(type: { new(): T }, resourceLink: string): Observable<T> {\r\n        const result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(ResourceHelper.getProxy(resourceLink), { headers: ResourceHelper.headers });\r\n        return observable.pipe(map(data => ResourceHelper.instantiateResource(result, data)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** search resources from a given base path, query and options */\r\n    public search<T extends Resource>(type: { new(): T }, query: string, resource: string, _embedded: string, options?: HalOptions): Observable<ResourceArray<T>> {\r\n        const uri = this.getResourceUrl(resource).concat('/search/', query);\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, params: params });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** search a single resource from a given base path, query and options */\r\n    public searchSingle<T extends Resource>(type: { new(): T }, query: string, resource: string, options?: HalOptions): Observable<T> {\r\n        const uri = this.getResourceUrl(resource).concat('/search/', query);\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, params: params });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResource(result, response)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** search resources from a given base path, custom query and options */\r\n    public customQuery<T extends Resource>(type: { new(): T }, query: string, resource: string, _embedded: string, options?: HalOptions): Observable<ResourceArray<T>> {\r\n        const uri = this.getResourceUrl(resource + query);\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, params: params });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** get resource given a relation link */\r\n    public getByRelation<T extends Resource>(type: { new(): T }, resourceLink: string): Observable<T> {\r\n        let result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(resourceLink, { headers: ResourceHelper.headers });\r\n        return observable.pipe(map(data => ResourceHelper.instantiateResource(result, data)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** get resource array given a relation link */\r\n    public getByRelationArray<T extends Resource>(type: { new(): T }, resourceLink: string, _embedded: string, builder?: SubTypeBuilder): Observable<ResourceArray<T>> {\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        let observable = ResourceHelper.getHttp().get(resourceLink, { headers: ResourceHelper.headers });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result, builder)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** count resources given a path */\r\n    public count(resource: string): Observable<number> {\r\n        const uri = this.getResourceUrl(resource).concat('/search/countAll');\r\n\r\n        return ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, observe: 'body' }).pipe(\r\n            map((response: Response) => Number(response.body)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** create resource from self link and entity data*/\r\n    public create<T extends Resource>(selfResource: string, entity: T) {\r\n        const uri = ResourceHelper.getURL() + selfResource;\r\n        const payload = ResourceHelper.resolveRelations(entity);\r\n\r\n        this.setUrlsResource(entity);\r\n        let observable = ResourceHelper.getHttp().post(uri, payload, { headers: ResourceHelper.headers, observe: 'response' });\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return ResourceHelper.instantiateResource(entity, response.body);\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }), catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** update resource from a given entity data*/\r\n    public update<T extends Resource>(entity: T) {\r\n        const uri = ResourceHelper.getProxy(entity._links.self.href);\r\n        const payload = ResourceHelper.resolveRelations(entity);\r\n        this.setUrlsResource(entity);\r\n        let observable = ResourceHelper.getHttp().put(uri, payload, { headers: ResourceHelper.headers, observe: 'response' });\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return ResourceHelper.instantiateResource(entity, response.body);\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }), catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** update resource from a given entity data*/\r\n    public updateCollection<T extends Resource>(resourceArray: ResourceArray<T>, resourceLink: string) {\r\n        const uri = ResourceHelper.getProxy(resourceLink);\r\n        //const payload = ResourceHelper.resolveRelations(entity);\r\n        //this.setUrlsResource(entity);\r\n        var headersReq = ResourceHelper.headers;\r\n        headersReq.set(\"Content-Type\", \"text/uri-list\");\r\n        let observable = ResourceHelper.getHttp().put(uri, resourceArray, { headers: headersReq, observe: 'response' });\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return \"\";\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }), catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** patch resource from a given entity data*/\r\n    public patch<T extends Resource>(entity: T) {\r\n        const uri = ResourceHelper.getProxy(entity._links.self.href);\r\n        const payload = ResourceHelper.resolveRelations(entity);\r\n        this.setUrlsResource(entity);\r\n        let observable = ResourceHelper.getHttp().patch(uri, payload, { headers: ResourceHelper.headers, observe: 'response' });\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return ResourceHelper.instantiateResource(entity, response.body);\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }), catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** delete resource from a given entity data*/\r\n    public delete<T extends Resource>(entity: T): Observable<Object> {\r\n        const uri = ResourceHelper.getProxy(entity._links.self.href);\r\n        return ResourceHelper.getHttp().delete(uri, { headers: ResourceHelper.headers }).pipe(catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** whether a resource array has next page of results*/\r\n    public hasNext<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.next_uri != undefined;\r\n    }\r\n\r\n    /** whether a resource array has previous page of results*/\r\n    public hasPrev<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.prev_uri != undefined;\r\n    }\r\n\r\n    /** whether a resource array has first page of results*/\r\n    public hasFirst<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.first_uri != undefined;\r\n    }\r\n\r\n    /** whether a resource array has last page of results*/\r\n    public hasLast<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.last_uri != undefined;\r\n    }\r\n\r\n    /** get resource array next page of results*/\r\n    public next<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.next(type);\r\n    }\r\n\r\n    /** get resource array previous page of results*/\r\n    public prev<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.prev(type);\r\n    }\r\n\r\n    /** get resource array first page of results*/\r\n    public first<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.first(type);\r\n    }\r\n\r\n    /** get resource array last page of results*/\r\n    public last<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.last(type);\r\n    }\r\n\r\n    /** get resource array page of results given a page number*/\r\n    public page<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }, id: number): Observable<ResourceArray<T>> {\r\n        return resourceArray.page(type, id);\r\n    }\r\n\r\n    /** sort resource array with a given sorting params */\r\n    public sortElements<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }, ...sort: Sort[]): Observable<ResourceArray<T>> {\r\n        return resourceArray.sortElements(type, ...sort);\r\n    }\r\n\r\n    /** get resource array size*/\r\n    public size<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }, size: number): Observable<ResourceArray<T>> {\r\n        return resourceArray.size(type, size);\r\n    }\r\n\r\n    /** get resource URL from a given path*/\r\n    public getResourceUrl(resource?: string): string {\r\n        let url = ResourceService.getURL();\r\n        if (!url.endsWith('/')) {\r\n            url = url.concat('/');\r\n        }\r\n        if (resource) {\r\n            return url.concat(resource);\r\n        }\r\n        return url;\r\n    }\r\n\r\n    /** set proxy and root urls of given resource array */\r\n    private setUrls<T extends Resource>(result: ResourceArray<T>) {\r\n        result.proxyUrl = this.externalService.getProxyUri();\r\n        result.rootUrl = this.externalService.getRootUri();\r\n    }\r\n\r\n    /** set proxy and root urls of given resource */\r\n    private setUrlsResource<T extends Resource>(result: T) {\r\n        result.proxyUrl = this.externalService.getProxyUri();\r\n        result.rootUrl = this.externalService.getRootUri();\r\n    }\r\n}","import {of as observableOf, throwError as observableThrowError} from 'rxjs';\r\nimport {map, mergeMap} from 'rxjs/operators';\r\nimport {Resource} from './resource';\r\nimport {ResourceArray} from './resource-array';\r\nimport {Sort} from './sort';\r\nimport {ResourceService} from './resource.service';\r\nimport {SubTypeBuilder} from './subtype-builder';\r\nimport {isNullOrUndefined} from 'util';\r\nimport {Observable} from 'rxjs';\r\nimport {Injector} from \"@angular/core\";\r\n\r\n/** HAL param data model */\r\nexport type HalParam = { key: string, value: string | number | boolean };\r\n/** HAL option data model */\r\nexport type HalOptions = { notPaged?: boolean, size?: number, sort?: Sort[], params?: HalParam[] };\r\n\r\n/** REST API access interface */\r\nexport class RestService<T extends Resource> {\r\n    /** resource type */\r\n    private type: any;\r\n    /** resource path */\r\n    private resource: string;\r\n    /** resource array */\r\n    public resourceArray: ResourceArray<T>;\r\n    /** resource service */\r\n    public resourceService: ResourceService;\r\n    /** _embedded field name */\r\n    private _embedded: string = '_embedded';\r\n\r\n    /** constructor */\r\n    constructor(type: { new(): T },\r\n                resource: string,\r\n                private injector: Injector,\r\n                _embedded?: string) {\r\n        this.type = type;\r\n        this.resource = resource;\r\n        this.resourceService = injector.get(ResourceService);\r\n        if (!isNullOrUndefined(_embedded))\r\n            this._embedded = _embedded;\r\n    }\r\n\r\n    /** error handler */\r\n    protected handleError(error: any):Observable<never> {\r\n        return RestService.handleError(error);\r\n    }\r\n\r\n    /** error handler */\r\n    protected static handleError(error: any):Observable<never> {\r\n        return observableThrowError(error);\r\n    }\r\n\r\n    /** get all resources with optional options an subType params */\r\n    public getAll(options?: HalOptions, subType?: SubTypeBuilder, embeddedName?:String, ignoreProjection?:boolean): Observable<T[]> {\r\n        return this.resourceService.getAll(this.type, this.resource, this._embedded, options, subType,embeddedName, ignoreProjection).pipe(\r\n            mergeMap((resourceArray: ResourceArray<T>) => {\r\n                if (options && options.notPaged && !isNullOrUndefined(resourceArray.first_uri)) {\r\n                    options.notPaged = false;\r\n                    options.size = resourceArray.totalElements;\r\n                    return this.getAll(options);\r\n                } else {\r\n                    this.resourceArray = resourceArray;\r\n                    return observableOf(resourceArray.result);\r\n                }\r\n            }));\r\n    }\r\n\r\n    /** get resource from a given id */\r\n    public get(id: any): Observable<T> {\r\n        return this.resourceService.get(this.type, this.resource, id);\r\n    }\r\n\r\n    /** get resource from self link */\r\n    public getBySelfLink(selfLink: string): Observable<T> {\r\n        return this.resourceService.getBySelfLink(this.type, selfLink);\r\n    }\r\n\r\n    /** search resources from a given query string and optional options params */\r\n    public search(query: string, options?: HalOptions): Observable<T[]> {\r\n        return this.resourceService.search(this.type, query, this.resource, this._embedded, options).pipe(\r\n            mergeMap((resourceArray: ResourceArray<T>) => {\r\n                if (options && options.notPaged && !isNullOrUndefined(resourceArray.first_uri)) {\r\n                    options.notPaged = false;\r\n                    options.size = resourceArray.totalElements;\r\n                    return this.search(query, options);\r\n                } else {\r\n                    this.resourceArray = resourceArray;\r\n                    return observableOf(resourceArray.result);\r\n                }\r\n            }));\r\n    }\r\n\r\n    /** search resource from a given query string and optional options params */\r\n    public searchSingle(query: string, options?: HalOptions): Observable<T> {\r\n        return this.resourceService.searchSingle(this.type, query, this.resource, options);\r\n    }\r\n\r\n    /** search resources from a given custom query string and optional options params */\r\n    public customQuery(query: string, options?: HalOptions): Observable<T[]> {\r\n        return this.resourceService.customQuery(this.type, query, this.resource, this._embedded, options).pipe(\r\n            mergeMap((resourceArray: ResourceArray<T>) => {\r\n                if (options && options.notPaged && !isNullOrUndefined(resourceArray.first_uri)) {\r\n                    options.notPaged = false;\r\n                    options.size = resourceArray.totalElements;\r\n                    return this.customQuery(query, options);\r\n                } else {\r\n                    this.resourceArray = resourceArray;\r\n                    return observableOf(resourceArray.result);\r\n                }\r\n            }));\r\n    }\r\n\r\n\r\n    /** get resource array given a relation link */\r\n    public getByRelationArray(relation: string, builder?: SubTypeBuilder): Observable<T[]> {\r\n        return this.resourceService.getByRelationArray(this.type, relation, this._embedded, builder).pipe(\r\n            map((resourceArray: ResourceArray<T>) => {\r\n                this.resourceArray = resourceArray;\r\n                return resourceArray.result;\r\n            }));\r\n    }\r\n\r\n    /** get resource given a relation link */\r\n    public getByRelation(relation: string): Observable<T> {\r\n        return this.resourceService.getByRelation(this.type, relation);\r\n    }\r\n\r\n    /** count resources given a path */\r\n    public count(): Observable<number> {\r\n        return this.resourceService.count(this.resource);\r\n    }\r\n\r\n    /** create resource from self link and entity data*/\r\n    public create(entity: T) {\r\n        return this.resourceService.create(this.resource, entity);\r\n    }\r\n\r\n    /** update resource from a given entity data*/\r\n    public update(entity: T) {\r\n        return this.resourceService.update(entity);\r\n    }\r\n\r\n    /** patch resource from a given entity data*/\r\n    public patch(entity: T) {\r\n        return this.resourceService.patch(entity);\r\n    }\r\n\r\n    /** delete resource from a given entity data*/\r\n    public delete(entity: T): Observable<Object> {\r\n        return this.resourceService.delete(entity);\r\n    }\r\n\r\n    /** get total number of elements of resource array */\r\n    public totalElement(): number {\r\n        if (this.resourceArray && this.resourceArray.totalElements)\r\n            return this.resourceArray.totalElements;\r\n        return 0;\r\n    }\r\n\r\n    /** whether a resource array has first page of results*/\r\n    public hasFirst(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasFirst(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** whether a resource array has next page of results*/\r\n    public hasNext(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasNext(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** whether a resource array has previous page of results*/\r\n    public hasPrev(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasPrev(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** whether a resource array has last page of results*/\r\n    public hasLast(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasLast(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** get resource array next page of results*/\r\n    public next(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.next(this.resourceArray, this.type).pipe(\r\n                map((resourceArray: ResourceArray<T>) => {\r\n                    this.resourceArray = resourceArray;\r\n                    return resourceArray.result;\r\n                }));\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array previous page of results*/\r\n    public prev(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.prev(this.resourceArray, this.type).pipe(\r\n                map((resourceArray: ResourceArray<T>) => {\r\n                    this.resourceArray = resourceArray;\r\n                    return resourceArray.result;\r\n                }));\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array first page of results*/\r\n    public first(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.first(this.resourceArray, this.type)\r\n                .pipe(\r\n                    map((resourceArray: ResourceArray<T>) => {\r\n                        this.resourceArray = resourceArray;\r\n                        return resourceArray.result;\r\n                    })\r\n                );\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array last page of results*/\r\n    public last(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.last(this.resourceArray, this.type)\r\n                .pipe(\r\n                    map((resourceArray: ResourceArray<T>) => {\r\n                        this.resourceArray = resourceArray;\r\n                        return resourceArray.result;\r\n                    })\r\n                );\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array page of results given a page number*/\r\n    public page(pageNumber: number): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.page(this.resourceArray, this.type, pageNumber).pipe(\r\n                map((resourceArray: ResourceArray<T>) => {\r\n                    this.resourceArray = resourceArray;\r\n                    return resourceArray.result;\r\n                }));\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n}\r\n","\r\nimport {throwError as observableThrowError, of as observableOf} from 'rxjs';\r\n\r\nimport {map} from 'rxjs/operators';\r\n\r\n\r\nimport {HttpParams} from '@angular/common/http';\r\nimport {ResourceHelper} from './resource-helper';\r\nimport {ResourceArray} from './resource-array';\r\nimport {isNullOrUndefined} from 'util';\r\n\r\nimport {HalOptions} from './rest.service';\r\nimport {SubTypeBuilder} from './subtype-builder';\r\nimport {Injectable} from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\n\r\n/** Abstract resource class*/\r\n@Injectable()\r\nexport abstract class Resource {\r\n\r\n    /** proxy URL */\r\n    public proxyUrl: string;\r\n    /** root URL */\r\n    public rootUrl: string;\r\n\r\n    /** links */\r\n    public _links: any;\r\n    /** subtypes */\r\n    public _subtypes: Map<string, any>;\r\n\r\n    \r\n    /** get subtypes */    \r\n    public get subtypes(): Map<string, any> {\r\n        return this._subtypes;\r\n    }\r\n\r\n    /** set subtypes */\r\n    public set subtypes(_subtypes: Map<string, any>) {\r\n        this._subtypes = _subtypes;\r\n    }\r\n\r\n    /** constructor*/\r\n    constructor() {\r\n    }\r\n\r\n    /** Get collection of related resources */\r\n    public getRelationArray<T extends Resource>(type: { new(): T }, relation: string, _embedded?: string, options?: HalOptions, builder?: SubTypeBuilder): Observable<T[]> {\r\n\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(isNullOrUndefined(_embedded) ? \"_embedded\" : _embedded);\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let observable = ResourceHelper.getHttp().get(ResourceHelper.getProxy(this._links[relation].href), {\r\n                headers: ResourceHelper.headers,\r\n                params: params\r\n            });\r\n            return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection<T>(type, response, result, builder)),\r\n                map((array: ResourceArray<T>) => array.result),);\r\n        } else {\r\n            return observableOf([]);\r\n        }\r\n    }\r\n\r\n    /** Get related resource */\r\n    public getRelation<T extends Resource>(type: { new(): T }, relation: string, builder?: SubTypeBuilder): Observable<T> {\r\n        let result: T = new type();\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let observable = ResourceHelper.getHttp().get(ResourceHelper.getProxy(this._links[relation].href), {headers: ResourceHelper.headers});\r\n            return observable.pipe(map((data: any) => {\r\n                if (builder) {\r\n                    for (const embeddedClassName of Object.keys(data['_links'])) {\r\n                        if (embeddedClassName == 'self') {\r\n                            let href: string = data._links[embeddedClassName].href;\r\n                            let idx: number = href.lastIndexOf('/');\r\n                            let realClassName = href.replace(ResourceHelper.getRootUri(), \"\").substring(0, idx);\r\n                            result = ResourceHelper.searchSubtypes(builder, realClassName, result);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                return ResourceHelper.instantiateResource(result, data);\r\n            }));\r\n        } else {\r\n            return observableOf(null);\r\n        }\r\n    }\r\n\r\n    /** Adds the given resource to the bound collection by the relation */\r\n    public addRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().post(ResourceHelper.getProxy(this._links[relation].href), resource._links.self.href, {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n\r\n    /** Bind the given resource to this resource by the given relation*/\r\n    public updateRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().patch(ResourceHelper.getProxy(this._links[relation].href), resource._links.self.href, {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n\r\n    /** Bind the given resource to this resource by the given relation*/\r\n    public substituteRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().put(ResourceHelper.getProxy(this._links[relation].href), resource._links.self.href, {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n    \r\n    \r\n    /** Bind the given resource to this resource by the given relation*/\r\n    public substituteAllRelation<T extends Resource>(relation: string, resources: Resource[]): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().put(ResourceHelper.getProxy(this._links[relation].href), resources.map((resource) => resource._links.self.href), {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /** Unbind the resource with the given relation from this resource*/\r\n    public deleteRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(resource._links)) {\r\n            let link: string = resource._links['self'].href;\r\n            let idx: number = link.lastIndexOf('/') + 1;\r\n\r\n            if (idx == -1)\r\n                return observableThrowError('no relation found');\r\n\r\n            let relationId: string = link.substring(idx);\r\n            return ResourceHelper.getHttp().delete(ResourceHelper.getProxy(this._links[relation].href + '/' + relationId), {headers: ResourceHelper.headers});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n    \r\n    /** Unbind the resource with the given relation from this resource*/\r\n    public deleteAllRelation<T extends Resource>(relation: string): Observable<any> {\r\n        return ResourceHelper.getHttp().delete(ResourceHelper.getProxy(this._links[relation].href ), {headers: ResourceHelper.headers});\r\n        \r\n    }\r\n\r\n}","import {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {HttpClient, HttpClientModule} from '@angular/common/http';\r\nimport {HalParam, RestService} from './rest.service';\r\nimport {ExternalService} from './external.service';\r\nimport {ResourceService} from './resource.service';\r\nimport {ExternalConfigurationHandlerInterface} from './external-configuration.handler';\r\n\r\nimport 'rxjs';\r\n\r\nimport {SubTypeBuilder} from './subtype-builder';\r\n\r\nexport {ExternalService} from './external.service';\r\nexport {RestService} from './rest.service';\r\nexport {Resource} from './resource';\r\nexport {ResourceArray} from './resource-array';\r\nexport {ResourceService} from './resource.service';\r\nexport {Sort} from './sort';\r\nexport {ResourceHelper} from './resource-helper';\r\nexport {ExternalConfiguration} from './ExternalConfiguration';\r\nexport {ExternalConfigurationHandlerInterface} from './external-configuration.handler';\r\nexport {HalOptions, HalParam} from './rest.service';\r\nexport {SubTypeBuilder} from './subtype-builder';\r\n\r\n\r\n/** Angular HAL module */\r\n@NgModule({\r\n    imports: [HttpClientModule],\r\n    declarations: [],\r\n    exports: [HttpClientModule],\r\n    providers: [\r\n        ExternalService,\r\n        HttpClient,\r\n        {\r\n            provide: ResourceService,\r\n            useClass: ResourceService,\r\n            deps: [ExternalService]\r\n        }]\r\n})\r\nexport class AngularHalModule {\r\n    static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: AngularHalModule,\r\n            providers: [\r\n                ExternalService,\r\n                HttpClient,\r\n                {\r\n                    provide: ResourceService,\r\n                    useClass: ResourceService,\r\n                    deps: [ExternalService]\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}"],"names":["ResourceArray","prototype","addSortInfo","uri","this","sortInfo","_b","tslib_1.__values","_c","next","done","item","value","concat","path","order","replaceOrAdd","query","field","idxNextAmp","seachValue","idx","indexOf","substring","replace","push","el","_this","result","length","type","response","ResourceHelper","createEmptyResult","_embedded","instantiateResourceCollection","next_uri","getHttp","get","getProxy","headers","pipe","map","init","catchError","error","observableThrowError","prev","prev_uri","first","first_uri","last","last_uri","page","pageNumber","self_uri","urlParsed","url.parse","pageSize","toString","sortElements","sort","_i","arguments","size","optionParams","params","options","_d","param","append","key","_e","_f","s","sortString","resolveRelations","resource","array","isNullOrUndefined","className","find","Array","isArray","forEach","element","isPrimitive","resourceArray","getClassName","obj","results","exec","constructor","objProto","classNames","Object","getPrototypeOf","payload","builder","embeddedName","keys","embeddedClassName","items","items_1","items_1_1","instance","searchSubtypes","instantiateResource","totalElements","totalPages","number","_links","self","href","undefined","subtypes","from","subtypeKey","toLowerCase","startsWith","subtype","entity","p","setProxyUri","proxy_uri","setRootUri","root_uri","getURL","addSlash","uriParsed","search","url","setHttp","http","getRootUri","HttpHeaders","ExternalService","updateExternalConfigurationHandlerInterface","externalConfigurationService","getProxyUri","getExternalConfiguration","Injectable","Inject","args","ResourceService","getAll","subType","ignoreProjection","getResourceUrl","HttpParams","setUrls","id","setUrlsResource","data","getBySelfLink","resourceLink","searchSingle","customQuery","getByRelation","getByRelationArray","count","observe","Number","body","create","selfResource","post","status","update","put","updateCollection","headersReq","set","patch","delete","hasNext","hasPrev","hasFirst","hasLast","apply","endsWith","proxyUrl","externalService","rootUrl","RestService","handleError","resourceService","mergeMap","notPaged","observableOf","selfLink","relation","totalElement","injector","Resource","_subtypes","getRelationArray","getRelation","lastIndexOf","realClassName","addRelation","header","updateRelation","substituteRelation","substituteAllRelation","resources","deleteRelation","relationId","link","deleteAllRelation","AngularHalModule","forRoot","ngModule","providers","HttpClient","provide","useClass","deps","NgModule","imports","HttpClientModule","declarations","exports"],"mappings":"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"}