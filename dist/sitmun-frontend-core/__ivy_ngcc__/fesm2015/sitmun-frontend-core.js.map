{"version":3,"file":"sitmun-frontend-core.js","sources":["@sitmun/frontend-core/angular-hal/src/lib/resource-array.ts","@sitmun/frontend-core/angular-hal/src/lib/resource-helper.ts","@sitmun/frontend-core/angular-hal/src/lib/resource.ts","@sitmun/frontend-core/user/user.model.ts","@sitmun/frontend-core/angular-hal/src/lib/external.service.ts","@sitmun/frontend-core/angular-hal/src/lib/resource.service.ts","@sitmun/frontend-core/angular-hal/src/lib/rest.service.ts","@sitmun/frontend-core/account/account.service.ts","@sitmun/frontend-core/auth/auth.service.ts","@sitmun/frontend-core/auth/auth.interceptor.ts","@sitmun/frontend-core/auth/principal.service.ts","@sitmun/frontend-core/auth/auth-expired.interceptor.ts","@sitmun/frontend-core/auth/login.service.ts","@sitmun/frontend-core/dashboard/dashboard.service.ts","@sitmun/frontend-core/user/user.service.ts","@sitmun/frontend-core/user/user-position.model.ts","@sitmun/frontend-core/user/user-position.service.ts","@sitmun/frontend-core/user/user-configuration.model.ts","@sitmun/frontend-core/user/user-configuration.service.ts","@sitmun/frontend-core/territory/territory.model.ts","@sitmun/frontend-core/territory/territory.service.ts","@sitmun/frontend-core/territory/territory-type.model.ts","@sitmun/frontend-core/territory/territory-type.service.ts","@sitmun/frontend-core/territory/territory-group-type.model.ts","@sitmun/frontend-core/territory/territory-group-type.service.ts","@sitmun/frontend-core/role/role.model.ts","@sitmun/frontend-core/role/role.service.ts","@sitmun/frontend-core/connection/connection.model.ts","@sitmun/frontend-core/connection/connection.service.ts","@sitmun/frontend-core/task/task.model.ts","@sitmun/frontend-core/task/task.service.ts","@sitmun/frontend-core/task/task-type.model.ts","@sitmun/frontend-core/task/task-type.service.ts","@sitmun/frontend-core/task/task-group.model.ts","@sitmun/frontend-core/task/task-group.service.ts","@sitmun/frontend-core/task/task-parameter.model.ts","@sitmun/frontend-core/task/task-parameter.service.ts","@sitmun/frontend-core/task/task-availability.model.ts","@sitmun/frontend-core/task/task-availability.service.ts","@sitmun/frontend-core/task/task-ui.model.ts","@sitmun/frontend-core/task/task-ui.service.ts","@sitmun/frontend-core/translation/translation.model.ts","@sitmun/frontend-core/translation/translation.service.ts","@sitmun/frontend-core/translation/language.model.ts","@sitmun/frontend-core/translation/language.service.ts","@sitmun/frontend-core/service/service.model.ts","@sitmun/frontend-core/service/service.service.ts","@sitmun/frontend-core/configuration/configuration-parameters.model.ts","@sitmun/frontend-core/configuration/configuration-parameters.service.ts","@sitmun/frontend-core/service/service-parameter.model.ts","@sitmun/frontend-core/service/service-parameter.service.ts","@sitmun/frontend-core/capabilities/capabilitie.model.ts","@sitmun/frontend-core/capabilities/capabilities.service.ts","@sitmun/frontend-core/getInfo/info.model.ts","@sitmun/frontend-core/getInfo/getInfo.service.ts","@sitmun/frontend-core/cartography/cartography.model.ts","@sitmun/frontend-core/cartography/cartography.service.ts","@sitmun/frontend-core/cartography/cartography-group.model.ts","@sitmun/frontend-core/cartography/cartography-group.service.ts","@sitmun/frontend-core/cartography/cartography-availability.model.ts","@sitmun/frontend-core/cartography/cartography-availability.service.ts","@sitmun/frontend-core/cartography/cartography-filter.model.ts","@sitmun/frontend-core/cartography/cartography-filter.service.ts","@sitmun/frontend-core/cartography/cartography-parameter.model.ts","@sitmun/frontend-core/cartography/cartography-parameter.service.ts","@sitmun/frontend-core/cartography/cartography-spatial-selection-parameter.service.ts","@sitmun/frontend-core/cartography/cartography-style.model.ts","@sitmun/frontend-core/cartography/cartography-style.service.ts","@sitmun/frontend-core/cartography/background.model.ts","@sitmun/frontend-core/cartography/background.service.ts","@sitmun/frontend-core/tree/tree.model.ts","@sitmun/frontend-core/tree/tree.service.ts","@sitmun/frontend-core/tree/tree-node.model.ts","@sitmun/frontend-core/tree/tree-node.service.ts","@sitmun/frontend-core/application/application.model.ts","@sitmun/frontend-core/application/application.service.ts","@sitmun/frontend-core/application/application-background.model.ts","@sitmun/frontend-core/application/application-background.service.ts","@sitmun/frontend-core/application/application-parameter.model.ts","@sitmun/frontend-core/application/application-parameter.service.ts","@sitmun/frontend-core/codelist/codelist.model.ts","@sitmun/frontend-core/codelist/codelist.service.ts","@sitmun/frontend-core/map/map-configuration-manager.service.ts","@sitmun/frontend-core/auth/has-any-authority.directive.ts","@sitmun/frontend-core/auth/has-any-authority-on-territory.directive.ts","@sitmun/frontend-core/sitmun-frontend-core.module.ts","@sitmun/frontend-core/angular-hal/src/lib/angular-hal.module.ts"],"names":["observableThrowError","url.parse","observableOf"],"mappings":"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","sourcesContent":["\r\nimport {throwError as observableThrowError} from 'rxjs';\r\n\r\nimport {catchError, map} from 'rxjs/operators';\r\nimport {Sort} from './sort';\r\nimport {ArrayInterface} from './array-interface';\r\nimport {ResourceHelper} from './resource-helper';\r\nimport {Resource} from './resource';\r\nimport * as url from 'url';\r\nimport {Observable} from 'rxjs';\r\n\r\n/** REST array of resource implementation */\r\nexport class ResourceArray<T extends Resource> implements ArrayInterface<T> {\r\n    /** sorting info */\r\n    public sortInfo: Sort[];\r\n    /** proxy url */\r\n    public proxyUrl: string;\r\n    /** root url */\r\n    public rootUrl: string;\r\n\r\n    /** self url */\r\n    public self_uri: string;\r\n    /** next resource url */\r\n    public next_uri: string;\r\n    /** previous resource url */\r\n    public prev_uri: string;\r\n    /** first resource url */\r\n    public first_uri: string;\r\n    /** last resource url */\r\n    public last_uri: string;\r\n\r\n    /** embedded array list */\r\n    public _embedded;\r\n\r\n    /** total number of elements in this array */\r\n    public totalElements = 0;\r\n    /** total number of pages in the response */\r\n    public totalPages = 1;\r\n    \r\n    /** page number in the response */\r\n    public pageNumber = 1;\r\n    \r\n    /** page size */\r\n    public pageSize: number;\r\n\r\n    /** array components */\r\n    public result: T[] = [];\r\n\r\n    /** push a new resource to the array */\r\n    push = (el: T) => {\r\n        this.result.push(el);\r\n    };\r\n\r\n    /** length of the array */\r\n    length = (): number => {\r\n        return this.result.length;\r\n    };\r\n\r\n    /** load array data from REST request */\r\n    private init = (type: { new(): T }, response: any, sortInfo: Sort[]): ResourceArray<T> => {\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(this._embedded);\r\n        result.sortInfo = sortInfo;\r\n        ResourceHelper.instantiateResourceCollection(type, response, result);\r\n        return result;\r\n    };\r\n\r\n    /** Load next page */\r\n    next = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.next_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.next_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no next defined');\r\n    };\r\n\r\n    /** Load previous page */\r\n    prev = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.prev_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.prev_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no prev defined');\r\n    };\r\n\r\n    /** Load first page */\r\n    first = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.first_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.first_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no first defined');\r\n    };\r\n\r\n    /** Load last page */\r\n    last = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.last_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.last_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no last defined');\r\n    };\r\n\r\n    /** Load page with given pageNumber*/\r\n    page = (type: { new(): T }, pageNumber: number): Observable<ResourceArray<T>> => {\r\n        this.self_uri = this.self_uri.replace('{?page,size,sort}', '');\r\n        this.self_uri = this.self_uri.replace('{&sort}', '');\r\n        let urlParsed = url.parse(ResourceHelper.getProxy(this.self_uri));\r\n        let query: string = ResourceArray.replaceOrAdd(urlParsed.query, 'size', this.pageSize.toString());\r\n        query = ResourceArray.replaceOrAdd(query, 'page', pageNumber.toString());\r\n\r\n\r\n        let uri = urlParsed.query ?\r\n            ResourceHelper.getProxy(this.self_uri).replace(urlParsed.query, query) : ResourceHelper.getProxy(this.self_uri).concat(query);\r\n        uri = this.addSortInfo(uri);\r\n        return ResourceHelper.getHttp().get(uri, {headers: ResourceHelper.headers}).pipe(\r\n            map(response => this.init(type, response, this.sortInfo)),\r\n            catchError(error => observableThrowError(error)),);\r\n    };\r\n\r\n    /** Sort collection based on given sort attribute */\r\n    sortElements = (type: { new(): T }, ...sort: Sort[]): Observable<ResourceArray<T>> => {\r\n        this.self_uri = this.self_uri.replace('{?page,size,sort}', '');\r\n        this.self_uri = this.self_uri.replace('{&sort}', '');\r\n        let uri = ResourceHelper.getProxy(this.self_uri).concat('?', 'size=', this.pageSize.toString(), '&page=', this.pageNumber.toString());\r\n        uri = this.addSortInfo(uri);\r\n        return ResourceHelper.getHttp().get(uri, {headers: ResourceHelper.headers}).pipe(\r\n            map(response => this.init(type, response, sort)),\r\n            catchError(error => observableThrowError(error)),);\r\n    };\r\n\r\n    /** Load page with given size */\r\n    size = (type: { new(): T }, size: number): Observable<ResourceArray<T>> => {\r\n        let uri = ResourceHelper.getProxy(this.self_uri).concat('?', 'size=', size.toString());\r\n        uri = this.addSortInfo(uri);\r\n        return ResourceHelper.getHttp().get(uri, {headers: ResourceHelper.headers}).pipe(\r\n            map(response => this.init(type, response, this.sortInfo)),\r\n            catchError(error => observableThrowError(error)),);\r\n    };\r\n\r\n    /** Add sort info to given URI */\r\n    private addSortInfo(uri: string) {\r\n        if (this.sortInfo) {\r\n            for (const item of this.sortInfo) {\r\n                uri = uri.concat('&sort=', item.path, ',', item.order);\r\n            }\r\n        }\r\n        return uri;\r\n    }\r\n\r\n    /** Add replace or add param value to query string */\r\n    private static replaceOrAdd(query: string, field: string, value: string): string {\r\n        if (query) {\r\n            let idx: number = query.indexOf(field);\r\n            let idxNextAmp: number = query.indexOf('&', idx) == -1 ? query.indexOf('/', idx) : query.indexOf('&', idx);\r\n\r\n            if (idx != -1) {\r\n                let seachValue = query.substring(idx, idxNextAmp);\r\n                query = query.replace(seachValue, field + '=' + value);\r\n            } else {\r\n                query = query.concat(\"&\" + field + '=' + value);\r\n            }\r\n        } else {\r\n            query = \"?\" + field + '=' + value;\r\n        }\r\n        return query;\r\n    }\r\n}\r\n","import {HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';\r\nimport {Resource} from './resource';\r\nimport {ResourceArray} from './resource-array';\r\nimport {HalOptions} from './rest.service';\r\nimport {SubTypeBuilder} from './subtype-builder';\r\nimport {isNullOrUndefined, isPrimitive} from 'util';\r\nimport * as url from 'url';\r\n\r\n/** REST API access helper */\r\nexport class ResourceHelper {\r\n\r\n    /** HttpHeaders */\r\n    public static headers: HttpHeaders = new HttpHeaders();\r\n    /** Proxy URL */\r\n    private static proxy_uri: string = null;\r\n    /** Root URL */\r\n    private static root_uri: string = null;\r\n    /** HttpClient */\r\n    private static http: HttpClient = null;\r\n\r\n    /** get request headers */\r\n    /*public static get headers(): HttpHeaders {\r\n        if (isNullOrUndefined(this._headers))\r\n          ResourceHelper._headers = new HttpHeaders();\r\n        return ResourceHelper._headers;\r\n    }*/\r\n\r\n    /** set request headers */\r\n    /*public static set headers(headers: HttpHeaders) {\r\n      ResourceHelper._headers = headers;\r\n    }*/\r\n\r\n    /** get request option params */\r\n    static optionParams(params: HttpParams, options?: HalOptions): HttpParams {\r\n        if (options) {\r\n\r\n            if (options.params) {\r\n                for (const param of options.params) {\r\n                    params = params.append(param.key, param.value.toString());\r\n                }\r\n            }\r\n\r\n            if (options.size) {\r\n                params = params.append('size', options.size.toString());\r\n            }\r\n\r\n            if (options.sort) {\r\n                for (const s of options.sort) {\r\n                    let sortString = '';\r\n                    sortString = s.path ? sortString.concat(s.path) : sortString;\r\n                    sortString = s.order ? sortString.concat(',').concat(s.order) : sortString;\r\n                    params = params.append('sort', sortString);\r\n                }\r\n            }\r\n\r\n        }\r\n        return params;\r\n    }\r\n\r\n    /** resolve resource relations */\r\n    static resolveRelations(resource: Resource): Object {\r\n        const result: any = {};\r\n        for (const key in resource) {\r\n            if (!isNullOrUndefined(resource[key])) {\r\n                if (ResourceHelper.className(resource[key])\r\n                    .find((className: string) => className == 'Resource')) {\r\n                    if (resource[key]['_links'])\r\n                        result[key] = resource[key]['_links']['self']['href'];\r\n                } else if (Array.isArray(resource[key])) {\r\n                    let array: any[] = resource[key];\r\n                    if (array) {\r\n                        result[key] = new Array();\r\n                        array.forEach((element) => {\r\n                            if (isPrimitive(element)) {\r\n                                result[key].push(element);\r\n                            }\r\n                            else {\r\n                                result[key].push(this.resolveRelations(element));\r\n                            }\r\n                        });\r\n                    }\r\n                } else {\r\n                    result[key] = resource[key];\r\n                }\r\n            }\r\n        }\r\n        return result as Object;\r\n    }\r\n\r\n    /** create an empty resource from embedded data*/\r\n    static createEmptyResult<T extends Resource>(_embedded: string): ResourceArray<T> {\r\n        let resourceArray: ResourceArray<T> = new ResourceArray<T>();\r\n        resourceArray._embedded = _embedded;\r\n        return resourceArray;\r\n    }\r\n\r\n    /** get resource class name*/\r\n    static getClassName(obj: any): string {\r\n        var funcNameRegex = /function (.+?)\\(/;\r\n        var results = (funcNameRegex).exec(obj.constructor.toString());\r\n        return (results && results.length > 1) ? results[1] : '';\r\n    }\r\n\r\n    \r\n    /** get resource class name from a prototype object*/\r\n    static className(objProto: any): string[] {\r\n        let classNames = [];\r\n        let obj = Object.getPrototypeOf(objProto);\r\n        let className: string;\r\n\r\n        while ((className = ResourceHelper.getClassName(obj)) !== 'Object') {\r\n            classNames.push(className);\r\n            obj = Object.getPrototypeOf(obj);\r\n        }\r\n\r\n        return classNames;\r\n    }\r\n\r\n    /** instantiate a ResourceCollection from response embedded data*/\r\n    static instantiateResourceCollection<T extends Resource>(type: { new(): T }, payload: any,\r\n                                                             result: ResourceArray<T>, builder?: SubTypeBuilder,embeddedName?:String): ResourceArray<T> {\r\n        for (const embeddedClassName of Object.keys(payload[result._embedded])) {\r\n            if(!embeddedName || (embeddedName && embeddedClassName==embeddedName)){\r\n                let embedded: any = payload[result._embedded];\r\n                const items = embedded[embeddedClassName];\r\n                for (let item of items) {\r\n                    let instance: T = new type();\r\n                    instance = this.searchSubtypes(builder, embeddedClassName, instance);\r\n\r\n                    this.instantiateResource(instance, item);\r\n                    result.push(instance);\r\n                }\r\n            }\r\n        }\r\n\r\n        result.totalElements = payload.page ? payload.page.totalElements : result.length;\r\n        result.totalPages = payload.page ? payload.page.totalPages : 1;\r\n        result.pageNumber = payload.page ? payload.page.number : 1;\r\n        result.pageSize = payload.page ? payload.page.size : 20;\r\n\r\n        result.self_uri = payload._links && payload._links.self ? payload._links.self.href : undefined;\r\n        result.next_uri = payload._links && payload._links.next ? payload._links.next.href : undefined;\r\n        result.prev_uri = payload._links && payload._links.prev ? payload._links.prev.href : undefined;\r\n        result.first_uri = payload._links && payload._links.first ? payload._links.first.href : undefined;\r\n        result.last_uri = payload._links && payload._links.last ? payload._links.last.href : undefined;\r\n        return result;\r\n    }\r\n\r\n    /** search subtypes*/\r\n    static searchSubtypes<T extends Resource>(builder: SubTypeBuilder, embeddedClassName: string, instance: T) {\r\n        if (builder && builder.subtypes) {\r\n            let keys = builder.subtypes.keys();\r\n            Array.from(keys).forEach((subtypeKey: string) => {\r\n                if (embeddedClassName.toLowerCase().startsWith(subtypeKey.toLowerCase())) {\r\n                    let subtype: { new(): any } = builder.subtypes.get(subtypeKey);\r\n                    instance = new subtype();\r\n                }\r\n            });\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    /** instantiate a Resource from response */\r\n    static instantiateResource<T extends Resource>(entity: T, payload: Object): T {\r\n        for (const p in payload) {\r\n            //TODO array init\r\n            /* if(entity[p].constructor === Array && isNullOrUndefined(payload[p]))\r\n                 entity[p] = [];\r\n             else*/\r\n            entity[p] = payload[p];\r\n        }\r\n        return entity;\r\n    }\r\n\r\n    /** set proxy URL */\r\n    static setProxyUri(proxy_uri: string) {\r\n        ResourceHelper.proxy_uri = proxy_uri;\r\n    }\r\n\r\n    /** set Root URI */\r\n    static setRootUri(root_uri: string) {\r\n        ResourceHelper.root_uri = root_uri;\r\n    }\r\n\r\n    /** get proxy URL */\r\n    public static getURL(): string {\r\n        return ResourceHelper.proxy_uri && ResourceHelper.proxy_uri != '' ?\r\n            ResourceHelper.addSlash(ResourceHelper.proxy_uri) :\r\n            ResourceHelper.addSlash(ResourceHelper.root_uri);\r\n    }\r\n\r\n    /** add slash to URI */\r\n    private static addSlash(uri: string): string {\r\n        let uriParsed = url.parse(uri);\r\n        if (isNullOrUndefined(uriParsed.search) && uri && uri[uri.length - 1] != '/')\r\n            return uri + '/';\r\n        return uri;\r\n    }\r\n\r\n    /** get proxy from URL */\r\n    public static getProxy(url: string): string {\r\n        if (!ResourceHelper.proxy_uri || ResourceHelper.proxy_uri == '')\r\n            return url;\r\n        return ResourceHelper.addSlash(url.replace(ResourceHelper.root_uri, ResourceHelper.proxy_uri));\r\n    }\r\n\r\n    /** set HttpClient*/\r\n    public static setHttp(http: HttpClient) {\r\n        ResourceHelper.http = http;\r\n    }\r\n\r\n    /** get HttpClient*/\r\n    public static getHttp(): HttpClient {\r\n        return ResourceHelper.http;\r\n    }\r\n\r\n    /** get root URI*/\r\n    static getRootUri() {\r\n        return ResourceHelper.root_uri;\r\n    }\r\n}\r\n","\r\nimport {throwError as observableThrowError, of as observableOf} from 'rxjs';\r\n\r\nimport {map} from 'rxjs/operators';\r\n\r\n\r\nimport {HttpParams} from '@angular/common/http';\r\nimport {ResourceHelper} from './resource-helper';\r\nimport {ResourceArray} from './resource-array';\r\nimport {isNullOrUndefined} from 'util';\r\n\r\nimport {HalOptions} from './rest.service';\r\nimport {SubTypeBuilder} from './subtype-builder';\r\nimport {Injectable} from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\n\r\n/** Abstract resource class*/\r\n@Injectable()\r\nexport abstract class Resource {\r\n\r\n    /** proxy URL */\r\n    public proxyUrl: string;\r\n    /** root URL */\r\n    public rootUrl: string;\r\n\r\n    /** links */\r\n    public _links: any;\r\n    /** subtypes */\r\n    public _subtypes: Map<string, any>;\r\n\r\n    \r\n    /** get subtypes */    \r\n    public get subtypes(): Map<string, any> {\r\n        return this._subtypes;\r\n    }\r\n\r\n    /** set subtypes */\r\n    public set subtypes(_subtypes: Map<string, any>) {\r\n        this._subtypes = _subtypes;\r\n    }\r\n\r\n    /** constructor*/\r\n    constructor() {\r\n    }\r\n\r\n    /** Get collection of related resources */\r\n    public getRelationArray<T extends Resource>(type: { new(): T }, relation: string, _embedded?: string, options?: HalOptions, builder?: SubTypeBuilder): Observable<T[]> {\r\n\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(isNullOrUndefined(_embedded) ? \"_embedded\" : _embedded);\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let observable = ResourceHelper.getHttp().get(ResourceHelper.getProxy(this._links[relation].href), {\r\n                headers: ResourceHelper.headers,\r\n                params: params\r\n            });\r\n            return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection<T>(type, response, result, builder)),\r\n                map((array: ResourceArray<T>) => array.result),);\r\n        } else {\r\n            return observableOf([]);\r\n        }\r\n    }\r\n\r\n    /** Get related resource */\r\n    public getRelation<T extends Resource>(type: { new(): T }, relation: string, builder?: SubTypeBuilder): Observable<T> {\r\n        let result: T = new type();\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let observable = ResourceHelper.getHttp().get(ResourceHelper.getProxy(this._links[relation].href), {headers: ResourceHelper.headers});\r\n            return observable.pipe(map((data: any) => {\r\n                if (builder) {\r\n                    for (const embeddedClassName of Object.keys(data['_links'])) {\r\n                        if (embeddedClassName == 'self') {\r\n                            let href: string = data._links[embeddedClassName].href;\r\n                            let idx: number = href.lastIndexOf('/');\r\n                            let realClassName = href.replace(ResourceHelper.getRootUri(), \"\").substring(0, idx);\r\n                            result = ResourceHelper.searchSubtypes(builder, realClassName, result);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                return ResourceHelper.instantiateResource(result, data);\r\n            }));\r\n        } else {\r\n            return observableOf(null);\r\n        }\r\n    }\r\n\r\n    /** Adds the given resource to the bound collection by the relation */\r\n    public addRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().post(ResourceHelper.getProxy(this._links[relation].href), resource._links.self.href, {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n\r\n    /** Bind the given resource to this resource by the given relation*/\r\n    public updateRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().patch(ResourceHelper.getProxy(this._links[relation].href), resource._links.self.href, {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n\r\n    /** Bind the given resource to this resource by the given relation*/\r\n    public substituteRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().put(ResourceHelper.getProxy(this._links[relation].href), resource._links.self.href, {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n    \r\n    \r\n    /** Bind the given resource to this resource by the given relation*/\r\n    public substituteAllRelation<T extends Resource>(relation: string, resources: Resource[]): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().put(ResourceHelper.getProxy(this._links[relation].href), resources.map((resource) => resource._links.self.href), {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /** Unbind the resource with the given relation from this resource*/\r\n    public deleteRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(resource._links)) {\r\n            let link: string = resource._links['self'].href;\r\n            let idx: number = link.lastIndexOf('/') + 1;\r\n\r\n            if (idx == -1)\r\n                return observableThrowError('no relation found');\r\n\r\n            let relationId: string = link.substring(idx);\r\n            return ResourceHelper.getHttp().delete(ResourceHelper.getProxy(this._links[relation].href + '/' + relationId), {headers: ResourceHelper.headers});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n    \r\n    /** Unbind the resource with the given relation from this resource*/\r\n    public deleteAllRelation<T extends Resource>(relation: string): Observable<any> {\r\n        return ResourceHelper.getHttp().delete(ResourceHelper.getProxy(this._links[relation].href ), {headers: ResourceHelper.headers});\r\n        \r\n    }\r\n\r\n}","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { UserConfiguration } from './user-configuration.model';\r\nimport { UserPosition } from './user-position.model';\r\n\r\n/**\r\n * User model\r\n */\r\nexport class User extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** username */\r\n  public username: string;\r\n  /** password */\r\n  public password: string;\r\n  /** first name */\r\n  public firstName: string;\r\n  /** last name */\r\n  public lastName: string;\r\n  /** whether user is blocked */\r\n  public blocked: boolean;\r\n  /** whether user is administrator */\r\n  public administrator: boolean;\r\n  /** Is passwordSet */\r\n  public passwordSet: boolean;\r\n  /** user positions */\r\n  public positions: UserPosition[];\r\n  /** user permissions */\r\n  public permissions: UserConfiguration[];\r\n}\r\n","import {HttpClient} from '@angular/common/http';\r\nimport {Inject, Injectable} from '@angular/core';\r\nimport {ResourceHelper} from './resource-helper';\r\nimport {ExternalConfigurationHandlerInterface} from './external-configuration.handler';\r\nimport {ExternalConfiguration} from './ExternalConfiguration';\r\n\r\n\r\n/** ExternalService */\r\n@Injectable()\r\nexport class ExternalService {\r\n\r\n    /** constructor */\r\n    constructor(@Inject('ExternalConfigurationService') private externalConfigurationService: ExternalConfigurationHandlerInterface) {\r\n        ResourceHelper.setProxyUri(externalConfigurationService.getProxyUri());\r\n        ResourceHelper.setRootUri(externalConfigurationService.getRootUri());\r\n        ResourceHelper.setHttp(externalConfigurationService.getHttp());\r\n    }\r\n\r\n    /** update ExternalConfigurationHandler */\r\n    public updateExternalConfigurationHandlerInterface(externalConfigurationService: ExternalConfigurationHandlerInterface) {\r\n\tthis.externalConfigurationService = externalConfigurationService;\r\n\r\n        ResourceHelper.setProxyUri(externalConfigurationService.getProxyUri());\r\n        ResourceHelper.setRootUri(externalConfigurationService.getRootUri());\r\n        ResourceHelper.setHttp(externalConfigurationService.getHttp());\r\n    }\r\n\r\n    /** get ExternalConfiguration */\r\n    public getExternalConfiguration(): ExternalConfiguration {\r\n        return this.externalConfigurationService.getExternalConfiguration();\r\n    }\r\n\r\n    /** get proxy URL */\r\n    public getProxyUri(): string {\r\n        return this.externalConfigurationService.getProxyUri();\r\n    }\r\n\r\n    /** get Root URI */\r\n    public getRootUri(): string {\r\n        return this.externalConfigurationService.getRootUri();\r\n    }\r\n\r\n    /** get URL */\r\n    public getURL(): string {\r\n        return ResourceHelper.getURL();\r\n    }\r\n\r\n    /** get HttpClient */\r\n    public getHttp(): HttpClient {\r\n        return ResourceHelper.getHttp();\r\n    }\r\n}\r\n","\r\nimport { throwError as observableThrowError } from 'rxjs';\r\n\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { Resource } from './resource';\r\nimport { ResourceHelper } from './resource-helper';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Sort } from './sort';\r\nimport { ResourceArray } from './resource-array';\r\nimport { ExternalService } from './external.service';\r\nimport { HalOptions } from './rest.service';\r\nimport { SubTypeBuilder } from './subtype-builder';\r\nimport { Observable } from 'rxjs';\r\n\r\n/** ResourceService */\r\n@Injectable()\r\nexport class ResourceService {\r\n\r\n\r\n    /** constructor */\r\n    constructor(private externalService: ExternalService) { }\r\n\r\n\r\n    /** get URL */\r\n    private static getURL(): string {\r\n        return ResourceHelper.getURL();\r\n    }\r\n\r\n    /** get all resources from a base URI of a given type */\r\n    public getAll<T extends Resource>(type: { new(): T }, resource: string, _embedded: string, options?: HalOptions, subType?: SubTypeBuilder, embeddedName?:String, ignoreProjection?:boolean): Observable<ResourceArray<T>> {\r\n        let uri = this.getResourceUrl(resource);\r\n        if(!ignoreProjection){\r\n            uri = uri.concat('?projection=view');\r\n        }\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        result.sortInfo = options ? options.sort : undefined;\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, params: params });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result, subType,embeddedName)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** get resource from a base URI and a given id */\r\n    public get<T extends Resource>(type: { new(): T }, resource: string, id: any): Observable<T> {\r\n        const uri = this.getResourceUrl(resource).concat('/', id, '?projection=view');\r\n        const result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers });\r\n        return observable.pipe(map(data => ResourceHelper.instantiateResource(result, data)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** get resource from its selflink */\r\n    public getBySelfLink<T extends Resource>(type: { new(): T }, resourceLink: string): Observable<T> {\r\n        const result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(ResourceHelper.getProxy(resourceLink), { headers: ResourceHelper.headers });\r\n        return observable.pipe(map(data => ResourceHelper.instantiateResource(result, data)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** search resources from a given base path, query and options */\r\n    public search<T extends Resource>(type: { new(): T }, query: string, resource: string, _embedded: string, options?: HalOptions): Observable<ResourceArray<T>> {\r\n        const uri = this.getResourceUrl(resource).concat('/search/', query);\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, params: params });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** search a single resource from a given base path, query and options */\r\n    public searchSingle<T extends Resource>(type: { new(): T }, query: string, resource: string, options?: HalOptions): Observable<T> {\r\n        const uri = this.getResourceUrl(resource).concat('/search/', query);\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, params: params });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResource(result, response)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** search resources from a given base path, custom query and options */\r\n    public customQuery<T extends Resource>(type: { new(): T }, query: string, resource: string, _embedded: string, options?: HalOptions): Observable<ResourceArray<T>> {\r\n        const uri = this.getResourceUrl(resource + query);\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, params: params });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** get resource given a relation link */\r\n    public getByRelation<T extends Resource>(type: { new(): T }, resourceLink: string): Observable<T> {\r\n        let result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(resourceLink, { headers: ResourceHelper.headers });\r\n        return observable.pipe(map(data => ResourceHelper.instantiateResource(result, data)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** get resource array given a relation link */\r\n    public getByRelationArray<T extends Resource>(type: { new(): T }, resourceLink: string, _embedded: string, builder?: SubTypeBuilder): Observable<ResourceArray<T>> {\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        let observable = ResourceHelper.getHttp().get(resourceLink, { headers: ResourceHelper.headers });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result, builder)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** count resources given a path */\r\n    public count(resource: string): Observable<number> {\r\n        const uri = this.getResourceUrl(resource).concat('/search/countAll');\r\n\r\n        return ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, observe: 'body' }).pipe(\r\n            map((response: Response) => Number(response.body)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** create resource from self link and entity data*/\r\n    public create<T extends Resource>(selfResource: string, entity: T) {\r\n        const uri = ResourceHelper.getURL() + selfResource;\r\n        const payload = ResourceHelper.resolveRelations(entity);\r\n\r\n        this.setUrlsResource(entity);\r\n        let observable = ResourceHelper.getHttp().post(uri, payload, { headers: ResourceHelper.headers, observe: 'response' });\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return ResourceHelper.instantiateResource(entity, response.body);\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }), catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** update resource from a given entity data*/\r\n    public update<T extends Resource>(entity: T) {\r\n        const uri = ResourceHelper.getProxy(entity._links.self.href);\r\n        const payload = ResourceHelper.resolveRelations(entity);\r\n        this.setUrlsResource(entity);\r\n        let observable = ResourceHelper.getHttp().put(uri, payload, { headers: ResourceHelper.headers, observe: 'response' });\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return ResourceHelper.instantiateResource(entity, response.body);\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }), catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** update resource from a given entity data*/\r\n    public updateCollection<T extends Resource>(resourceArray: ResourceArray<T>, resourceLink: string) {\r\n        const uri = ResourceHelper.getProxy(resourceLink);\r\n        //const payload = ResourceHelper.resolveRelations(entity);\r\n        //this.setUrlsResource(entity);\r\n        var headersReq = ResourceHelper.headers;\r\n        headersReq.set(\"Content-Type\", \"text/uri-list\");\r\n        let observable = ResourceHelper.getHttp().put(uri, resourceArray, { headers: headersReq, observe: 'response' });\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return \"\";\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }), catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** patch resource from a given entity data*/\r\n    public patch<T extends Resource>(entity: T) {\r\n        const uri = ResourceHelper.getProxy(entity._links.self.href);\r\n        const payload = ResourceHelper.resolveRelations(entity);\r\n        this.setUrlsResource(entity);\r\n        let observable = ResourceHelper.getHttp().patch(uri, payload, { headers: ResourceHelper.headers, observe: 'response' });\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return ResourceHelper.instantiateResource(entity, response.body);\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }), catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** delete resource from a given entity data*/\r\n    public delete<T extends Resource>(entity: T): Observable<Object> {\r\n        const uri = ResourceHelper.getProxy(entity._links.self.href);\r\n        return ResourceHelper.getHttp().delete(uri, { headers: ResourceHelper.headers }).pipe(catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** whether a resource array has next page of results*/\r\n    public hasNext<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.next_uri != undefined;\r\n    }\r\n\r\n    /** whether a resource array has previous page of results*/\r\n    public hasPrev<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.prev_uri != undefined;\r\n    }\r\n\r\n    /** whether a resource array has first page of results*/\r\n    public hasFirst<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.first_uri != undefined;\r\n    }\r\n\r\n    /** whether a resource array has last page of results*/\r\n    public hasLast<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.last_uri != undefined;\r\n    }\r\n\r\n    /** get resource array next page of results*/\r\n    public next<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.next(type);\r\n    }\r\n\r\n    /** get resource array previous page of results*/\r\n    public prev<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.prev(type);\r\n    }\r\n\r\n    /** get resource array first page of results*/\r\n    public first<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.first(type);\r\n    }\r\n\r\n    /** get resource array last page of results*/\r\n    public last<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.last(type);\r\n    }\r\n\r\n    /** get resource array page of results given a page number*/\r\n    public page<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }, id: number): Observable<ResourceArray<T>> {\r\n        return resourceArray.page(type, id);\r\n    }\r\n\r\n    /** sort resource array with a given sorting params */\r\n    public sortElements<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }, ...sort: Sort[]): Observable<ResourceArray<T>> {\r\n        return resourceArray.sortElements(type, ...sort);\r\n    }\r\n\r\n    /** get resource array size*/\r\n    public size<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }, size: number): Observable<ResourceArray<T>> {\r\n        return resourceArray.size(type, size);\r\n    }\r\n\r\n    /** get resource URL from a given path*/\r\n    public getResourceUrl(resource?: string): string {\r\n        let url = ResourceService.getURL();\r\n        if (!url.endsWith('/')) {\r\n            url = url.concat('/');\r\n        }\r\n        if (resource) {\r\n            return url.concat(resource);\r\n        }\r\n        return url;\r\n    }\r\n\r\n    /** set proxy and root urls of given resource array */\r\n    private setUrls<T extends Resource>(result: ResourceArray<T>) {\r\n        result.proxyUrl = this.externalService.getProxyUri();\r\n        result.rootUrl = this.externalService.getRootUri();\r\n    }\r\n\r\n    /** set proxy and root urls of given resource */\r\n    private setUrlsResource<T extends Resource>(result: T) {\r\n        result.proxyUrl = this.externalService.getProxyUri();\r\n        result.rootUrl = this.externalService.getRootUri();\r\n    }\r\n}","import {of as observableOf, throwError as observableThrowError} from 'rxjs';\r\nimport {map, mergeMap} from 'rxjs/operators';\r\nimport {Resource} from './resource';\r\nimport {ResourceArray} from './resource-array';\r\nimport {Sort} from './sort';\r\nimport {ResourceService} from './resource.service';\r\nimport {SubTypeBuilder} from './subtype-builder';\r\nimport {isNullOrUndefined} from 'util';\r\nimport {Observable} from 'rxjs';\r\nimport {Injector} from \"@angular/core\";\r\n\r\n/** HAL param data model */\r\nexport type HalParam = { key: string, value: string | number | boolean };\r\n/** HAL option data model */\r\nexport type HalOptions = { notPaged?: boolean, size?: number, sort?: Sort[], params?: HalParam[] };\r\n\r\n/** REST API access interface */\r\nexport class RestService<T extends Resource> {\r\n    /** resource type */\r\n    private type: any;\r\n    /** resource path */\r\n    private resource: string;\r\n    /** resource array */\r\n    public resourceArray: ResourceArray<T>;\r\n    /** resource service */\r\n    public resourceService: ResourceService;\r\n    /** _embedded field name */\r\n    private _embedded: string = '_embedded';\r\n\r\n    /** constructor */\r\n    constructor(type: { new(): T },\r\n                resource: string,\r\n                private injector: Injector,\r\n                _embedded?: string) {\r\n        this.type = type;\r\n        this.resource = resource;\r\n        this.resourceService = injector.get(ResourceService);\r\n        if (!isNullOrUndefined(_embedded))\r\n            this._embedded = _embedded;\r\n    }\r\n\r\n    /** error handler */\r\n    protected handleError(error: any):Observable<never> {\r\n        return RestService.handleError(error);\r\n    }\r\n\r\n    /** error handler */\r\n    protected static handleError(error: any):Observable<never> {\r\n        return observableThrowError(error);\r\n    }\r\n\r\n    /** get all resources with optional options an subType params */\r\n    public getAll(options?: HalOptions, subType?: SubTypeBuilder, embeddedName?:String, ignoreProjection?:boolean): Observable<T[]> {\r\n        return this.resourceService.getAll(this.type, this.resource, this._embedded, options, subType,embeddedName, ignoreProjection).pipe(\r\n            mergeMap((resourceArray: ResourceArray<T>) => {\r\n                if (options && options.notPaged && !isNullOrUndefined(resourceArray.first_uri)) {\r\n                    options.notPaged = false;\r\n                    options.size = resourceArray.totalElements;\r\n                    return this.getAll(options);\r\n                } else {\r\n                    this.resourceArray = resourceArray;\r\n                    return observableOf(resourceArray.result);\r\n                }\r\n            }));\r\n    }\r\n\r\n    /** get resource from a given id */\r\n    public get(id: any): Observable<T> {\r\n        return this.resourceService.get(this.type, this.resource, id);\r\n    }\r\n\r\n    /** get resource from self link */\r\n    public getBySelfLink(selfLink: string): Observable<T> {\r\n        return this.resourceService.getBySelfLink(this.type, selfLink);\r\n    }\r\n\r\n    /** search resources from a given query string and optional options params */\r\n    public search(query: string, options?: HalOptions): Observable<T[]> {\r\n        return this.resourceService.search(this.type, query, this.resource, this._embedded, options).pipe(\r\n            mergeMap((resourceArray: ResourceArray<T>) => {\r\n                if (options && options.notPaged && !isNullOrUndefined(resourceArray.first_uri)) {\r\n                    options.notPaged = false;\r\n                    options.size = resourceArray.totalElements;\r\n                    return this.search(query, options);\r\n                } else {\r\n                    this.resourceArray = resourceArray;\r\n                    return observableOf(resourceArray.result);\r\n                }\r\n            }));\r\n    }\r\n\r\n    /** search resource from a given query string and optional options params */\r\n    public searchSingle(query: string, options?: HalOptions): Observable<T> {\r\n        return this.resourceService.searchSingle(this.type, query, this.resource, options);\r\n    }\r\n\r\n    /** search resources from a given custom query string and optional options params */\r\n    public customQuery(query: string, options?: HalOptions): Observable<T[]> {\r\n        return this.resourceService.customQuery(this.type, query, this.resource, this._embedded, options).pipe(\r\n            mergeMap((resourceArray: ResourceArray<T>) => {\r\n                if (options && options.notPaged && !isNullOrUndefined(resourceArray.first_uri)) {\r\n                    options.notPaged = false;\r\n                    options.size = resourceArray.totalElements;\r\n                    return this.customQuery(query, options);\r\n                } else {\r\n                    this.resourceArray = resourceArray;\r\n                    return observableOf(resourceArray.result);\r\n                }\r\n            }));\r\n    }\r\n\r\n\r\n    /** get resource array given a relation link */\r\n    public getByRelationArray(relation: string, builder?: SubTypeBuilder): Observable<T[]> {\r\n        return this.resourceService.getByRelationArray(this.type, relation, this._embedded, builder).pipe(\r\n            map((resourceArray: ResourceArray<T>) => {\r\n                this.resourceArray = resourceArray;\r\n                return resourceArray.result;\r\n            }));\r\n    }\r\n\r\n    /** get resource given a relation link */\r\n    public getByRelation(relation: string): Observable<T> {\r\n        return this.resourceService.getByRelation(this.type, relation);\r\n    }\r\n\r\n    /** count resources given a path */\r\n    public count(): Observable<number> {\r\n        return this.resourceService.count(this.resource);\r\n    }\r\n\r\n    /** create resource from self link and entity data*/\r\n    public create(entity: T) {\r\n        return this.resourceService.create(this.resource, entity);\r\n    }\r\n\r\n    /** update resource from a given entity data*/\r\n    public update(entity: T) {\r\n        return this.resourceService.update(entity);\r\n    }\r\n\r\n    /** patch resource from a given entity data*/\r\n    public patch(entity: T) {\r\n        return this.resourceService.patch(entity);\r\n    }\r\n\r\n    /** delete resource from a given entity data*/\r\n    public delete(entity: T): Observable<Object> {\r\n        return this.resourceService.delete(entity);\r\n    }\r\n\r\n    /** get total number of elements of resource array */\r\n    public totalElement(): number {\r\n        if (this.resourceArray && this.resourceArray.totalElements)\r\n            return this.resourceArray.totalElements;\r\n        return 0;\r\n    }\r\n\r\n    /** whether a resource array has first page of results*/\r\n    public hasFirst(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasFirst(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** whether a resource array has next page of results*/\r\n    public hasNext(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasNext(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** whether a resource array has previous page of results*/\r\n    public hasPrev(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasPrev(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** whether a resource array has last page of results*/\r\n    public hasLast(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasLast(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** get resource array next page of results*/\r\n    public next(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.next(this.resourceArray, this.type).pipe(\r\n                map((resourceArray: ResourceArray<T>) => {\r\n                    this.resourceArray = resourceArray;\r\n                    return resourceArray.result;\r\n                }));\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array previous page of results*/\r\n    public prev(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.prev(this.resourceArray, this.type).pipe(\r\n                map((resourceArray: ResourceArray<T>) => {\r\n                    this.resourceArray = resourceArray;\r\n                    return resourceArray.result;\r\n                }));\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array first page of results*/\r\n    public first(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.first(this.resourceArray, this.type)\r\n                .pipe(\r\n                    map((resourceArray: ResourceArray<T>) => {\r\n                        this.resourceArray = resourceArray;\r\n                        return resourceArray.result;\r\n                    })\r\n                );\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array last page of results*/\r\n    public last(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.last(this.resourceArray, this.type)\r\n                .pipe(\r\n                    map((resourceArray: ResourceArray<T>) => {\r\n                        this.resourceArray = resourceArray;\r\n                        return resourceArray.result;\r\n                    })\r\n                );\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array page of results given a page number*/\r\n    public page(pageNumber: number): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.page(this.resourceArray, this.type, pageNumber).pipe(\r\n                map((resourceArray: ResourceArray<T>) => {\r\n                    this.resourceArray = resourceArray;\r\n                    return resourceArray.result;\r\n                }));\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n}\r\n","import { User } from '../user/user.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n\r\n/** Account manager service */\r\n@Injectable()\r\nexport class AccountService extends RestService<User> {\r\n  \r\n\r\n  /** API resource path */\r\n  public ACCOUNT_API = 'account';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(User, \"account\", injector);\r\n  }\r\n\r\n  /** get logged in user account*/\r\n  get(): Observable<any> {\r\n    let result: Observable<Object>;\r\n    result = this.http.get(this.resourceService.getResourceUrl(this.ACCOUNT_API));\r\n    return result;\r\n  }\r\n  \r\n  /** save account*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    result = this.http.post(this.resourceService.getResourceUrl(this.ACCOUNT_API) , item);\r\n\r\n    return result;\r\n  }\r\n\r\n  /** change logged in user account*/  \r\n  changePassword(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    result = this.http.post(this.resourceService.getResourceUrl(this.ACCOUNT_API+\"/change-password\") , item);\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable} from 'rxjs-compat';\r\nimport {ResourceService} from '../angular-hal/src/lib/resource.service';\r\n//import * as moment from 'moment';\r\n\r\n/** Authentication service*/\r\n@Injectable()\r\nexport class AuthService {\r\n    \r\n  /** API resource path */\r\n  public AUTH_API = 'authenticate';\r\n\r\n    /** constructor*/\r\n    constructor(\r\n        private http: HttpClient,\r\n        private resourceService: ResourceService\r\n    ) {}\r\n    \r\n    /** get current user jwt token from session storage*/\r\n    getToken() {\r\n        return  sessionStorage.getItem('authenticationToken');\r\n    }\r\n\r\n    /** login operation */\r\n    login(credentials): Observable<any> {\r\n\r\n        const data = {\r\n            username: credentials.username,\r\n            password: credentials.password\r\n        };\r\n        return this.http.post(this.resourceService.getResourceUrl(this.AUTH_API), data, {observe : 'response'}).map(authenticateSuccess.bind(this));\r\n\r\n        function authenticateSuccess(resp) {\r\n            if (resp.ok) {\r\n                const jwt = resp.body.id_token;\r\n                this.storeAuthenticationToken(jwt);\r\n                //const expiresAt = moment().add( resp.headers.get('Token-Validity'),'milisecond');\r\n                //sessionStorage.setItem('expires_at', JSON.stringify(expiresAt.valueOf()));\r\n                return jwt;\r\n            }                    \r\n        }\r\n    }\r\n    \r\n    /** login operation with jwt token */\r\n    loginWithToken(jwt) {\r\n        if (jwt) {\r\n            this.storeAuthenticationToken(jwt);\r\n            return Promise.resolve(jwt);\r\n        } else {\r\n            return Promise.reject('auth-jwt-service Promise reject'); // Put appropriate error message here\r\n        }\r\n    }\r\n\r\n    /** store jwt token in session storage*/\r\n    storeAuthenticationToken(jwt) {\r\n       sessionStorage.setItem('authenticationToken', jwt);\r\n        \r\n    }\r\n    \r\n    /** check whether current user is logged in*/\r\n    public isLoggedIn() {\r\n        //return moment().isBefore(this.getExpiration());\r\n        return this.getToken();\r\n    }\r\n    \r\n    /** check whether current user is logged out*/\r\n    isLoggedOut() {\r\n        return !this.isLoggedIn();\r\n    }\r\n\r\n    /** logout operation */\r\n    logout(): Observable<any> {\r\n\r\n        return new Observable((observer) => {\r\n            //localStorage.removeItem('authenticationToken');\r\n            sessionStorage.removeItem('authenticationToken');\r\n            //sessionStorage.removeItem('expires_at');\r\n            observer.complete();\r\n        });\r\n    }\r\n\r\n\r\n    \r\n}\r\n","import { Observable } from 'rxjs';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\r\n\r\n/** Interceptor for authentication token in API requests */\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n\r\n    /** constructor*/\r\n    constructor(\r\n    ) {\r\n    }\r\n    \r\n    /** request handler */\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n        const token = sessionStorage.getItem('authenticationToken');\r\n        if (!!token) {\r\n            request = request.clone({\r\n                setHeaders: {\r\n                    Authorization: 'Bearer ' + token\r\n                }\r\n            });\r\n        }\r\n        return next.handle(request);\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport { AccountService } from '../account/account.service';\r\n\r\n/** Principal service*/\r\n@Injectable()\r\nexport class Principal {\r\n    private userIdentity: any;\r\n    private authenticated = false;\r\n    private authenticationState = new Subject<any>();\r\n\r\n    /** constructor */\r\n    constructor(\r\n        private account: AccountService\r\n    ) {}\r\n\r\n    /** authenticate with given identity*/\r\n    authenticate(identity) {\r\n        this.userIdentity = identity;\r\n        this.authenticated = identity !== null;\r\n        this.authenticationState.next(this.userIdentity);\r\n    }\r\n\r\n    /** check whether current user has any of the given authorities */\r\n    hasAnyAuthority(authorities: string[]): Promise<boolean> {\r\n        return Promise.resolve(this.hasAnyAuthorityDirect(authorities));\r\n    }\r\n\r\n    /** check whether current user has any of the given authorities on the given territory */\r\n    hasAnyAuthorityOnTerritory(authorities: string[],territory: string ): Promise<boolean> {\r\n        return Promise.resolve(this.hasAnyAuthorityDirectOnTerritory(authorities,territory));\r\n    }\r\n\r\n    /** check whether current user has any of the given authorities without resolving promises*/\r\n    hasAnyAuthorityDirect(authorities: string[]): boolean {\r\n        if (!this.authenticated || !this.userIdentity || !this.userIdentity.authorities) {\r\n            return false;\r\n        }\r\n\r\n        for (let i = 0; i < authorities.length; i++) {\r\n            if (this.userIdentity.authorities.includes(authorities[i])) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** check whether current user has any of the given authorities on the given territory without resolving promises */\r\n    hasAnyAuthorityDirectOnTerritory(authorities: string[],territory: string): boolean {\r\n        if (!this.authenticated || !this.userIdentity || !this.userIdentity.authorities) {\r\n            return false;\r\n        }\r\n\r\n        for (let i = 0; i < authorities.length; i++) {\r\n\r\n            if (this.userIdentity.authoritiesPerTerritory[territory] && this.userIdentity.authoritiesPerTerritory[territory].includes(authorities[i])) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** check whether current user has the given authority */\r\n    hasAuthority(authority: string): Promise<boolean> {\r\n        if (!this.authenticated) {\r\n           return Promise.resolve(false);\r\n        }\r\n\r\n        return this.identity().then((id) => {\r\n            return Promise.resolve(id.authorities && id.authorities.includes(authority));\r\n        }, () => {\r\n            return Promise.resolve(false);\r\n        });\r\n    }\r\n\r\n    /** check whether current user has the given authority on the given territory*/\r\n    hasAuthorityOnTerritory(authority: string,territory: string): Promise<boolean> {\r\n        if (!this.authenticated) {\r\n           return Promise.resolve(false);\r\n        }\r\n\r\n        return this.identity().then((id) => {\r\n            return Promise.resolve(id.authoritiesPerTerritory && id.authoritiesPerTerritory[territory] && id.authoritiesPerTerritory[territory].includes(authority));\r\n        }, () => {\r\n            return Promise.resolve(false);\r\n        });\r\n    }\r\n\r\n    /** check user identity*/\r\n    identity(force?: boolean): Promise<any> {\r\n        if (force === true) {\r\n            this.userIdentity = undefined;\r\n        }\r\n\r\n        // check and see if we have retrieved the userIdentity data from the server.\r\n        // if we have, reuse it by immediately resolving\r\n        if (this.userIdentity) {\r\n            return Promise.resolve(this.userIdentity);\r\n        }\r\n\r\n        // retrieve the userIdentity data from the server, update the identity object, and then resolve.\r\n        return this.account.get().toPromise().then((response) => {\r\n            const account = response;\r\n            if (account) {\r\n                this.userIdentity = account;\r\n                this.authenticated = true;\r\n            } else {\r\n                this.userIdentity = null;\r\n                this.authenticated = false;\r\n            }\r\n            this.authenticationState.next(this.userIdentity);\r\n            return this.userIdentity;\r\n        }).catch((err) => {\r\n            this.userIdentity = null;\r\n            this.authenticated = false;\r\n            this.authenticationState.next(this.userIdentity);\r\n            return null;\r\n        });\r\n    }\r\n\r\n    /** check whether current user is authenticated */\r\n    isAuthenticated(): boolean {\r\n        return this.authenticated;\r\n    }\r\n\r\n    /** check whether current user identity is resolved */\r\n    isIdentityResolved(): boolean {\r\n        return this.userIdentity !== undefined;\r\n    }\r\n\r\n    /** get current user authentication state */\r\n    getAuthenticationState(): Observable<any> {\r\n        return this.authenticationState.asObservable();\r\n    }\r\n\r\n\r\n}\r\n","import { Injector, Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from './auth.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Principal } from './principal.service';\r\n\r\n/** Interceptor for authentication expired response in API requests */\r\n@Injectable()\r\nexport class AuthExpiredInterceptor implements HttpInterceptor {\r\n\r\n    /** constructor */\r\n    constructor(\r\n        private router: Router,     \r\n        private authService: AuthService, \r\n        private principal: Principal\r\n    ) {}\r\n\r\n    /** request handler */\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        return next.handle(request).do((event: HttpEvent<any>) => {}, (err: any) => {\r\n            const intercept: boolean = request.url.indexOf(\"/api/\") != -1;\r\n            //tractem request\r\n            if (intercept) {\r\n                if (err instanceof HttpErrorResponse) {\r\n                    if (err.status === 401) {                    \r\n                        this.authService.logout().subscribe();\r\n                        this.principal.authenticate(null);\r\n                        this.router.navigate(['/']);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AuthService } from './auth.service';\r\nimport { Principal } from './principal.service';\r\n\r\n/** Login service*/\r\n@Injectable()\r\nexport class LoginService {\r\n    \r\n    /** constructor */\r\n    constructor(\r\n        private authServerProvider: AuthService, \r\n        private principal: Principal\r\n    ) {}\r\n\r\n    /**Login operation*/\r\n    login(credentials, callback?) {\r\n        const cb = callback || function() {};\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.authServerProvider.login(credentials).subscribe((data) => {\r\n                this.principal.identity(true).then((account) => {\r\n                    // After the login the language will be changed to\r\n                    // the language selected by the user during his registration\r\n                    resolve(data);\r\n                });\r\n                \r\n                \r\n                return cb();\r\n            }, (err) => {\r\n                this.logout();\r\n                reject(err);\r\n                return cb(err);\r\n            });\r\n        });\r\n    }\r\n    /**login with jwt token */\r\n    loginWithToken(jwt) {\r\n        return this.authServerProvider.loginWithToken(jwt);\r\n    }\r\n\r\n    /** logout operation */\r\n    logout() {\r\n       this.authServerProvider.logout().subscribe();\r\n       this.principal.authenticate(null);\r\n    }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {ResourceService} from '../angular-hal/src/lib/resource.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DashboardService{\r\n\r\n    /** API resource path */\r\n    public DASHBOARD_API = 'dashboard/info';\r\n    public DASHBOARD_EMBEDDED= 'dashboard';\r\n    /** constructor */\r\n    constructor(       \r\n      private http: HttpClient,\r\n      private resourceService: ResourceService) {\r\n    }\r\n  \r\n    /** get all kpi */\r\n    getAll(): Observable<any> {\r\n      return this.http.get(this.resourceService.getResourceUrl(this.DASHBOARD_API)).map(response => response[this.DASHBOARD_EMBEDDED]);\r\n    }\r\n}\r\n","import {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { User } from './user.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n/** User manager service */\r\n@Injectable()\r\nexport class UserService extends RestService<User> {\r\n  \r\n  /** API resource path */\r\n  public USER_API ='users';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(User, \"users\", injector);\r\n  }\r\n  \r\n  /** remove user*/\r\n  remove(item: User) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save user*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.USER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n    \r\n  /** change password o given user id */\r\n  changePassword(id,item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    result = this.http.post(this.resourceService.getResourceUrl(this.USER_API+\"/\"+id+\"/change-password\") , item);\r\n    return result;\r\n  }\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { Territory } from '../territory/territory.model';\r\nimport { User } from './user.model';\r\n/**\r\n * User position model\r\n */\r\nexport class UserPosition extends Resource {\r\n  /** name */\r\n  public name: string;\r\n  /** email */\r\n  public email: string;\r\n  /** organization name*/\r\n  public organization: string;\r\n  /** system created date*/\r\n  public createdDate: any;\r\n  /** system dated date*/\r\n  public datedDate: any;\r\n  /** position territory*/\r\n  public territory: Territory;\r\n  /** user*/\r\n  public user: User;\r\n}\r\n","import {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { UserPosition } from './user-position.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n/** User position manager service */\r\n@Injectable()\r\nexport class UserPositionService  extends RestService<UserPosition> {\r\n  \r\n\r\n  /** API resource path */\r\n  public USER_POSITION_API = 'user-positions';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(UserPosition, \"user-positions\", injector);\r\n  }\r\n  \r\n  /** remove user position*/\r\n  remove(item: UserPosition) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save user position*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.user !=null){\r\n          item.substituteRelation('user',item.user).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      if (item.territory !=null){\r\n          item.substituteRelation('territory',item.territory).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n    } else {\r\n      item.territory = item.territory._links.self.href;\r\n      item.user = item.user._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.USER_POSITION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { Role } from '../role/role.model';\r\nimport { Territory } from '../territory/territory.model';\r\nimport { User } from './user.model';\r\n\r\n/**\r\n * User permission model\r\n */\r\nexport class UserConfiguration extends Resource {\r\n  /** role */  \r\n  public role: Role;\r\n\r\n  /** role Children */  \r\n  public roleChildren: Role;\r\n  \r\n  /** territory */ \r\n  public territory: Territory;\r\n  /** user */\r\n  public user: User;\r\n}\r\n","import { RestService } from '../angular-hal/src/lib/rest.service';\r\nimport { UserConfiguration } from './user-configuration.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n/** User configuration manager service */\r\n@Injectable()\r\nexport class UserConfigurationService extends RestService<UserConfiguration> {\r\n\r\n  /** API resource path */\r\n  public USER_CONFIGURATION_API = 'user-configurations';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector, private http: HttpClient) {\r\n    super(UserConfiguration, \"user-configurations\", injector);\r\n  }\r\n\r\n  /** remove user configuration*/\r\n  remove(item: UserConfiguration) {\r\n    return this.http.delete(item._links.self.href);\r\n\r\n  }\r\n\r\n  /** save user configuration*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links != null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      item.territory = item.territory._links.self.href;\r\n      item.role = item.role!=null?item.role._links.self.href:null;\r\n      item.user = item.user._links.self.href;\r\n      item.roleChildren = item.roleChildren!=null?item.roleChildren._links.self.href:null;\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.USER_CONFIGURATION_API), item);\r\n    }\r\n    return result;\r\n  }\r\n\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { TerritoryGroupType } from './territory-group-type.model';\r\nimport { TerritoryType } from './territory-type.model';\r\n\r\n/**\r\n * Territory model\r\n */\r\nexport class Territory extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** code */\r\n  public code: string;\r\n  /** name */\r\n  public name: string;\r\n  /** address*/\r\n  public territorialAuthorityAddress: string;\r\n  /** admin */\r\n  public territorialAuthorityName: string;\r\n  /** whether territory is blocked*/\r\n  public blocked: boolean;\r\n  /** comments*/\r\n  public note: string;\r\n  /** system created date*/\r\n  public createdDate: any;\r\n  /** contact email */  \r\n  public territorialAuthorityEmail: string;\r\n  /** extension */\r\n  public extent: string;\r\n  /** logo image URL */\r\n  public territorialAuthorityLogo: string;\r\n  /** contact organization name */\r\n  // public organizationName: string;\r\n  /** scope*/\r\n  public scope: string;\r\n  /** type */  \r\n  public type: TerritoryType;\r\n  /** group type */\r\n  public groupType: TerritoryGroupType;\r\n  /** territory members*/\r\n  public members: Territory[];\r\n\r\n}\r\n","import { Territory } from './territory.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { RestService } from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Territory manager service */\r\n@Injectable()\r\nexport class TerritoryService extends RestService<Territory> {\r\n\r\n  /** API resource path */\r\n  public TERRITORY_API = 'territories';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector, private http: HttpClient) {\r\n    super(Territory, \"territories\", injector);\r\n  }\r\n\r\n  /** remove territory*/\r\n  remove(item: Territory) {\r\n    return this.http.delete(item._links.self.href);\r\n\r\n  }\r\n\r\n  /** save territory*/\r\n  save(item: Territory): Observable<any> {\r\n    let result: Observable<Object>;\r\n\r\n    let territoryGroupType:any = {}\r\n    territoryGroupType._links = {};\r\n    territoryGroupType._links.self = {};\r\n    territoryGroupType._links.self.href = \"\";\r\n\r\n    let territoryType:any = {}\r\n    territoryType._links = {};\r\n    territoryType._links.self = {};\r\n    territoryType._links.self.href = \"\";\r\n\r\n    if (item.type != null) {\r\n      territoryType = item.type;\r\n      if (typeof item.type._links != 'undefined') {\r\n        item.type = item.type._links.self.href;\r\n      } \r\n    }\r\n\r\n    if (item._links != null) {\r\n      //update relations\r\n      delete item.groupType;\r\n\r\n\r\n      // if (territoryGroupType._links.self.href == '') {\r\n      //   item.deleteRelation('groupType', territoryGroupType).subscribe(result => {\r\n      //   }, error => console.error(error));\r\n\r\n      // } else {\r\n      //   item.substituteRelation('groupType', territoryGroupType).subscribe(result => {\r\n      //   }, error => console.error(error));\r\n      // }\r\n\r\n      if (territoryType._links.self.href == '') {\r\n        item.deleteRelation('type', territoryType).subscribe(result => {\r\n        }, error => console.error(error));\r\n\r\n      } else {\r\n        item.substituteRelation('type', territoryType).subscribe(result => {\r\n        }, error => console.error(error));\r\n      }\r\n\r\n      delete item.type;\r\n      // if (item.type != null)\r\n      //   item.type = item.type._links.self.href;\r\n\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TERRITORY_API), item);\r\n    }\r\n    return result;\r\n  }\r\n\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n\r\n/**\r\n * Territory type model\r\n */\r\nexport class TerritoryType extends Resource {\r\n   /** id */\r\n   public id: number;  \r\n  /** name */\r\n  public name: string;\r\n}\r\n","import { Territory } from './territory.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { TerritoryType } from './territory-type.model';\r\n\r\n/** TerritoryType manager service */\r\n@Injectable()\r\nexport class TerritoryTypeService extends RestService<TerritoryType> {\r\n  \r\n\r\n  /** API resource path */\r\n  public TERRITORYTYPE_API = 'territory-types';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TerritoryType, \"territory-types\", injector);\r\n  }\r\n  \r\n  /** remove territory type*/\r\n  remove(item: TerritoryType) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save territory type*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TERRITORYTYPE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n\r\n/**\r\n * Territory type model\r\n */\r\nexport class TerritoryGroupType extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** name */\r\n  public name: string;\r\n}\r\n","import { TerritoryGroupType } from './territory-group-type.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TerritoryGroupTypeService extends RestService<TerritoryGroupType> {\r\n  \r\n  /** API resource path */\r\n  public TERRITORYGROUPTYPE_API = 'territory-group-types';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TerritoryGroupType, \"territory-group-types\", injector);\r\n  }\r\n  \r\n  /** remove territory*/\r\n  remove(item: TerritoryGroupType) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save territory*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TERRITORYGROUPTYPE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}","import {Resource} from '../angular-hal/src/lib/resource';\r\n\r\n/**\r\n * Role model\r\n */\r\nexport class Role extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name*/\r\n  public name: string;\r\n  /** comments*/\r\n  public description: string;\r\n\r\n}\r\n","import { Role } from './role.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Role manager service */\r\n@Injectable()\r\nexport class RoleService extends RestService<Role> {\r\n  \r\n  /** API resource path */\r\n  public ROLE_API = 'roles';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Role, \"roles\", injector);\r\n  }\r\n  \r\n  /** remove role*/\r\n  remove(item: Role) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save role*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.ROLE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Connection model\r\n */\r\nexport class Connection extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name*/\r\n  public name: string;\r\n  /** type*/\r\n  public type: string;\r\n  /** user*/\r\n  public user: string;\r\n  /** password*/\r\n  public password: string;\r\n  /** connection string*/\r\n  public connectionString: string;\r\n\r\n}\r\n","import { Connection } from './connection.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Connection manager service */\r\n@Injectable()\r\nexport class ConnectionService extends RestService<Connection> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CONNECTION_API = 'connections';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Connection, \"connections\", injector);\r\n  }\r\n  \r\n  /** remove connection*/\r\n  remove(item: Connection) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save connection*/\r\n  save(item: Connection): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  testConnection(item:any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    result=this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API)+\"/test\" , item);\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n\r\nimport { Connection } from '../connection/connection.model';\r\nimport { Role } from '../role/role.model';\r\nimport { TaskType } from './task-type.model';\r\nimport { TaskGroup } from './task-group.model';\r\nimport { TaskAvailability } from './task-availability.model';\r\nimport { TaskParameter } from './task-parameter.model';\r\n\r\n//FIXME ensure task creation in admin app upon initialization (as it is done with Roles and default Users)\r\n/** GEOADMIN_task id */\r\nexport const GEOADMIN_TREE_TASK_ID:string  = \"geoadmin\";\r\n\r\nimport { TaskUI } from './task-ui.model';\r\nimport { Cartography } from '../cartography/cartography.model';\r\nimport { Service } from '../service/service.model';\r\n/** Task model */\r\nexport class Task extends Resource {\r\n  /** id */\r\n  public id?: number;\r\n  /** name */  \r\n  public name?: string;\r\n  /** order*/\r\n  public order?: Number;\r\n  /** system created date*/\r\n  public createdDate?: any;\r\n  /** task group*/\r\n  public group?: TaskGroup;\r\n  /** task type*/\r\n  public type?: TaskType;\r\n  /** task UI*/\r\n  public ui?: TaskUI;\r\n  /** parameters*/\r\n  public parameters?: TaskParameter[];\r\n  /** connection*/\r\n  public connection?: Connection;\r\n  /** roles*/\r\n  public roles?: Role[];\r\n  /** availabilities*/\r\n  public availabilities?: TaskAvailability[];\r\n\r\n  public cartography?: Cartography;\r\n\r\n  public service?: Service;\r\n\r\n  public properties?;\r\n}\r\n","import { Task } from './task.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Task manager service */\r\n@Injectable()\r\nexport class TaskService extends RestService<Task> {\r\n\r\n    /** API resource path */\r\n    public CONNECTION_API = 'tasks';\r\n\r\n    /** constructor */\r\n    constructor(injector: Injector, private http: HttpClient) {\r\n        super(Task, \"tasks\", injector);\r\n    }\r\n\r\n    /** remove task*/\r\n    remove(item: Task) {\r\n        return this.http.delete(item._links.self.href);\r\n    }\r\n    \r\n    /** save task*/\r\n    save(item: Task): Observable<any> {\r\n        let result: Observable<Object>;\r\n\r\n        if (item._links != null) {\r\n\r\n            if (!item.service) {\r\n                let service:any = {}\r\n                service._links = {};\r\n                service._links.self = {};\r\n                service._links.self.href = \"\";\r\n                item.deleteRelation('service', service).subscribe(result => {\r\n                }, error => console.error(error)); \r\n            }else {\r\n                item.service._links.self.href=item.service._links.self.href.split(\"{\")[0]\r\n                item.substituteRelation('service', item.service).subscribe(result => {\r\n                }, error => console.error(error));\r\n                item.service = item.service._links.self.href\r\n            }\r\n            if (!item.cartography) {\r\n                let cartography:any = {}\r\n                cartography._links = {};\r\n                cartography._links.self = {};\r\n                cartography._links.self.href = \"\";\r\n                item.deleteRelation('cartography', cartography).subscribe(result => {\r\n                }, error => console.error(error)); \r\n            }else {\r\n                item.cartography._links.self.href=item.cartography._links.self.href.split(\"{\")[0]\r\n                item.substituteRelation('cartography', item.cartography).subscribe(result => {\r\n                }, error => console.error(error));\r\n                item.cartography = item.cartography._links.self.href\r\n            }\r\n\r\n            if (!item.connection) {\r\n                let connection:any = {}\r\n                connection._links = {};\r\n                connection._links.self = {};\r\n                connection._links.self.href = \"\";\r\n                item.deleteRelation('connection', connection).subscribe(result => {\r\n                }, error => console.error(error)); \r\n            }else {\r\n                item.connection._links.self.href=item.connection._links.self.href.split(\"{\")[0]\r\n                item.substituteRelation('connection', item.connection).subscribe(result => {\r\n                }, error => console.error(error));\r\n                item.connection = item.connection._links.self.href\r\n            }\r\n\r\n            if (!item.ui) {\r\n                // item.deleteRelation('ui', item.ui).subscribe(result => {\r\n                // }, error => console.error(error)); \r\n            }else {\r\n                item.ui._links.self.href=item.ui._links.self.href.split(\"{\")[0]\r\n                item.substituteRelation('ui', item.ui).subscribe(result => {\r\n                }, error => console.error(error));\r\n                item.ui = item.ui._links.self.href\r\n            }\r\n\r\n            if (!item.group) {\r\n                // item.deleteRelation('group', item.group).subscribe(result => {\r\n                // }, error => console.error(error)); \r\n            }else {\r\n                item.group._links.self.href=item.group._links.self.href.split(\"{\")[0]\r\n                item.substituteRelation('group', item.group).subscribe(result => {\r\n                }, error => console.error(error));\r\n                item.group = item.group._links.self.href\r\n            }\r\n\r\n            if (!item.type) {\r\n                // item.deleteRelation('type', item.type).subscribe(result => {\r\n                // }, error => console.error(error)); \r\n            }else {\r\n                item.type._links.self.href=item.type._links.self.href.split(\"{\")[0]\r\n                item.substituteRelation('type', item.type).subscribe(result => {\r\n                }, error => console.error(error));\r\n                item.type = item.type._links.self.href\r\n            }\r\n\r\n            if(item.roles){\r\n                let roles = [...item.roles];\r\n                delete item.roles;\r\n                item.substituteAllRelation('roles',roles).subscribe(result => {\r\n                }, error => console.error(error));\r\n            }\r\n\r\n            result = this.http.put(item._links.self.href, item);            \r\n        } else {\r\n            if(item.cartography){\r\n                item.cartography = item.cartography._links.self.href\r\n            }\r\n            if(item.connection){\r\n                item.connection = item.connection._links.self.href\r\n            }\r\n            if(item.service){\r\n                item.service = item.service._links.self.href\r\n            }\r\n            if(item.ui){\r\n                item.ui = item.ui._links.self.href\r\n            }\r\n            if(item.group){\r\n                item.group = item.group._links.self.href\r\n            }\r\n            if(item.type){\r\n                item.type = item.type._links.self.href\r\n            }\r\n            result = this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API), item);\r\n        }\r\n        return result;\r\n    }\r\n\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Task type model\r\n */\r\nexport class TaskType extends Resource {\r\n  /** name*/  \r\n  public name: string;\r\n\r\n}\r\n","import { TaskType } from './task-type.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** TaskType manager service */\r\n@Injectable()\r\nexport class TaskTypeService extends RestService<TaskType> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CONNECTION_API = 'task-types';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TaskType, \"task-types\", injector);\r\n  }\r\n  \r\n  /** remove task type*/\r\n  remove(item: TaskType) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save task type*/\r\n  save(item: TaskType): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Task group model\r\n */\r\nexport class TaskGroup extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** name*/  \r\n  public name: string;\r\n\r\n}\r\n","import { TaskGroup } from './task-group.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Task group manager service */\r\n@Injectable()\r\nexport class TaskGroupService extends RestService<TaskGroup> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CONNECTION_API = 'task-groups';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TaskGroup, \"task-groups\", injector);\r\n  }\r\n  \r\n  /** remove task group*/\r\n  remove(item: TaskGroup) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save task group*/\r\n  save(item: TaskGroup): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Task} from './task.model';  \r\n/**\r\n * Task parameter model\r\n */\r\nexport class TaskParameter extends Resource {\r\n  /** name*/  \r\n  public name: string;\r\n  \r\n  /** type*/\r\n  public type: string;\r\n    \r\n  /** value*/\r\n  public value: string;\r\n  \r\n  /** order*/  \r\n  public order: Number;\r\n  \r\n  /** task*/  \r\n  public task:Task;\r\n\r\n}\r\n","import { TaskParameter } from './task-parameter.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Task parameter manager service */\r\n@Injectable() \r\nexport class TaskParameterService extends RestService<TaskParameter> {\r\n  \r\n\r\n  /** API resource path */\r\n  public TASK_PARAMETER_API = 'task-parameters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TaskParameter, \"task-parameters\", injector);\r\n  }\r\n  \r\n  /** remove task parameter*/\r\n  remove(item: TaskParameter) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save task parameter*/\r\n  save(item: TaskParameter): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.task !=null){\r\n          item.substituteRelation('task',item.task).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      \r\n    } else {\r\n      item.task = item.task._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TASK_PARAMETER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { Territory } from '../territory/territory.model';\r\nimport { Task } from './task.model';\r\n/**\r\n * Task availability model\r\n */\r\nexport class TaskAvailability extends Resource {\r\n  /** territory*/\r\n  public territory: Territory;\r\n  /** task*/\r\n  public task: Task;\r\n}\r\n","import { TaskAvailability } from './task-availability.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Task availability manager service */\r\n@Injectable() \r\nexport class TaskAvailabilityService extends RestService<TaskAvailability> {\r\n  \r\n\r\n  /** API resource path */\r\n  public TASK_AVAILABILITY_API = 'task-availabilities';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TaskAvailability, \"task-availabilities\", injector);\r\n  }\r\n  \r\n  /** remove task availability*/\r\n  remove(item: TaskAvailability) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save task availability*/\r\n  save(item: TaskAvailability): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.task !=null){\r\n          item.substituteRelation('task',item.task).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      if (item.territory !=null){\r\n          item.substituteRelation('territory',item.territory).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n    } else {\r\n      item.territory = item.territory._links.self.href;\r\n      item.task = item.task._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TASK_AVAILABILITY_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Task UI model\r\n */\r\nexport class TaskUI extends Resource {\r\n  /** name*/\r\n  public name: string;\r\n  \r\n  /** tooltip*/  \r\n  public tooltip: string;\r\n    \r\n  /** order*/ \r\n  public order: number;\r\n\r\n}\r\n","import { TaskUI } from './task-ui.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Task UI manager service */\r\n@Injectable()\r\nexport class TaskUIService extends RestService<TaskUI> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CONNECTION_API = 'task-uis';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TaskUI, \"task-uis\", injector);\r\n  }\r\n  \r\n  /** remove task UI*/\r\n  remove(item: TaskUI) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save task UI*/\r\n  save(item: TaskUI): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { Language } from './language.model';\r\n\r\n\r\n/** Task model */\r\nexport class Translation extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** id */\r\n  public element: number;\r\n  /** name */\r\n  public translation: string;\r\n  /** column */\r\n  public column: string;\r\n  /** name */\r\n  public language: Language;\r\n  /** name */\r\n  public languageName?: string;\r\n  /** name */\r\n  public languageShortname?: string;\r\n\r\n\r\n\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { Translation } from './translation.model';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TranslationService extends RestService<Translation> {\r\n\r\n  /** API resource path */\r\n  public TRANSLATION_API = 'translations';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Translation, \"translations\", injector);\r\n  }\r\n  \r\n  /** remove translation*/\r\n  remove(item: Translation) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save translation*/\r\n  save(item: Translation): Observable<any> {\r\n    let result: Observable<Object>;\r\n\r\n    let language:any = {}\r\n    language._links = {};\r\n    language._links.self = {};\r\n    language._links.self.href = \"\";\r\n\r\n    if (item.language != null) {\r\n      language = item.language;\r\n      if (typeof item.language._links != 'undefined') {\r\n        item.language = item.language._links.self.href;\r\n      } \r\n    }\r\n\r\n    if (item._links!=null) {\r\n      delete item.language;\r\n      // if (language._links.self.href == '') {\r\n      //   item.deleteRelation('language', language).subscribe(result => {\r\n      //   }, error => console.error(error));\r\n\r\n      // } else {\r\n      //   item.substituteRelation('language', language).subscribe(result => {\r\n      //   }, error => console.error(error));\r\n      // }\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TRANSLATION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n\r\n\r\n/** Task model */\r\nexport class Language extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name */\r\n  public shortname: string;\r\n  /** name */\r\n  public name: string;\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { Language } from './language.model';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LanguageService extends RestService<Language> {\r\n\r\n  /** API resource path */\r\n  public LANGUAGES_API = 'languages';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Language, \"languages\", injector);\r\n  }\r\n  \r\n  /** remove translation*/\r\n  remove(item: Language) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save translation*/\r\n  save(item: Language): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.LANGUAGES_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Connection} from '../connection/connection.model';\r\nimport {ServiceParameter} from './service-parameter.model';\r\n/**\r\n * Service model\r\n */\r\nexport class Service extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name*/\r\n  public name: string;\r\n    \r\n  /** type*/\r\n  public type: string;\r\n\r\n  /** url*/  \r\n  public serviceURL: string;\r\n\r\n  /** projections*/  \r\n  public supportedSRS: string;\r\n  \r\n  /** legend*/\r\n  public legend: string;\r\n\r\n  /** infoUrl*/  \r\n  public infoUrl: string;\r\n  \r\n  /** system created date*/\r\n  public createdDate: any;\r\n\r\n  /** connection*/\r\n  public connection: Connection;\r\n  \r\n  /** parameters*/  \r\n  public parameters: ServiceParameter[];\r\n\r\n  /** whether service is blocked*/\r\n  public blocked: boolean;\r\n}\r\n","import { Service } from './service.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Service manager service */\r\n@Injectable()\r\nexport class ServiceService extends RestService<Service> {\r\n\r\n  /** API resource path */\r\n  public SERVICE_API = 'services';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Service, \"services\", injector);\r\n  }\r\n  \r\n  /** remove service*/\r\n  remove(item: Service) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save service*/\r\n  save(item: Service): Observable<any> {\r\n    let result: Observable<Object>;\r\n    let serviceConnection = item.connection;\r\n\r\n    if (item.connection!=null){\r\n        if (typeof item.connection._links!= 'undefined') { \r\n            item.connection = item.connection._links.self.href;\r\n        } else {\r\n            serviceConnection._links= {};\r\n            serviceConnection._links.self = {};\r\n            serviceConnection._links.self.href=\"\";\r\n        }        \r\n     }\r\n\r\n    if (item._links!=null) {     \r\n      result = this.http.put(item._links.self.href, item);       \r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.SERVICE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n\r\n/**\r\n * Service model\r\n */\r\nexport class ConfigurationParameter extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name*/\r\n  public name: string;\r\n    \r\n  /** value*/\r\n  public value: string;\r\n\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { ConfigurationParameter } from './configuration-parameters.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ConfigurationParametersService extends RestService<ConfigurationParameter> {\r\n\r\n  /** API resource path */\r\n  public CONFIGURATION_PARAMETERS_API = 'configuration-parameters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(ConfigurationParameter, \"configuration-parameters\", injector);\r\n  }\r\n  \r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Service} from './service.model'; \r\n/**\r\n * Service parameter model\r\n */\r\nexport class ServiceParameter extends Resource {\r\n  /** name*/\r\n  public name: string;\r\n  \r\n  /** type*/\r\n  public type: string;\r\n    \r\n  /** value*/  \r\n  public value: string;\r\n  \r\n  /** service*/\r\n  public service: Service;\r\n\r\n}\r\n","import { ServiceParameter } from './service-parameter.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Service parameter manager service */\r\n@Injectable() \r\nexport class ServiceParameterService extends RestService<ServiceParameter> {\r\n\r\n  /** API resource path */\r\n  public SERVICE_PARAMETER_API = 'service-parameters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(ServiceParameter, \"service-parameters\", injector);\r\n  }\r\n  \r\n  /** remove service parameter*/\r\n  remove(item: ServiceParameter) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save service parameter*/\r\n  save(item: ServiceParameter): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      \r\n      if (item.service !=null){\r\n          let service =  item.service;\r\n          delete item.service;\r\n          item.substituteRelation('service',service).subscribe(result => {            \r\n          \r\n      }, error => console.error(error));\r\n      }\r\n      result = this.http.put(item._links.self.href, item);\r\n      \r\n      \r\n    } else {\r\n      item.service = item.service._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.SERVICE_PARAMETER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Capabilitie model\r\n */\r\nexport class Capabilitie extends Resource {\r\n  /** url */\r\n  public url: string;\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { Capabilitie } from './capabilitie.model';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CapabilitiesService extends RestService<Capabilitie>  {\r\n\r\n  /** API resource path */\r\n  public CAPABILITIES_API = 'helpers/capabilities?url=';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Capabilitie, \"helpers/capabilities?url=\", injector);\r\n  }\r\n\r\n    /** save service*/\r\n    getInfo(url: string): Observable<any> {\r\n      let result: Observable<Object>;\r\n      if(url){\r\n        const headerDict = {\r\n          'Charset': 'UTF-8'\r\n        }\r\n        \r\n        const requestOptions = {                                                                                                                                                                                 \r\n          headers: new HttpHeaders(headerDict), \r\n        };\r\n        let finalUrl = this.resourceService.getResourceUrl(this.CAPABILITIES_API);\r\n        finalUrl = finalUrl.concat(url);\r\n        console.log(finalUrl);\r\n        result = this.http.get(finalUrl, requestOptions);\r\n      }\r\n      return result;\r\n \r\n    }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Info model\r\n */\r\nexport class Info extends Resource {\r\n  /** url */\r\n  public url: string;\r\n}","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { Info } from './info.model';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GetInfoService extends RestService<Info>  {\r\n\r\n  /** API resource path */\r\n  public INFO_API = 'helpers/feature-type?url=';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Info, \"helpers/feature-type?url=\", injector);\r\n  }\r\n\r\n    /** save service*/\r\n    getInfo(url: string): Observable<any> {\r\n      let result: Observable<Object>;\r\n      if(url){\r\n        const headerDict = {\r\n          'Charset': 'UTF-8'\r\n        }\r\n        \r\n        const requestOptions = {                                                                                                                                                                                 \r\n          headers: new HttpHeaders(headerDict), \r\n        };\r\n        let finalUrl = this.resourceService.getResourceUrl(this.INFO_API);\r\n        finalUrl = finalUrl.concat(url);\r\n        console.log(finalUrl);\r\n        result = this.http.get(finalUrl, requestOptions);\r\n      }\r\n      return result;\r\n \r\n    }\r\n  \r\n}","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Service} from '../service/service.model';\r\nimport {Connection} from '../connection/connection.model';\r\nimport {CartographyAvailability} from './cartography-availability.model';\r\nimport { CartographyStyle } from './cartography-style.model';\r\n/**\r\n * Cartography\r\n */\r\nexport class Cartography extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** name*/\r\n  public name: string;\r\n  \r\n  /** type*/\r\n  public type : string;\r\n\r\n  /** service*/\r\n  public service : Service;\r\n\r\n  /** order*/  \r\n  public order: Number; \r\n\r\n  /** description*/  \r\n  public description: String;\r\n\r\n  /** source*/  \r\n  public source: String;\r\n\r\n  /** whether cartography is blocked*/\r\n  public blocked: boolean;  \r\n\r\n  /** apply filter to get map*/\r\n  public applyFilterToGetMap: boolean;  \r\n\r\n  /** apply filter to get feature information*/\r\n  public applyFilterToGetFeatureInfo: boolean;  \r\n\r\n  /** apply filter to spatial selection*/\r\n  public applyFilterToSpatialSelection: boolean;  \r\n\r\n  /** selectable layers*/\r\n  public selectableLayers: string[];\r\n\r\n  /** transparency*/ \r\n  public transparency: Number;\r\n\r\n  /** whether layer is queryable*/  \r\n  public queryable: Boolean;\r\n\r\n  /** whether layer is queryable*/ \r\n  public queryAct: Boolean;\r\n\r\n  /** query layer*/\r\n  public queryLay: string;\r\n\r\n  /** system created date*/\r\n  public createdDate: any;\r\n\r\n  /** minimum scale*/\r\n  public minimumScale: Number;\r\n\r\n  /** maximum scale*/\r\n  public maximumScale: Number;\r\n\r\n  /** layers*/  \r\n  public layers: string;\r\n  \r\n  /** connection*/\r\n  public connection: Connection;\r\n\r\n  /** queryableFeatureEnabled */\r\n  public queryableFeatureEnabled: Boolean;\r\n\r\n    /** queryableLayers */\r\n  public queryableFeatureAvailable: Boolean;\r\n\r\n    /** queryableLayers */\r\n  public queryableLayers: string[];\r\n\r\n  /** availabilities*/\r\n  public availabilities : CartographyAvailability[];\r\n\r\n  /** whether layer is queryable*/ \r\n  public selectableFeatureEnabled: Boolean;\r\n\r\n  /** selection layer*/\r\n  public selectionLayer: string;\r\n\r\n  /** selection service*/  \r\n  public selectionService: Service;\r\n\r\n  /** legend tip*/  \r\n  public legendType: string;\r\n  \r\n  /** legend url*/\r\n  public legendURL: string;\r\n\r\n  /** whether layer is editable*/\r\n  public editable: Boolean;\r\n\r\n  /** metadata URL*/\r\n  public metadataURL: string;\r\n\r\n  /** metadata URL*/\r\n  public datasetURL: string;\r\n\r\n  /** whether layer is themable*/\r\n  public thematic: Boolean;\r\n  \r\n  /** geometry type*/\r\n  public geometryType: string;\r\n\r\n  public styles?: CartographyStyle[]\r\n\r\n  public useAllStyles: boolean;\r\n  \r\n\r\n}\r\n","import { Cartography } from './cartography.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { RestService } from '../angular-hal/src/lib/rest.service';\r\nimport { Connection } from '../connection/connection.model';\r\nimport { Service } from '../service/service.model';\r\n\r\n/** Cartography manager service */\r\n@Injectable()\r\nexport class CartographyService extends RestService<Cartography> {\r\n\r\n  /** API resource path */\r\n  public CARTOGRAPHY_API = 'cartographies';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector, private http: HttpClient) {\r\n    super(Cartography, \"cartographies\", injector);\r\n  }\r\n\r\n  /** remove cartography*/\r\n  remove(item: Cartography) {\r\n    return this.http.delete(item._links.self.href);\r\n\r\n  }\r\n\r\n  /** save cartography*/\r\n  save(item: Cartography): Observable<any> {\r\n    let result: Observable<Object>;\r\n\r\n    let cartographyConnection:any={};\r\n    cartographyConnection._links = {};\r\n    cartographyConnection._links.self = {};\r\n    cartographyConnection._links.self.href = \"\";\r\n     \r\n    let cartographyService:any={};\r\n    cartographyService._links = {};\r\n    cartographyService._links.self = {};\r\n    cartographyService._links.self.href = \"\";\r\n    \r\n    let cartographySelectionService:any = {};\r\n    cartographySelectionService._links = {};\r\n    cartographySelectionService._links.self = {};\r\n    cartographySelectionService._links.self.href = \"\";\r\n\r\n    if (item.service != null) {\r\n      cartographyService=  item.service;\r\n      if (typeof item.service._links != 'undefined') {\r\n        item.service = item.service._links.self.href;\r\n      }\r\n    }\r\n\r\n    if (item.selectionService != null) {\r\n      cartographySelectionService = item.selectionService\r\n      if (typeof item.selectionService._links != 'undefined') {\r\n        item.selectionService = item.selectionService._links.self.href;\r\n      }\r\n    }\r\n\r\n    if (item.connection != null) {\r\n      cartographyConnection=  item.connection;\r\n      if (typeof item.connection._links != 'undefined') {\r\n        item.connection = item.connection._links.self.href;\r\n      }\r\n    }\r\n\r\n    if (item._links != null) {\r\n\r\n      //update relations\r\n      delete item.connection;\r\n      delete item.service;\r\n      delete item.selectionService;\r\n\r\n      // if (cartographyConnection._links.self.href == '' && cartographyConnection) {\r\n      //   item.deleteRelation('spatialSelectionConnection', cartographyConnection).subscribe(result => {\r\n      //   }, error => console.error(error));\r\n      // } else {\r\n      //   item.substituteRelation('spatialSelectionConnection', cartographyConnection).subscribe(result => {\r\n      //   }, error => console.error(error));\r\n      // }\r\n\r\n      if (cartographyService._links.self.href == '') {\r\n        item.deleteRelation('service', cartographyService).subscribe(result => {\r\n        }, error => console.error(error));\r\n      } else {\r\n        item.substituteRelation('service', cartographyService).subscribe(result => {\r\n        }, error => console.error(error));\r\n      }\r\n\r\n      if (cartographySelectionService._links.self.href == '' && cartographySelectionService) {\r\n        item.deleteRelation('spatialSelectionService', cartographySelectionService).subscribe(result => {\r\n        }, error => console.error(error));\r\n      } else {\r\n        item.substituteRelation('spatialSelectionService', cartographySelectionService).subscribe(result => {\r\n        }, error => console.error(error));\r\n      }\r\n\r\n      result = this.http.put(item._links.self.href, item);\r\n\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_API), item);\r\n    }\r\n    return result;\r\n  }\r\n\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Cartography} from './cartography.model';\r\nimport {Role} from '../role/role.model';\r\n/**\r\n * Cartography group\r\n */\r\nexport class CartographyGroup extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** name*/\r\n  public name: string;\r\n  /** type*/\r\n  public type: string;\r\n  /** members*/\r\n  public members: Cartography[];\r\n  /** roles*/\r\n  public roles: Role[];\r\n\r\n}\r\n","import { CartographyGroup } from './cartography-group.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** CartographyGroup manager service */\r\n@Injectable()\r\nexport class CartographyGroupService extends RestService<CartographyGroup> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CARTOGRAPHY_GROUP_API ='cartography-groups';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CartographyGroup, \"cartography-groups\", injector);\r\n  }\r\n  \r\n  /** remove cartography group*/\r\n  remove(item: CartographyGroup) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save cartography group*/\r\n  save(item: CartographyGroup): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_GROUP_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { Territory } from '../territory/territory.model';\r\nimport { Cartography } from './cartography.model';\r\n/**\r\n * Cartography availability model\r\n */\r\nexport class CartographyAvailability extends Resource {\r\n  /** territory*/\r\n  public territory: Territory;\r\n  \r\n  /** system created date*/\r\n  public createdDate: any;\r\n  \r\n  /** cartography*/\r\n  public cartography: Cartography;\r\n}\r\n","import { CartographyAvailability } from './cartography-availability.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** CartographyAvailability manager service */\r\n@Injectable() \r\nexport class CartographyAvailabilityService extends RestService<CartographyAvailability> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CARTOGRAPHY_AVAILABILITY_API = 'cartography-availabilities';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CartographyAvailability, \"cartography-availabilities\", injector);\r\n  }\r\n  \r\n  /** remove cartography availability*/\r\n  remove(item: CartographyAvailability) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save cartography availability*/\r\n  save(item: CartographyAvailability): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.cartography !=null){\r\n          item.substituteRelation('cartography',item.cartography).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      if (item.territory !=null){\r\n          item.substituteRelation('territory',item.territory).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n    } else {\r\n      item.territory = item.territory._links.self.href;\r\n      item.cartography = item.cartography._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_AVAILABILITY_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { TerritoryType } from '../territory/territory-type.model';\r\nimport { Cartography } from './cartography.model';\r\n/**\r\n * Cartography availability model\r\n */\r\nexport class CartographyFilter extends Resource {\r\n \r\n  /** name*/\r\n  public name: string;\r\n\r\n  /** required */\r\n  public required: boolean;\r\n\r\n  /** type*/\r\n  public type: string;\r\n\r\n  /** Territorial level. */\r\n  public territorialLevel: TerritoryType;\r\n  \r\n  /** column */\r\n  public column: string;\r\n\r\n  /** values*/  \r\n  public values: string;\r\n\r\n  /** value*/  \r\n  public valueType: string;\r\n\r\n  /** cartography*/\r\n  public cartography: Cartography;\r\n\r\n\r\n}\r\n","import { CartographyFilter } from './cartography-filter.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** CartographyFilter manager service */\r\n@Injectable() \r\nexport class CartographyFilterService extends RestService<CartographyFilter> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CARTOGRAPHY_FILTER_API = 'cartography-filters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CartographyFilter, \"cartography-filters\", injector);\r\n  }\r\n  \r\n  /** remove cartography filter*/\r\n  remove(item: CartographyFilter) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save cartography availability*/\r\n  save(item: CartographyFilter): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.cartography !=null){\r\n          item.substituteRelation('cartography',item.cartography).subscribe(result => {\r\n      }, error => console.error(error));\r\n      }\r\n\r\n      if(item.territorialLevel != null && item.territorialLevel != undefined ){\r\n        item.substituteRelation('territorialLevel',item.territorialLevel).subscribe(result => {\r\n        }, error => console.error(error));\r\n      }\r\n     \r\n    } else {\r\n      \r\n      item.cartography = item.cartography._links.self.href;\r\n      item.territorialLevel=item.territorialLevel._links.self.href;\r\n      \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_FILTER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Cartography} from './cartography.model'; \r\n/**\r\n * Service parameter model\r\n */\r\nexport class CartographyParameter extends Resource {\r\n  /** name*/\r\n  public name: string;\r\n  \r\n  /** type*/\r\n  public type: string;\r\n    \r\n  /** value*/  \r\n  public value: string;\r\n  \r\n  /** order*/  \r\n  public order: string;\r\n\r\n  /** cartography*/\r\n  public cartography: Cartography;\r\n\r\n}\r\n","import { CartographyParameter } from './cartography-parameter.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Service parameter manager service */\r\n@Injectable() \r\nexport class CartographyParameterService extends RestService<CartographyParameter> {\r\n\r\n  /** API resource path */\r\n  public CARTOGRAPHY_PARAMETER_API = 'cartography-parameters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CartographyParameter, \"cartography-parameters\", injector);\r\n  }\r\n  \r\n  /** remove service parameter*/\r\n  remove(item: CartographyParameter) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save service parameter*/\r\n  save(item: CartographyParameter): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      \r\n      if (item.cartography !=null){\r\n          let cartography =  item.cartography;\r\n          delete item.cartography;\r\n          item.substituteRelation('cartography',cartography).subscribe(result => {            \r\n          \r\n      }, error => console.error(error));\r\n      }\r\n      result = this.http.put(item._links.self.href, item);\r\n      \r\n      \r\n    } else {\r\n      item.cartography = item.cartography._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_PARAMETER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import { CartographyParameter } from './cartography-parameter.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Service parameter manager service */\r\n@Injectable() \r\nexport class CartographySpatialSelectionParameterService extends RestService<CartographyParameter> {\r\n\r\n  /** API resource path */\r\n  public CARTOGRAPHY_SPATIAL_SELECTION_PARAMETER_API = 'cartography-spatial-selection-parameters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CartographyParameter, \"cartography-spatial-selection-parameters\", injector);\r\n  }\r\n  \r\n  /** remove service parameter*/\r\n  remove(item: CartographyParameter) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save service parameter*/\r\n  save(item: CartographyParameter): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      \r\n      if (item.cartography !=null){\r\n          let cartography =  item.cartography;\r\n          delete item.cartography;\r\n          item.substituteRelation('cartography',cartography).subscribe(result => {            \r\n          \r\n      }, error => console.error(error));\r\n      }\r\n      result = this.http.put(item._links.self.href, item);\r\n      \r\n      \r\n    } else {\r\n      item.cartography = item.cartography._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_SPATIAL_SELECTION_PARAMETER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Cartography} from './cartography.model'; \r\n/**\r\n * Cartography style model\r\n */\r\nexport class CartographyStyle extends Resource {\r\n  /** name*/\r\n  public name: string;\r\n  \r\n  /** title*/\r\n  public title: string;\r\n    \r\n  /** description*/  \r\n  public description: string;\r\n  \r\n  /** format*/  \r\n  public format: string;\r\n  \r\n  /** width*/  \r\n  public width: number;\r\n  \r\n  /** height*/  \r\n  public height: number;\r\n  \r\n  /** url*/  \r\n  public url: string;\r\n\r\n  /** cartography*/\r\n  public cartography: Cartography;\r\n\r\n  public defaultStyle: boolean;\r\n\r\n  public legendURL: any;\r\n  \r\n\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { CartographyStyle } from './cartography-style.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CartographyStyleService extends RestService<CartographyStyle> {\r\n\r\n /** API resource path */\r\n  public CARTOGRAPHY_STYLES_API = 'cartography-styles';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CartographyStyle, \"cartography-styles\", injector);\r\n  }\r\n  \r\n  /** remove service parameter*/\r\n  remove(item: CartographyStyle) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save service parameter*/\r\n  save(item: CartographyStyle): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      \r\n      if (item.cartography !=null){\r\n          let cartography =  item.cartography;\r\n          delete item.cartography;\r\n          item.substituteRelation('cartography',cartography).subscribe(result => {            \r\n          \r\n      }, error => console.error(error));\r\n      }\r\n      result = this.http.put(item._links.self.href, item);\r\n      \r\n      \r\n    } else {\r\n      item.cartography = item.cartography._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_STYLES_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {CartographyGroup} from './cartography-group.model';\r\n/**\r\n * Background model\r\n */\r\nexport class Background extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  \r\n  /** name*/\r\n  public name: string;\r\n\r\n  /** description*/\r\n  public description: string;\r\n\r\n  /** image */\r\n  public image: string;\r\n\r\n  /** whether background is active*/\r\n  public active: Boolean;\r\n  \r\n  /** system created date*/\r\n  public createdDate: any;\r\n\r\n  /** cartography group*/\r\n  public cartographyGroup: CartographyGroup;\r\n}\r\n","import { Background } from './background.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Background manager service */\r\n@Injectable()\r\nexport class BackgroundService extends RestService<Background> {\r\n\r\n  /** API resource path */\r\n  public BACKGROUND_API = 'backgrounds';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Background, \"backgrounds\", injector);\r\n  }\r\n  \r\n  /** remove background*/\r\n  remove(item: Background) {\r\n    return this.http.delete(item._links.self.href);   \r\n  }\r\n  \r\n  /** save background*/\r\n  save(item: Background): Observable<any> {\r\n    let result: Observable<Object>;\r\n    let backgroundCartographyGroup:any = {}         \r\n    \r\n    backgroundCartographyGroup._links= {};\r\n    backgroundCartographyGroup._links.self = {};\r\n    backgroundCartographyGroup._links.self.href=\"\";\r\n    item.cartographyGroup;\r\n\r\n    if (item.cartographyGroup!=null){\r\n      backgroundCartographyGroup = item.cartographyGroup;\r\n        if (typeof item.cartographyGroup._links!= 'undefined') { \r\n            item.cartographyGroup = item.cartographyGroup._links.self.href;\r\n        }    \r\n     }\r\n\r\n    if (item._links!=null) {\r\n      //update relations\r\n      delete item.cartographyGroup;        \r\n      \r\n      if (backgroundCartographyGroup._links.self.href==''){\r\n         item.deleteRelation('cartographyGroup',backgroundCartographyGroup).subscribe(result => {     \r\n\r\n          \r\n             }, error => console.error(error));\r\n          \r\n      } else {\r\n          item.substituteRelation('cartographyGroup',backgroundCartographyGroup).subscribe(result => {\r\n         \r\n\r\n      \r\n            }, error => console.error(error));           \r\n       } \r\n       \r\n         \r\n      result = this.http.put(item._links.self.href, item);\r\n\r\n           \r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.BACKGROUND_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {TreeNode} from './tree-node.model';\r\nimport {Role} from '../role/role.model';    \r\n/**\r\n * Tree model\r\n */\r\nexport class Tree extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name */\r\n  public name: string;\r\n  /** description */\r\n  public description: string;\r\n  /** image */\r\n  public image: string;\r\n  /** nodes */\r\n  public nodes: TreeNode[];\r\n  /** available roles */\r\n  public availableRoles : Role[];\r\n\r\n}\r\n","import { Tree } from './tree.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Tree manager service */\r\n@Injectable()\r\nexport class TreeService extends RestService<Tree> {\r\n  \r\n  /** API resource path */\r\n  public TREE_API = 'trees';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Tree, \"trees\", injector);\r\n  }\r\n  \r\n  /** remove tree*/\r\n  remove(item: Tree) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save tree*/\r\n  save(item: Tree): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TREE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Cartography} from '../cartography/cartography.model';\r\nimport {Tree} from './tree.model';\r\n/**\r\n * Tree node model\r\n */\r\nexport class TreeNode extends Resource {\r\n  /** name */\r\n  public name: string;\r\n  /** tooltip*/\r\n  public tooltip: string;\r\n  /** description*/\r\n  public description: string;\r\n  /** datasetURL*/\r\n  public datasetURL: string;\r\n  /** metadataURL*/\r\n  public metadataURL: string;\r\n  /** order*/\r\n  public order : number;\r\n  /** whether tree node is active*/\r\n  public active: boolean;\r\n  /** parent tree node */\r\n  public radio: boolean;\r\n  /** parent tree node */\r\n  public parent: TreeNode;\r\n  /** displayed cartography */  \r\n  public cartography: Cartography;\r\n  /** tree */  \r\n  public tree: Tree;\r\n  /** filterGetFeatureInfo */  \r\n  public filterGetFeatureInfo: boolean;\r\n  /** filterGetMap */  \r\n  public filterGetMap: boolean;\r\n  /** filterSelectable */  \r\n  public filterSelectable: boolean;\r\n  /** style */  \r\n  public style: string;\r\n  \r\n\r\n}\r\n","import { TreeNode } from './tree-node.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Tree node manager service */\r\n@Injectable() \r\nexport class TreeNodeService extends RestService<TreeNode> {\r\n  \r\n  /** API resource path */\r\n  public TREE_NODE_API = 'tree-nodes';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TreeNode, \"tree-nodes\", injector);\r\n  }\r\n  \r\n  /** remove tree node*/\r\n  remove(item: TreeNode) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save tree node*/\r\n  save(item: TreeNode): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      const itemTree = item.tree;\r\n      const itemCartography = item.cartography;\r\n      const itemParent = item.parent;\r\n        \r\n      delete item.tree;\r\n      delete item.cartography;\r\n      delete item.parent;\r\n        \r\n      result = this.http.put(item._links.self.href, item);\r\n      if (itemTree !=null){\r\n          item.substituteRelation('tree',itemTree).subscribe(result => {\r\n      \r\n          }, error => console.error(error));\r\n      }\r\n      if (itemCartography !=null){\r\n          item.substituteRelation('cartography',itemCartography).subscribe(result => {\r\n      \r\n          }, error => console.error(error));\r\n      }\r\n      if (itemParent !=null){\r\n          item.substituteRelation('parent',itemParent).subscribe(result => {\r\n      \r\n          }, error => console.error(error));\r\n      }\r\n      else{\r\n          let treeNodeParent:any = {};\r\n          treeNodeParent._links= {};\r\n          treeNodeParent._links.self = {};\r\n          treeNodeParent._links.self.href=\"\";\r\n          item.deleteRelation('parent', treeNodeParent).subscribe(result => {\r\n        }, error => console.error(error));\r\n      }\r\n      \r\n    } else {\r\n      if (item.tree && item.tree._links && item.tree._links.self) {\r\n        item.tree = item.tree._links.self.href;\r\n      }\r\n      if (item.cartography && item.cartography._links && item.cartography._links.self) {\r\n        item.cartography = item.cartography._links.self.href;\r\n      }      \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TREE_NODE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Tree} from '../tree/tree.model';\r\nimport {Role} from '../role/role.model';\r\nimport {CartographyGroup} from '../cartography/cartography-group.model';\r\nimport {ApplicationParameter} from './application-parameter.model';\r\nimport {ApplicationBackground} from './application-background.model';\r\n\r\n//FIXME ensure application creation in admin app upon initialization (as it is done with Roles and default Users)\r\n/** Territorial appliction name */\r\nexport const TERRITORIAL_APP_NAME:string  = \"Aplicación Territorial\";\r\n\r\n/**\r\n * Application model\r\n */\r\nexport class Application extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  \r\n  /** name*/\r\n  public name: string;\r\n\r\n  /** type*/\r\n  public type: string;\r\n  \r\n  /** title*/\r\n  public title: string;\r\n  \r\n  /** theme*/\r\n  public theme: string;\r\n\r\n    \r\n  /** urlTemplate*/\r\n  public jspTemplate: string;\r\n  \r\n  \r\n  /** system created date*/\r\n  public createdDate: any;\r\n  \r\n  /** available roles*/\r\n  public availableRoles : Role[];\r\n  \r\n  /** trees*/\r\n  public trees : Tree[];\r\n  \r\n  /** scales (comma-separated values)*/\r\n  public scales: string[];\r\n  \r\n  /** projections(comma-separated EPSG codes)*/\r\n  public srs: string;\r\n  \r\n  /** whether application tree will auto refresh*/  \r\n  public treeAutoRefresh: Boolean;\r\n\r\n  /** backgrounds*/\r\n  public backgrounds: ApplicationBackground[];\r\n\r\n  /** situation map*/\r\n  public situationMap: CartographyGroup;    \r\n  \r\n  /** parameters*/\r\n  public parameters: ApplicationParameter[];\r\n}\r\n","import { Application } from './application.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { CartographyGroup } from '../cartography/cartography-group.model';\r\n\r\n/** Application manager service */\r\n@Injectable()\r\nexport class ApplicationService extends RestService<Application> {\r\n  \r\n\r\n  /** API resource path */\r\n  public APPLICATION_API = 'applications';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Application, \"applications\", injector);\r\n  }\r\n  \r\n  /** remove application*/\r\n  remove(item: Application) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save application*/\r\n  save(item: Application): Observable<any> {\r\n    let result: Observable<Object>;\r\n\r\n    let applicationSituationMap:any = {};\r\n    applicationSituationMap._links= {};\r\n    applicationSituationMap._links.self = {};\r\n    applicationSituationMap._links.self.href=\"\";\r\n     \r\n    if (item.situationMap!=null){\r\n        applicationSituationMap=item.situationMap;\r\n        if (typeof item.situationMap._links!= 'undefined') { \r\n            item.situationMap = item.situationMap._links.self.href;\r\n        }       \r\n     }\r\n\r\n    if (item._links!=null) {\r\n      //update relations\r\n      delete item.situationMap;        \r\n      \r\n      if (applicationSituationMap._links.self.href==''){\r\n         item.deleteRelation('situationMap',applicationSituationMap).subscribe(result => {     \r\n             \r\n             }, error => console.error(error));\r\n          \r\n      } else {\r\n          item.substituteRelation('situationMap',applicationSituationMap).subscribe(result => {\r\n         \r\n      \r\n            }, error => console.error(error));           \r\n       } \r\n       \r\n         \r\n      result = this.http.put(item._links.self.href, item);\r\n\r\n           \r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.APPLICATION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n    \r\n    \r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Background} from '../cartography/background.model';\r\nimport {Application} from './application.model'; \r\n\r\n/**\r\n * Application background model\r\n */\r\nexport class ApplicationBackground extends Resource {\r\n  /** order*/\r\n  public order: Number;\r\n  \r\n  /** background*/\r\n  public background: Background;\r\n  \r\n  /** application*/\r\n  public application: Application;\r\n\r\n}\r\n","import { ApplicationBackground } from './application-background.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Application background manager service */\r\n@Injectable() \r\nexport class ApplicationBackgroundService extends RestService<ApplicationBackground> {\r\n  \r\n\r\n  /** API resource path */\r\n  public APPLICATION_BACKGROUND_API ='application-backgrounds';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(ApplicationBackground, \"application-backgrounds\", injector);\r\n  }\r\n  \r\n  /** remove application background*/\r\n  remove(item: ApplicationBackground) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save application background*/\r\n  save(item: ApplicationBackground): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.application !=null){\r\n          item.substituteRelation('application',item.application).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      if (item.background !=null){\r\n          item.substituteRelation('background',item.background).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      \r\n    } else {\r\n      item.application = item.application._links.self.href;\r\n      item.background = item.background._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.APPLICATION_BACKGROUND_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Application} from './application.model'; \r\n\r\n/**\r\n * Application parameter model \r\n */\r\nexport class ApplicationParameter extends Resource {\r\n  /** name*/\r\n  public name: string;\r\n  \r\n  /** type*/\r\n  public type: string;\r\n  \r\n  /** value*/    \r\n  public value: string;\r\n  \r\n  /** application*/\r\n  public application: Application;\r\n\r\n}\r\n","import { ApplicationParameter } from './application-parameter.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Application parameter manager service */\r\n@Injectable() \r\nexport class ApplicationParameterService extends RestService<ApplicationParameter> {\r\n  \r\n\r\n  /** API resource path */\r\n  public APPLICATION_PARAMETER_API = 'application-parameters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(ApplicationParameter, \"application-parameters\", injector);\r\n  }\r\n  \r\n  /** remove application*/\r\n  remove(item: ApplicationParameter) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save application*/\r\n  save(item: ApplicationParameter): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.application !=null){\r\n          item.substituteRelation('application',item.application).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      \r\n    } else {\r\n      item.application = item.application._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.APPLICATION_PARAMETER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Connection model\r\n */\r\nexport class CodeList extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name*/\r\n  public codeListName: string;\r\n  /** type*/\r\n  public value: string;\r\n  /** user*/\r\n  public description: string;\r\n\r\n\r\n}\r\n","import { CodeList } from './codelist.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Connection manager service */\r\n@Injectable()\r\nexport class CodeListService extends RestService<CodeList> {\r\n  \r\n \r\n  /** API resource path */\r\n  public CODELIST_API = 'codelist-values';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CodeList, \"codelist-values\", injector);\r\n  }\r\n  \r\n  /** remove connection*/\r\n  remove(item: CodeList) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save connection*/\r\n  save(item: CodeList): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CODELIST_API ), item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, of } from 'rxjs';\r\n\r\n/** Layer model: configure Layer data and displaying configuration */ \r\nexport class Layer {\r\n  // Display data\r\n  /** layer visibility*/  \r\n  visibility: boolean = false;\r\n  /** Transparency (Transparent) 0-1 (Opaque)*/\r\n  opacity: number = 1.0;\r\n\r\n  // Configuration data\r\n  /** title*/\r\n  title: string;\r\n  \r\n  /** Id to index*/\r\n  id: any;\r\n  \r\n  /** Service Name*/\r\n  serverName: string;\r\n\r\n  /** Service attributions*/\r\n  attributions: string = \"\";\r\n\r\n  /** Request format (image/jpg, ...)*/\r\n  format: string;\r\n  \r\n  /** Request service version*/\r\n  version:string;\r\n\r\n  /** Service url*/\r\n  url: string;\r\n\r\n  /** Is base layer?*/\r\n  isBaseLayer: boolean;\r\n\r\n  /** Request layer name*/\r\n  name: string;\r\n\r\n  /** Is tiled?*/\r\n  tiled: boolean;\r\n  \r\n  /** Description*/\r\n  desc: string = \"\";\r\n  \r\n  /**  Transparent request parameter?*/\r\n  url_transparent: string = \"true\";\r\n  \r\n  /** Request Background parameter color (Hexa)*/\r\n  url_bgcolor: string = \"0x000000\";\r\n  \r\n  /** Request Exception URL*/\r\n  url_exception: string;\r\n  \r\n  /** Extent for tiled services*/\r\n  extent: any = null;\r\n\r\n  /** Tile height (if not defined, the default map is taken)*/\r\n  tileHeight?:number;\r\n  \r\n  /** Tile width (if not defined, the default map is taken)*/\r\n  tileWidth?:number;\r\n  \r\n  /** Enabled for GetFeatureInfo requests (enabled to use the viewer features information tool)*/\r\n  queryable?:boolean = false;\r\n  \r\n  /** Minimum scale*/\r\n  minimumScale?:number;\r\n  \r\n  /** Maximum scale*/\r\n  maximumScale?:number;\r\n  \r\n  /** List of available CRS*/\r\n  projections?:string;\r\n  \r\n  /** Features information URL*/\r\n  infoUrl?:string;\r\n  \r\n  /** Metadata information URL*/\r\n  metadataUrl?:string;\r\n  \r\n  /** Legend URL*/\r\n  legendUrl?:string;\r\n  \r\n  /** Array of OptionalParameter object that defines other optional parameter-value pairs for the request (TIME ...)*/\r\n  optionalParameters?:Array<OptionalParameter>;\r\n}\r\n\r\n/** Optional parameter model: configure parameter-value pair to add to the request layer URL */\r\nexport class OptionalParameter {\r\n  /** key*/key:string;\r\n  /** value*/value:string;\r\n}\r\n\r\n/** Layer configuration model: modify the configuration of a layer when interacting with the map (make visible, move the layer ...) */\r\nexport class LayerConfiguration {\r\n  /** Identifier to index*/id: any;\r\n  /** Layer visibility*/visibility: boolean;\r\n  /** Layer transparency (Transparent) 0-1 (Opaque)*/opacity: number;\r\n  /** Layer position*/position: number;\r\n}\r\n\r\n/** Layer group model*/\r\nexport class LayerGroup {\r\n  /** initially activated (all visible layers)*/active?:boolean;\r\n  /** group name*/name?: String;\r\n  /** group id*/id: String;\r\n  /** array of child Layers*/layers: Array<Layer>;\r\n}\r\n\r\n/** Map options configuration model*/\r\nexport class MapOptionsConfiguration {\r\n  /** scales*/scales?: string;\r\n  /** projections*/projections?: string;\r\n  /** minimum scale*/minScale?:number;\r\n  /** maximum scale*/maxScale?:number;\r\n  /** extent*/extent?:any;\r\n  /** maximum extent*/maxExtent?:any;\r\n  /** tile width*/tileWidth?:number;\r\n  /** tile height*/tileHeight?:number;\r\n  /** parameters*/parameters?: Array<OptionalParameter>\r\n}\r\n\r\n/** Map component status model*/\r\nexport class MapComponentStatus {\r\n    /** loaded?*/loaded: boolean = false;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\n/** Map configuration manager service*/\r\nexport class MapConfigurationManagerService {\r\n  private layersSubject = new BehaviorSubject([]);\r\n  private layers: Array<Layer> = null;\r\n\r\n  private baseLayerGroupsSubject = new BehaviorSubject([]);\r\n  private baseLayerGroups: Array<LayerGroup> = null;\r\n\r\n  private layerConfigurationSubject = new BehaviorSubject([]);\r\n\r\n  private addLayersSubject = new BehaviorSubject([]);\r\n  private removeLayersSubject = new BehaviorSubject([]);\r\n\r\n  private situationMapConfigurationSubject = new BehaviorSubject([]);\r\n  private mapOptionsConfigurationSubject = new BehaviorSubject([]);\r\n\r\n  private mapComponentStatusSubject = new BehaviorSubject([]);\r\n\r\n  /** constructor*/\r\n  constructor() { \r\n   //\r\n  }\r\n  \r\n  /** layer count */\r\n  count = 0;\r\n\r\n  /** configure the overlay layers of the map, by passing as a parameter an array of objects of type Layer objects defining the layers to load.*/\r\n  loadLayersConfiguration(configuration) {\r\n    if (this.layers != null) {\r\n      this.clearLayers(false);\r\n    }\r\n    this.setLayers(configuration);\r\n  }\r\n  \r\n  /**configure the base layers of the map by passing as a parameter an array of objects of type LayerGroup each of them with the corresponding Layer objects defining the layers to load.*/\r\n  loadBaseLayersConfiguration(configuration) {\r\n    this.setBaseLayerGroups(configuration);\r\n  }\r\n\r\n  /** get base layer groups*/\r\n  getBaseLayerGroups(): Observable<LayerGroup[]> {\r\n    return this.baseLayerGroupsSubject.asObservable();\r\n  }\r\n\r\n  /** set base layer groups*/\r\n  setBaseLayerGroups(groups:Array<LayerGroup>) {\r\n    this.baseLayerGroups = groups;\r\n    this.refreshBaseLayerGroups();\r\n  }\r\n\r\n  private refreshBaseLayerGroups() {\r\n    // Send the new values so that all subscribers are updated\r\n    this.baseLayerGroupsSubject.next(this.baseLayerGroups);\r\n  }\r\n\r\n  /** get layers*/\r\n  getLayers(): Observable<Layer[]> {\r\n    return this.layersSubject.asObservable();\r\n  }\r\n\r\n  /** remove all layers from map*/\r\n  clearLayers(refresh:boolean) {\r\n    while(this.layers.length) {\r\n      this.layers.pop();\r\n    }\r\n    if (refresh) {\r\n      this.refreshLayers();\r\n    }\r\n  }\r\n\r\n  /** set layers*/\r\n  setLayers(layers:Array<Layer>) {\r\n    this.layers = layers;\r\n    this.refreshLayers();\r\n  }\r\n\r\n  /** add given layer to map*/\r\n  addLayer(layer:Layer) {\r\n    this.layers.push(layer);\r\n    this.refreshAddLayers(layer);\r\n  }\r\n\r\n  /** add given layer to map at given index*/\r\n  addLayerAt(layer:Layer, index:number) {\r\n    if (index == 0) {\r\n      this.layers = [layer].concat(this.layers);\r\n    } else if (index >= this.layers.length) {\r\n      this.layers.push(layer);\r\n    } else {\r\n      this.layers = this.layers.slice(0, index)\r\n                    .concat([layer])\r\n                    .concat(this.layers.slice(index, this.layers.length));\r\n    }\r\n    this.refreshAddLayers(layer);\r\n    this.refreshLayerConfiguration(layer.id, null, null, index);\r\n  }\r\n\r\n  /** remove given layer from map*/\r\n  removeLayer(layer:Layer) {\r\n    var index = this.layers.indexOf(layer);\r\n    this.removeLayerIndex(index);\r\n  }\r\n\r\n  /** remove layer with given id from map */\r\n  removeLayerId(id) {\r\n    var index = -1;\r\n    for (var i = 0, iLen = this.layers.length; i < iLen; i++) {\r\n      if (this.layers[i].id == id) {\r\n        index = i;\r\n        break;\r\n      }\r\n    }\r\n    this.removeLayerIndex(index);\r\n  }\r\n\r\n  /** remove layer at given index from map */\r\n  removeLayerIndex(index:number) {\r\n    var layer = this.layers[index];\r\n    this.layers.splice(index, 1);\r\n    this.refreshRemoveLayers(layer);\r\n  }\r\n\r\n  /** refresh layers */\r\n  private refreshLayers() {\r\n    // Send the new values so that all subscribers are updated\r\n    this.layersSubject.next(this.layers);\r\n  }\r\n\r\n  /** Observable for layers added */\r\n  getLayersAdded(): Observable<Layer[]> {\r\n    return this.addLayersSubject.asObservable();\r\n  }\r\n\r\n  private refreshAddLayers(layer:Layer) {\r\n    // Send the new values so that all subscribers are updated\r\n    this.addLayersSubject.next([layer]);\r\n  }\r\n\r\n  getLayersRemoved(): Observable<Layer[]> {\r\n    return this.removeLayersSubject.asObservable();\r\n  }\r\n\r\n  private refreshRemoveLayers(layer:Layer) {\r\n    // Send the new values so that all subscribers are updated\r\n    this.removeLayersSubject.next([layer]);\r\n  }\r\n\r\n  getLayerConfigurationListener(): Observable<LayerConfiguration[]> {\r\n    return this.layerConfigurationSubject.asObservable();\r\n  }\r\n\r\n  private getLayerIndexById(id:string):number{\r\n    var index = -1;\r\n    for (var i = 0, iLen = this.layers.length; i < iLen; i++) {\r\n      if (this.layers[i].id == id) {\r\n        index = i;\r\n        break;\r\n      }\r\n    }\r\n    return index;\r\n  }\r\n  \r\n  /** move layer with given id to the given index*/\r\n  moveLayer(id, index) {\r\n    var layerIndex = this.getLayerIndexById(id);\r\n    if (layerIndex != -1) {\r\n      var layer = this.layers.splice(layerIndex, 1);\r\n      this.layers = \r\n        this.layers.slice(0, index)\r\n        .concat(layer)\r\n        .concat(this.layers.slice(index, this.layers.length));\r\n    }\r\n    this.refreshLayerConfiguration(id, null, null, index);\r\n  }\r\n\r\n  /** change visibility of layer with given id to the given value*/\r\n  changeLayerVisibility(id, visibility) {\r\n    this.refreshLayerConfiguration(id, null, visibility, null);\r\n  }\r\n\r\n  /** change opacity of layer with given id to the given value*/\r\n  changeLayerOpacity(id, opacity) {\r\n    this.refreshLayerConfiguration(id, opacity, null, null);\r\n  }\r\n\r\n  private refreshLayerConfiguration(id, opacity, visibility, position) {\r\n    // Send the new values so that all subscribers are updated\r\n    var layer = new LayerConfiguration();\r\n    layer.id = id;\r\n    layer.opacity = opacity;\r\n    layer.visibility = visibility;\r\n    layer.position = position;\r\n    this.layerConfigurationSubject.next([layer]);\r\n  }\r\n\r\n  getSituationMapConfigurationListener(): Observable<Layer[]> {\r\n    return this.situationMapConfigurationSubject.asObservable();\r\n  }\r\n\r\n  /** configure the situation map of the map component by passing as a parameter an array of objects of type LayerGroup, each of them with the corresponding Layer objects defining the layers to load as situation map.*/\r\n  loadSituationMapConfiguration(layers:Array<Layer>) {\r\n    // Send the new values so that all subscribers are updated\r\n    this.situationMapConfigurationSubject.next(layers);\r\n  }\r\n\r\n  getMapOptionsConfigurationListener(): Observable<MapOptionsConfiguration[]> {\r\n    return this.mapOptionsConfigurationSubject.asObservable();\r\n  }\r\n\r\n  /** load map options configuration */\r\n  loadMapOptionsConfiguration(configuration:MapOptionsConfiguration) {\r\n    // Send the new values so that all subscribers are updated\r\n    this.mapOptionsConfigurationSubject.next([configuration]);\r\n  }\r\n\r\n  getMapComponentStatusListener(): Observable<MapComponentStatus[]> {\r\n    return this.mapComponentStatusSubject.asObservable();\r\n  }\r\n  \r\n  /** set map component status */\r\n  setMapComponentStatus(status:MapComponentStatus) {\r\n    //Notify the map component status\r\n    this.mapComponentStatusSubject.next([status]);\r\n  }\r\n\r\n}\r\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { Principal } from './principal.service';\r\n\r\n/**\r\n * @whatItDoes Conditionally includes an HTML element if current user has any\r\n * of the authorities passed as the `expression`.\r\n *\r\n * @howToUse\r\n * ```\r\n *     <some-element *sitmunHasAnyAuthority=\"'ROLE_ADMIN'\">...</some-element>\r\n *\r\n *     <some-element *sitmunHasAnyAuthority=\"['ROLE_ADMIN', 'ROLE_USER']\">...</some-element>\r\n * ```\r\n */\r\n@Directive({\r\n    selector: '[sitmunHasAnyAuthority]'\r\n})\r\nexport class HasAnyAuthorityDirective {\r\n    \r\n    /** authorities to check */\r\n    public authorities: string[]; \r\n    \r\n    /** constructor */\r\n    constructor(private principal: Principal, private templateRef: TemplateRef<any>, private viewContainerRef: ViewContainerRef) {\r\n    }\r\n    \r\n    /** territory to check authorities*/\r\n    @Input() territory: string;\r\n    \r\n    /** Set whether current user has any of the given authorities */\r\n    @Input()\r\n    set sitmunHasAnyAuthority(value: string|string[]) {\r\n        this.authorities = typeof value === 'string' ? [ <string> value ] : <string[]> value;\r\n        this.updateView();\r\n        // Get notified each time authentication state changes.\r\n        this.principal.getAuthenticationState().subscribe((identity) => this.updateView());\r\n    }\r\n    \r\n    /** update view */\r\n    private updateView(): void {\r\n        if (this.territory){\r\n        this.principal.hasAnyAuthorityOnTerritory(this.authorities,this.territory).then((result) => {\r\n            this.viewContainerRef.clear();\r\n            if (result) {\r\n                this.viewContainerRef.createEmbeddedView(this.templateRef);\r\n            }\r\n        });\r\n\r\n        } else {\r\n        this.principal.hasAnyAuthority(this.authorities).then((result) => {\r\n            this.viewContainerRef.clear();\r\n            if (result) {\r\n                this.viewContainerRef.createEmbeddedView(this.templateRef);\r\n            }\r\n        });\r\n        }\r\n    }\r\n}\r\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { Principal } from './principal.service';\r\n\r\n/**\r\n * @whatItDoes Conditionally includes an HTML element if current user has any\r\n * of the authorities passed as the `expression`.\r\n *\r\n * @howToUse\r\n * ```\r\n *     <some-element *sitmunHasAnyAuthority=\"'ROLE_ADMIN'\">...</some-element>\r\n *\r\n *     <some-element *sitmunHasAnyAuthority=\"['ROLE_ADMIN', 'ROLE_USER']\">...</some-element>\r\n * ```\r\n */\r\n@Directive({\r\n    selector: '[sitmunHasAnyAuthorityOnTerritory]'\r\n})\r\nexport class HasAnyAuthorityOnTerritoryDirective {\r\n\r\n    /** authorities to check */\r\n    public authorities: string[]; \r\n\r\n    /** territory to check authorities*/\r\n    public territory: string; \r\n\r\n    /** constructor */\r\n    constructor(private principal: Principal, private templateRef: TemplateRef<any>, private viewContainerRef: ViewContainerRef) {\r\n    }\r\n    \r\n    /** Set whether current user has any of the given authorities on territory */\r\n    @Input()\r\n    set sitmunHasAnyAuthorityOnTerritory(opts: any) {\r\n\r\n        this.authorities = typeof opts.authorities === 'string' ? [ <string> opts.authorities ] : <string[]> opts.authorities;\r\n        this.territory = opts.territory;\r\n        this.updateView();\r\n        // Get notified each time authentication state changes.\r\n        this.principal.getAuthenticationState().subscribe((identity) => this.updateView());\r\n    }\r\n    \r\n    /** update view */\r\n    private updateView(): void {\r\n        if (this.territory){\r\n        this.principal.hasAnyAuthorityOnTerritory(this.authorities,this.territory).then((result) => {\r\n            this.viewContainerRef.clear();\r\n            if (result) {\r\n                this.viewContainerRef.createEmbeddedView(this.templateRef);\r\n            }\r\n        });\r\n\r\n        } else {\r\n        this.principal.hasAnyAuthority(this.authorities).then((result) => {\r\n            this.viewContainerRef.clear();\r\n            if (result) {\r\n                this.viewContainerRef.createEmbeddedView(this.templateRef);\r\n            }\r\n        });\r\n        }\r\n    }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { CommonModule } from '@angular/common';\r\nimport {HttpClientModule, HTTP_INTERCEPTORS, HttpClient} from '@angular/common/http';\r\nimport { RouterModule } from '@angular/router';\r\n//import { AngularHalModule } from '../../lib/angular-hal';\r\nimport {CodeListService} from './codelist/codelist.service';\r\nimport {TerritoryService} from './territory/territory.service';\r\nimport {TerritoryTypeService} from './territory/territory-type.service';\r\nimport {TerritoryGroupTypeService} from './territory/territory-group-type.service';\r\nimport {UserPositionService} from './user/user-position.service';\r\nimport {UserConfigurationService} from './user/user-configuration.service';\r\nimport {RoleService} from './role/role.service';\r\nimport {UserService} from './user/user.service';\r\nimport {ConnectionService} from './connection/connection.service';\r\nimport {TaskService} from './task/task.service';\r\nimport {TaskTypeService} from './task/task-type.service';\r\nimport {TaskGroupService} from './task/task-group.service';\r\nimport {TaskParameterService} from './task/task-parameter.service';\r\nimport {TaskAvailabilityService} from './task/task-availability.service';\r\nimport {TaskUIService} from './task/task-ui.service';\r\nimport {ServiceService} from './service/service.service';\r\nimport {ServiceParameterService} from './service/service-parameter.service';\r\nimport {CartographyService} from './cartography/cartography.service';\r\nimport {CartographyAvailabilityService} from './cartography/cartography-availability.service';\r\nimport {CartographyFilterService} from './cartography/cartography-filter.service';\r\nimport {CartographyGroupService} from './cartography/cartography-group.service';\r\nimport {CartographyParameterService} from './cartography/cartography-parameter.service';\r\nimport {BackgroundService} from './cartography/background.service';\r\nimport {TreeService} from './tree/tree.service';\r\nimport {TreeNodeService} from './tree/tree-node.service';\r\nimport {ApplicationService} from './application/application.service';\r\nimport {ApplicationParameterService} from './application/application-parameter.service';\r\nimport {ApplicationBackgroundService} from './application/application-background.service';\r\nimport { MapConfigurationManagerService } from './map/map-configuration-manager.service';\r\nimport { AuthService } from './auth/auth.service';\r\nimport { Principal } from './auth/principal.service';\r\nimport { AuthInterceptor } from './auth/auth.interceptor';\r\nimport { AuthExpiredInterceptor } from './auth/auth-expired.interceptor';\r\nimport { HasAnyAuthorityDirective } from './auth/has-any-authority.directive';\r\nimport { HasAnyAuthorityOnTerritoryDirective } from './auth/has-any-authority-on-territory.directive';\r\nimport { LoginService } from './auth/login.service';\r\nimport { AccountService } from './account/account.service';\r\nimport {TranslateHttpLoader} from '@ngx-translate/http-loader';\r\nimport {TranslateLoader, TranslateModule} from '@ngx-translate/core';\r\nimport { TranslationService } from './translation/translation.service';\r\nimport { LanguageService } from './translation/language.service';\r\nimport { DashboardService } from './dashboard/dashboard.service';\r\nimport { CapabilitiesService } from './capabilities/capabilities.service';\r\nimport { ConfigurationParametersService } from './configuration/configuration-parameters.service';\r\nimport { CartographyStyleService } from './cartography/cartography-style.service';\r\nimport { CartographySpatialSelectionParameterService } from './cartography/cartography-spatial-selection-parameter.service';\r\nimport { GetInfoService } from './getInfo/getInfo.service';\r\n/** load i18n assets*/\r\nexport function createTranslateLoader(http: HttpClient) {\r\n  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\r\n}\r\n\r\n\r\n/** SITMUN frontend core module */\r\n@NgModule({\r\n  imports: [\r\n    /*RouterModule,\r\n    HttpClientModule,\r\n    CommonModule,\r\n    AngularHalModule,*/\r\n    TranslateModule.forRoot({\r\n      loader: {\r\n        provide: TranslateLoader,\r\n        useFactory: (createTranslateLoader),\r\n        deps: [HttpClient]\r\n      }\r\n    }),\r\n  ],\r\n  declarations: [\r\n    HasAnyAuthorityDirective,\r\n    HasAnyAuthorityOnTerritoryDirective,\r\n  ],\r\n  exports: [\r\n    HasAnyAuthorityDirective,\r\n    HasAnyAuthorityOnTerritoryDirective,\r\n    TranslateModule\r\n  ]\r\n})\r\nexport class SitmunFrontendCoreModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: SitmunFrontendCoreModule,\r\n      providers: [\r\n        CodeListService,\r\n        TerritoryService,\r\n        TerritoryTypeService,\r\n        TerritoryGroupTypeService,\r\n        RoleService,\r\n        AccountService,\r\n        AuthService,\r\n        UserService,\r\n        ConnectionService,\r\n        TaskService,\r\n        TaskTypeService,\r\n        TaskUIService,\r\n        TaskGroupService,\r\n        TaskParameterService,\r\n        TaskAvailabilityService,\r\n        ServiceService,\r\n        ConfigurationParametersService,\r\n        CapabilitiesService,\r\n        GetInfoService,\r\n        ServiceParameterService,\r\n        CartographyService,\r\n        CartographyGroupService,\r\n        CartographyAvailabilityService,\r\n        CartographyParameterService,\r\n        CartographySpatialSelectionParameterService,\r\n        CartographyStyleService,\r\n        CartographyFilterService,\r\n        BackgroundService,\r\n        TreeService,\r\n        TreeNodeService,\r\n        ApplicationService,\r\n        ApplicationParameterService,\r\n        ApplicationBackgroundService,\r\n        AuthInterceptor,\r\n        AuthExpiredInterceptor,\r\n        Principal,\r\n        UserPositionService,\r\n        UserConfigurationService,\r\n        LoginService,\r\n        TranslationService,\r\n        LanguageService,\r\n        DashboardService,\r\n        MapConfigurationManagerService,\r\n        {\r\n          provide: HTTP_INTERCEPTORS,\r\n          useClass: AuthInterceptor,\r\n          multi: true\r\n        }\r\n        , {\r\n          provide: HTTP_INTERCEPTORS,\r\n          useClass: AuthExpiredInterceptor,\r\n          multi: true\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n\r\n","import {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {HttpClient, HttpClientModule} from '@angular/common/http';\r\nimport {HalParam, RestService} from './rest.service';\r\nimport {ExternalService} from './external.service';\r\nimport {ResourceService} from './resource.service';\r\nimport {ExternalConfigurationHandlerInterface} from './external-configuration.handler';\r\n\r\nimport 'rxjs';\r\n\r\nimport {SubTypeBuilder} from './subtype-builder';\r\n\r\nexport {ExternalService} from './external.service';\r\nexport {RestService} from './rest.service';\r\nexport {Resource} from './resource';\r\nexport {ResourceArray} from './resource-array';\r\nexport {ResourceService} from './resource.service';\r\nexport {Sort} from './sort';\r\nexport {ResourceHelper} from './resource-helper';\r\nexport {ExternalConfiguration} from './ExternalConfiguration';\r\nexport {ExternalConfigurationHandlerInterface} from './external-configuration.handler';\r\nexport {HalOptions, HalParam} from './rest.service';\r\nexport {SubTypeBuilder} from './subtype-builder';\r\n\r\n\r\n/** Angular HAL module */\r\n@NgModule({\r\n    imports: [HttpClientModule],\r\n    declarations: [],\r\n    exports: [HttpClientModule],\r\n    providers: [\r\n        ExternalService,\r\n        HttpClient,\r\n        {\r\n            provide: ResourceService,\r\n            useClass: ResourceService,\r\n            deps: [ExternalService]\r\n        }]\r\n})\r\nexport class AngularHalModule {\r\n    static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: AngularHalModule,\r\n            providers: [\r\n                ExternalService,\r\n                HttpClient,\r\n                {\r\n                    provide: ResourceService,\r\n                    useClass: ResourceService,\r\n                    deps: [ExternalService]\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}"]}